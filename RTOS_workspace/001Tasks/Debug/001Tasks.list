
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007698  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  08007868  08007868  00017868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b28  08007b28  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08007b28  08007b28  00017b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b30  08007b30  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b30  08007b30  00017b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b34  08007b34  00017b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d0c4  20000080  08007bb8  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000d144  08007bb8  0002d144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aeba  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033f9  00000000  00000000  0003af6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  0003e368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003f798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000119e8  00000000  00000000  00040a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00006dae  00000000  00000000  00052448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000591f6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005940  00000000  00000000  0005924c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007850 	.word	0x08007850

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08007850 	.word	0x08007850

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	2000d08c 	.word	0x2000d08c
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000364:	f000 b96e 	b.w	8000644 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	4604      	mov	r4, r0
 8000388:	468c      	mov	ip, r1
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8083 	bne.w	8000496 <__udivmoddi4+0x116>
 8000390:	428a      	cmp	r2, r1
 8000392:	4617      	mov	r7, r2
 8000394:	d947      	bls.n	8000426 <__udivmoddi4+0xa6>
 8000396:	fab2 f282 	clz	r2, r2
 800039a:	b142      	cbz	r2, 80003ae <__udivmoddi4+0x2e>
 800039c:	f1c2 0020 	rsb	r0, r2, #32
 80003a0:	fa24 f000 	lsr.w	r0, r4, r0
 80003a4:	4091      	lsls	r1, r2
 80003a6:	4097      	lsls	r7, r2
 80003a8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ac:	4094      	lsls	r4, r2
 80003ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fbbc f6f8 	udiv	r6, ip, r8
 80003b8:	fa1f fe87 	uxth.w	lr, r7
 80003bc:	fb08 c116 	mls	r1, r8, r6, ip
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f10e 	mul.w	r1, r6, lr
 80003c8:	4299      	cmp	r1, r3
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x60>
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003d2:	f080 8119 	bcs.w	8000608 <__udivmoddi4+0x288>
 80003d6:	4299      	cmp	r1, r3
 80003d8:	f240 8116 	bls.w	8000608 <__udivmoddi4+0x288>
 80003dc:	3e02      	subs	r6, #2
 80003de:	443b      	add	r3, r7
 80003e0:	1a5b      	subs	r3, r3, r1
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d909      	bls.n	800040c <__udivmoddi4+0x8c>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003fe:	f080 8105 	bcs.w	800060c <__udivmoddi4+0x28c>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f240 8102 	bls.w	800060c <__udivmoddi4+0x28c>
 8000408:	3802      	subs	r0, #2
 800040a:	443c      	add	r4, r7
 800040c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000410:	eba4 040e 	sub.w	r4, r4, lr
 8000414:	2600      	movs	r6, #0
 8000416:	b11d      	cbz	r5, 8000420 <__udivmoddi4+0xa0>
 8000418:	40d4      	lsrs	r4, r2
 800041a:	2300      	movs	r3, #0
 800041c:	e9c5 4300 	strd	r4, r3, [r5]
 8000420:	4631      	mov	r1, r6
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	b902      	cbnz	r2, 800042a <__udivmoddi4+0xaa>
 8000428:	deff      	udf	#255	; 0xff
 800042a:	fab2 f282 	clz	r2, r2
 800042e:	2a00      	cmp	r2, #0
 8000430:	d150      	bne.n	80004d4 <__udivmoddi4+0x154>
 8000432:	1bcb      	subs	r3, r1, r7
 8000434:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000438:	fa1f f887 	uxth.w	r8, r7
 800043c:	2601      	movs	r6, #1
 800043e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000442:	0c21      	lsrs	r1, r4, #16
 8000444:	fb0e 331c 	mls	r3, lr, ip, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb08 f30c 	mul.w	r3, r8, ip
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0xe4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0xe2>
 800045c:	428b      	cmp	r3, r1
 800045e:	f200 80e9 	bhi.w	8000634 <__udivmoddi4+0x2b4>
 8000462:	4684      	mov	ip, r0
 8000464:	1ac9      	subs	r1, r1, r3
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000470:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x10c>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x10a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80d9 	bhi.w	800063c <__udivmoddi4+0x2bc>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e7bf      	b.n	8000416 <__udivmoddi4+0x96>
 8000496:	428b      	cmp	r3, r1
 8000498:	d909      	bls.n	80004ae <__udivmoddi4+0x12e>
 800049a:	2d00      	cmp	r5, #0
 800049c:	f000 80b1 	beq.w	8000602 <__udivmoddi4+0x282>
 80004a0:	2600      	movs	r6, #0
 80004a2:	e9c5 0100 	strd	r0, r1, [r5]
 80004a6:	4630      	mov	r0, r6
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	fab3 f683 	clz	r6, r3
 80004b2:	2e00      	cmp	r6, #0
 80004b4:	d14a      	bne.n	800054c <__udivmoddi4+0x1cc>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d302      	bcc.n	80004c0 <__udivmoddi4+0x140>
 80004ba:	4282      	cmp	r2, r0
 80004bc:	f200 80b8 	bhi.w	8000630 <__udivmoddi4+0x2b0>
 80004c0:	1a84      	subs	r4, r0, r2
 80004c2:	eb61 0103 	sbc.w	r1, r1, r3
 80004c6:	2001      	movs	r0, #1
 80004c8:	468c      	mov	ip, r1
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	d0a8      	beq.n	8000420 <__udivmoddi4+0xa0>
 80004ce:	e9c5 4c00 	strd	r4, ip, [r5]
 80004d2:	e7a5      	b.n	8000420 <__udivmoddi4+0xa0>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f603 	lsr.w	r6, r0, r3
 80004dc:	4097      	lsls	r7, r2
 80004de:	fa01 f002 	lsl.w	r0, r1, r2
 80004e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e6:	40d9      	lsrs	r1, r3
 80004e8:	4330      	orrs	r0, r6
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	fbb1 f6fe 	udiv	r6, r1, lr
 80004f0:	fa1f f887 	uxth.w	r8, r7
 80004f4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004fc:	fb06 f108 	mul.w	r1, r6, r8
 8000500:	4299      	cmp	r1, r3
 8000502:	fa04 f402 	lsl.w	r4, r4, r2
 8000506:	d909      	bls.n	800051c <__udivmoddi4+0x19c>
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800050e:	f080 808d 	bcs.w	800062c <__udivmoddi4+0x2ac>
 8000512:	4299      	cmp	r1, r3
 8000514:	f240 808a 	bls.w	800062c <__udivmoddi4+0x2ac>
 8000518:	3e02      	subs	r6, #2
 800051a:	443b      	add	r3, r7
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b281      	uxth	r1, r0
 8000520:	fbb3 f0fe 	udiv	r0, r3, lr
 8000524:	fb0e 3310 	mls	r3, lr, r0, r3
 8000528:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052c:	fb00 f308 	mul.w	r3, r0, r8
 8000530:	428b      	cmp	r3, r1
 8000532:	d907      	bls.n	8000544 <__udivmoddi4+0x1c4>
 8000534:	1879      	adds	r1, r7, r1
 8000536:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800053a:	d273      	bcs.n	8000624 <__udivmoddi4+0x2a4>
 800053c:	428b      	cmp	r3, r1
 800053e:	d971      	bls.n	8000624 <__udivmoddi4+0x2a4>
 8000540:	3802      	subs	r0, #2
 8000542:	4439      	add	r1, r7
 8000544:	1acb      	subs	r3, r1, r3
 8000546:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800054a:	e778      	b.n	800043e <__udivmoddi4+0xbe>
 800054c:	f1c6 0c20 	rsb	ip, r6, #32
 8000550:	fa03 f406 	lsl.w	r4, r3, r6
 8000554:	fa22 f30c 	lsr.w	r3, r2, ip
 8000558:	431c      	orrs	r4, r3
 800055a:	fa20 f70c 	lsr.w	r7, r0, ip
 800055e:	fa01 f306 	lsl.w	r3, r1, r6
 8000562:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000566:	fa21 f10c 	lsr.w	r1, r1, ip
 800056a:	431f      	orrs	r7, r3
 800056c:	0c3b      	lsrs	r3, r7, #16
 800056e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000572:	fa1f f884 	uxth.w	r8, r4
 8000576:	fb0e 1119 	mls	r1, lr, r9, r1
 800057a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800057e:	fb09 fa08 	mul.w	sl, r9, r8
 8000582:	458a      	cmp	sl, r1
 8000584:	fa02 f206 	lsl.w	r2, r2, r6
 8000588:	fa00 f306 	lsl.w	r3, r0, r6
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x220>
 800058e:	1861      	adds	r1, r4, r1
 8000590:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000594:	d248      	bcs.n	8000628 <__udivmoddi4+0x2a8>
 8000596:	458a      	cmp	sl, r1
 8000598:	d946      	bls.n	8000628 <__udivmoddi4+0x2a8>
 800059a:	f1a9 0902 	sub.w	r9, r9, #2
 800059e:	4421      	add	r1, r4
 80005a0:	eba1 010a 	sub.w	r1, r1, sl
 80005a4:	b2bf      	uxth	r7, r7
 80005a6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005aa:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005b2:	fb00 f808 	mul.w	r8, r0, r8
 80005b6:	45b8      	cmp	r8, r7
 80005b8:	d907      	bls.n	80005ca <__udivmoddi4+0x24a>
 80005ba:	19e7      	adds	r7, r4, r7
 80005bc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80005c0:	d22e      	bcs.n	8000620 <__udivmoddi4+0x2a0>
 80005c2:	45b8      	cmp	r8, r7
 80005c4:	d92c      	bls.n	8000620 <__udivmoddi4+0x2a0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	4427      	add	r7, r4
 80005ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005ce:	eba7 0708 	sub.w	r7, r7, r8
 80005d2:	fba0 8902 	umull	r8, r9, r0, r2
 80005d6:	454f      	cmp	r7, r9
 80005d8:	46c6      	mov	lr, r8
 80005da:	4649      	mov	r1, r9
 80005dc:	d31a      	bcc.n	8000614 <__udivmoddi4+0x294>
 80005de:	d017      	beq.n	8000610 <__udivmoddi4+0x290>
 80005e0:	b15d      	cbz	r5, 80005fa <__udivmoddi4+0x27a>
 80005e2:	ebb3 020e 	subs.w	r2, r3, lr
 80005e6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ea:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ee:	40f2      	lsrs	r2, r6
 80005f0:	ea4c 0202 	orr.w	r2, ip, r2
 80005f4:	40f7      	lsrs	r7, r6
 80005f6:	e9c5 2700 	strd	r2, r7, [r5]
 80005fa:	2600      	movs	r6, #0
 80005fc:	4631      	mov	r1, r6
 80005fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000602:	462e      	mov	r6, r5
 8000604:	4628      	mov	r0, r5
 8000606:	e70b      	b.n	8000420 <__udivmoddi4+0xa0>
 8000608:	4606      	mov	r6, r0
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0x60>
 800060c:	4618      	mov	r0, r3
 800060e:	e6fd      	b.n	800040c <__udivmoddi4+0x8c>
 8000610:	4543      	cmp	r3, r8
 8000612:	d2e5      	bcs.n	80005e0 <__udivmoddi4+0x260>
 8000614:	ebb8 0e02 	subs.w	lr, r8, r2
 8000618:	eb69 0104 	sbc.w	r1, r9, r4
 800061c:	3801      	subs	r0, #1
 800061e:	e7df      	b.n	80005e0 <__udivmoddi4+0x260>
 8000620:	4608      	mov	r0, r1
 8000622:	e7d2      	b.n	80005ca <__udivmoddi4+0x24a>
 8000624:	4660      	mov	r0, ip
 8000626:	e78d      	b.n	8000544 <__udivmoddi4+0x1c4>
 8000628:	4681      	mov	r9, r0
 800062a:	e7b9      	b.n	80005a0 <__udivmoddi4+0x220>
 800062c:	4666      	mov	r6, ip
 800062e:	e775      	b.n	800051c <__udivmoddi4+0x19c>
 8000630:	4630      	mov	r0, r6
 8000632:	e74a      	b.n	80004ca <__udivmoddi4+0x14a>
 8000634:	f1ac 0c02 	sub.w	ip, ip, #2
 8000638:	4439      	add	r1, r7
 800063a:	e713      	b.n	8000464 <__udivmoddi4+0xe4>
 800063c:	3802      	subs	r0, #2
 800063e:	443c      	add	r4, r7
 8000640:	e724      	b.n	800048c <__udivmoddi4+0x10c>
 8000642:	bf00      	nop

08000644 <__aeabi_idiv0>:
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b090      	sub	sp, #64	; 0x40
 800064c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800065e:	4bad      	ldr	r3, [pc, #692]	; (8000914 <MX_GPIO_Init+0x2cc>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4aac      	ldr	r2, [pc, #688]	; (8000914 <MX_GPIO_Init+0x2cc>)
 8000664:	f043 0310 	orr.w	r3, r3, #16
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4baa      	ldr	r3, [pc, #680]	; (8000914 <MX_GPIO_Init+0x2cc>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0310 	and.w	r3, r3, #16
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
 8000674:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000676:	4ba7      	ldr	r3, [pc, #668]	; (8000914 <MX_GPIO_Init+0x2cc>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4aa6      	ldr	r2, [pc, #664]	; (8000914 <MX_GPIO_Init+0x2cc>)
 800067c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4ba4      	ldr	r3, [pc, #656]	; (8000914 <MX_GPIO_Init+0x2cc>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
 800068c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	4ba1      	ldr	r3, [pc, #644]	; (8000914 <MX_GPIO_Init+0x2cc>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4aa0      	ldr	r2, [pc, #640]	; (8000914 <MX_GPIO_Init+0x2cc>)
 8000694:	f043 0302 	orr.w	r3, r3, #2
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b9e      	ldr	r3, [pc, #632]	; (8000914 <MX_GPIO_Init+0x2cc>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	623b      	str	r3, [r7, #32]
 80006a4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006a6:	4b9b      	ldr	r3, [pc, #620]	; (8000914 <MX_GPIO_Init+0x2cc>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a9a      	ldr	r2, [pc, #616]	; (8000914 <MX_GPIO_Init+0x2cc>)
 80006ac:	f043 0308 	orr.w	r3, r3, #8
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b98      	ldr	r3, [pc, #608]	; (8000914 <MX_GPIO_Init+0x2cc>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0308 	and.w	r3, r3, #8
 80006ba:	61fb      	str	r3, [r7, #28]
 80006bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	4b95      	ldr	r3, [pc, #596]	; (8000914 <MX_GPIO_Init+0x2cc>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a94      	ldr	r2, [pc, #592]	; (8000914 <MX_GPIO_Init+0x2cc>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b92      	ldr	r3, [pc, #584]	; (8000914 <MX_GPIO_Init+0x2cc>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	61bb      	str	r3, [r7, #24]
 80006d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	4b8f      	ldr	r3, [pc, #572]	; (8000914 <MX_GPIO_Init+0x2cc>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a8e      	ldr	r2, [pc, #568]	; (8000914 <MX_GPIO_Init+0x2cc>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b8c      	ldr	r3, [pc, #560]	; (8000914 <MX_GPIO_Init+0x2cc>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80006ee:	4b89      	ldr	r3, [pc, #548]	; (8000914 <MX_GPIO_Init+0x2cc>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a88      	ldr	r2, [pc, #544]	; (8000914 <MX_GPIO_Init+0x2cc>)
 80006f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b86      	ldr	r3, [pc, #536]	; (8000914 <MX_GPIO_Init+0x2cc>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000706:	4b83      	ldr	r3, [pc, #524]	; (8000914 <MX_GPIO_Init+0x2cc>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a82      	ldr	r2, [pc, #520]	; (8000914 <MX_GPIO_Init+0x2cc>)
 800070c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b80      	ldr	r3, [pc, #512]	; (8000914 <MX_GPIO_Init+0x2cc>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800071e:	4b7d      	ldr	r3, [pc, #500]	; (8000914 <MX_GPIO_Init+0x2cc>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a7c      	ldr	r2, [pc, #496]	; (8000914 <MX_GPIO_Init+0x2cc>)
 8000724:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b7a      	ldr	r3, [pc, #488]	; (8000914 <MX_GPIO_Init+0x2cc>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000736:	4b77      	ldr	r3, [pc, #476]	; (8000914 <MX_GPIO_Init+0x2cc>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a76      	ldr	r2, [pc, #472]	; (8000914 <MX_GPIO_Init+0x2cc>)
 800073c:	f043 0320 	orr.w	r3, r3, #32
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b74      	ldr	r3, [pc, #464]	; (8000914 <MX_GPIO_Init+0x2cc>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0320 	and.w	r3, r3, #32
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	4b71      	ldr	r3, [pc, #452]	; (8000914 <MX_GPIO_Init+0x2cc>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a70      	ldr	r2, [pc, #448]	; (8000914 <MX_GPIO_Init+0x2cc>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b6e      	ldr	r3, [pc, #440]	; (8000914 <MX_GPIO_Init+0x2cc>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000766:	2201      	movs	r2, #1
 8000768:	2120      	movs	r1, #32
 800076a:	486b      	ldr	r0, [pc, #428]	; (8000918 <MX_GPIO_Init+0x2d0>)
 800076c:	f001 fab4 	bl	8001cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	f241 010c 	movw	r1, #4108	; 0x100c
 8000776:	4869      	ldr	r0, [pc, #420]	; (800091c <MX_GPIO_Init+0x2d4>)
 8000778:	f001 faae 	bl	8001cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2108      	movs	r1, #8
 8000780:	4867      	ldr	r0, [pc, #412]	; (8000920 <MX_GPIO_Init+0x2d8>)
 8000782:	f001 faa9 	bl	8001cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800078c:	4865      	ldr	r0, [pc, #404]	; (8000924 <MX_GPIO_Init+0x2dc>)
 800078e:	f001 faa3 	bl	8001cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	21c8      	movs	r1, #200	; 0xc8
 8000796:	4864      	ldr	r0, [pc, #400]	; (8000928 <MX_GPIO_Init+0x2e0>)
 8000798:	f001 fa9e 	bl	8001cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 800079c:	2310      	movs	r3, #16
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a0:	2302      	movs	r3, #2
 80007a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2300      	movs	r3, #0
 80007aa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80007ac:	230e      	movs	r3, #14
 80007ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007b4:	4619      	mov	r1, r3
 80007b6:	485d      	ldr	r0, [pc, #372]	; (800092c <MX_GPIO_Init+0x2e4>)
 80007b8:	f001 f8e2 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80007bc:	2308      	movs	r3, #8
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c0:	2300      	movs	r3, #0
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007cc:	4619      	mov	r1, r3
 80007ce:	4857      	ldr	r0, [pc, #348]	; (800092c <MX_GPIO_Init+0x2e4>)
 80007d0:	f001 f8d6 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80007d4:	2304      	movs	r3, #4
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e0:	2303      	movs	r3, #3
 80007e2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80007e4:	2309      	movs	r3, #9
 80007e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ec:	4619      	mov	r1, r3
 80007ee:	484f      	ldr	r0, [pc, #316]	; (800092c <MX_GPIO_Init+0x2e4>)
 80007f0:	f001 f8c6 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80007f4:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80007f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	2302      	movs	r3, #2
 80007fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000806:	230b      	movs	r3, #11
 8000808:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800080a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800080e:	4619      	mov	r1, r3
 8000810:	4845      	ldr	r0, [pc, #276]	; (8000928 <MX_GPIO_Init+0x2e0>)
 8000812:	f001 f8b5 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000816:	f64f 7383 	movw	r3, #65411	; 0xff83
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000824:	2303      	movs	r3, #3
 8000826:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000828:	230c      	movs	r3, #12
 800082a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800082c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000830:	4619      	mov	r1, r3
 8000832:	483e      	ldr	r0, [pc, #248]	; (800092c <MX_GPIO_Init+0x2e4>)
 8000834:	f001 f8a4 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000838:	f44f 7340 	mov.w	r3, #768	; 0x300
 800083c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800083e:	2312      	movs	r3, #18
 8000840:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000842:	2301      	movs	r3, #1
 8000844:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800084a:	2304      	movs	r3, #4
 800084c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000852:	4619      	mov	r1, r3
 8000854:	4836      	ldr	r0, [pc, #216]	; (8000930 <MX_GPIO_Init+0x2e8>)
 8000856:	f001 f893 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800085a:	f643 4323 	movw	r3, #15395	; 0x3c23
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000868:	2303      	movs	r3, #3
 800086a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800086c:	230a      	movs	r3, #10
 800086e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000870:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000874:	4619      	mov	r1, r3
 8000876:	482e      	ldr	r0, [pc, #184]	; (8000930 <MX_GPIO_Init+0x2e8>)
 8000878:	f001 f882 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800087c:	2310      	movs	r3, #16
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800088c:	2302      	movs	r3, #2
 800088e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000894:	4619      	mov	r1, r3
 8000896:	4826      	ldr	r0, [pc, #152]	; (8000930 <MX_GPIO_Init+0x2e8>)
 8000898:	f001 f872 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800089c:	2380      	movs	r3, #128	; 0x80
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80008ac:	2308      	movs	r3, #8
 80008ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008b4:	4619      	mov	r1, r3
 80008b6:	4818      	ldr	r0, [pc, #96]	; (8000918 <MX_GPIO_Init+0x2d0>)
 80008b8:	f001 f862 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80008bc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ca:	2303      	movs	r3, #3
 80008cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008ce:	230c      	movs	r3, #12
 80008d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008d6:	4619      	mov	r1, r3
 80008d8:	4816      	ldr	r0, [pc, #88]	; (8000934 <MX_GPIO_Init+0x2ec>)
 80008da:	f001 f851 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80008de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008f0:	2301      	movs	r3, #1
 80008f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008f8:	4619      	mov	r1, r3
 80008fa:	480f      	ldr	r0, [pc, #60]	; (8000938 <MX_GPIO_Init+0x2f0>)
 80008fc:	f001 f840 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000900:	2360      	movs	r3, #96	; 0x60
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000910:	230d      	movs	r3, #13
 8000912:	e013      	b.n	800093c <MX_GPIO_Init+0x2f4>
 8000914:	40023800 	.word	0x40023800
 8000918:	40020c00 	.word	0x40020c00
 800091c:	40022000 	.word	0x40022000
 8000920:	40022800 	.word	0x40022800
 8000924:	40021c00 	.word	0x40021c00
 8000928:	40021800 	.word	0x40021800
 800092c:	40021000 	.word	0x40021000
 8000930:	40020400 	.word	0x40020400
 8000934:	40020800 	.word	0x40020800
 8000938:	40020000 	.word	0x40020000
 800093c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800093e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000942:	4619      	mov	r1, r3
 8000944:	48bb      	ldr	r0, [pc, #748]	; (8000c34 <MX_GPIO_Init+0x5ec>)
 8000946:	f001 f81b 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800094a:	2340      	movs	r3, #64	; 0x40
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000956:	2303      	movs	r3, #3
 8000958:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800095a:	230a      	movs	r3, #10
 800095c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000962:	4619      	mov	r1, r3
 8000964:	48b4      	ldr	r0, [pc, #720]	; (8000c38 <MX_GPIO_Init+0x5f0>)
 8000966:	f001 f80b 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800096a:	f248 1333 	movw	r3, #33075	; 0x8133
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000978:	2303      	movs	r3, #3
 800097a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800097c:	230c      	movs	r3, #12
 800097e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000984:	4619      	mov	r1, r3
 8000986:	48ad      	ldr	r0, [pc, #692]	; (8000c3c <MX_GPIO_Init+0x5f4>)
 8000988:	f000 fffa 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800098c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800099e:	230e      	movs	r3, #14
 80009a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80009a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009a6:	4619      	mov	r1, r3
 80009a8:	48a5      	ldr	r0, [pc, #660]	; (8000c40 <MX_GPIO_Init+0x5f8>)
 80009aa:	f000 ffe9 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80009ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b4:	2300      	movs	r3, #0
 80009b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009c0:	4619      	mov	r1, r3
 80009c2:	489f      	ldr	r0, [pc, #636]	; (8000c40 <MX_GPIO_Init+0x5f8>)
 80009c4:	f000 ffdc 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80009c8:	2340      	movs	r3, #64	; 0x40
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009cc:	4b9d      	ldr	r3, [pc, #628]	; (8000c44 <MX_GPIO_Init+0x5fc>)
 80009ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009d8:	4619      	mov	r1, r3
 80009da:	489b      	ldr	r0, [pc, #620]	; (8000c48 <MX_GPIO_Init+0x600>)
 80009dc:	f000 ffd0 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80009e0:	f24c 7303 	movw	r3, #50947	; 0xc703
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ee:	2303      	movs	r3, #3
 80009f0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009f2:	230c      	movs	r3, #12
 80009f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009fa:	4619      	mov	r1, r3
 80009fc:	4892      	ldr	r0, [pc, #584]	; (8000c48 <MX_GPIO_Init+0x600>)
 80009fe:	f000 ffbf 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000a02:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a14:	230a      	movs	r3, #10
 8000a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	488b      	ldr	r0, [pc, #556]	; (8000c4c <MX_GPIO_Init+0x604>)
 8000a20:	f000 ffae 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000a24:	23f0      	movs	r3, #240	; 0xf0
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a34:	230a      	movs	r3, #10
 8000a36:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4884      	ldr	r0, [pc, #528]	; (8000c50 <MX_GPIO_Init+0x608>)
 8000a40:	f000 ff9e 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000a44:	23f7      	movs	r3, #247	; 0xf7
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a54:	230e      	movs	r3, #14
 8000a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000a58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	487d      	ldr	r0, [pc, #500]	; (8000c54 <MX_GPIO_Init+0x60c>)
 8000a60:	f000 ff8e 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a76:	2309      	movs	r3, #9
 8000a78:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a7e:	4619      	mov	r1, r3
 8000a80:	486e      	ldr	r0, [pc, #440]	; (8000c3c <MX_GPIO_Init+0x5f4>)
 8000a82:	f000 ff7d 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a98:	230a      	movs	r3, #10
 8000a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4866      	ldr	r0, [pc, #408]	; (8000c3c <MX_GPIO_Init+0x5f4>)
 8000aa4:	f000 ff6c 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000aa8:	2320      	movs	r3, #32
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000abc:	4619      	mov	r1, r3
 8000abe:	4862      	ldr	r0, [pc, #392]	; (8000c48 <MX_GPIO_Init+0x600>)
 8000ac0:	f000 ff5e 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ad4:	230d      	movs	r3, #13
 8000ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000adc:	4619      	mov	r1, r3
 8000ade:	485a      	ldr	r0, [pc, #360]	; (8000c48 <MX_GPIO_Init+0x600>)
 8000ae0:	f000 ff4e 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000ae4:	f241 030c 	movw	r3, #4108	; 0x100c
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000af6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000afa:	4619      	mov	r1, r3
 8000afc:	4854      	ldr	r0, [pc, #336]	; (8000c50 <MX_GPIO_Init+0x608>)
 8000afe:	f000 ff3f 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000b02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b14:	4619      	mov	r1, r3
 8000b16:	4850      	ldr	r0, [pc, #320]	; (8000c58 <MX_GPIO_Init+0x610>)
 8000b18:	f000 ff32 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000b1c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b2e:	230c      	movs	r3, #12
 8000b30:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b36:	4619      	mov	r1, r3
 8000b38:	4848      	ldr	r0, [pc, #288]	; (8000c5c <MX_GPIO_Init+0x614>)
 8000b3a:	f000 ff21 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000b3e:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b50:	230e      	movs	r3, #14
 8000b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b58:	4619      	mov	r1, r3
 8000b5a:	483d      	ldr	r0, [pc, #244]	; (8000c50 <MX_GPIO_Init+0x608>)
 8000b5c:	f000 ff10 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000b60:	2308      	movs	r3, #8
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b74:	4619      	mov	r1, r3
 8000b76:	4837      	ldr	r0, [pc, #220]	; (8000c54 <MX_GPIO_Init+0x60c>)
 8000b78:	f000 ff02 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b8e:	230d      	movs	r3, #13
 8000b90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b96:	4619      	mov	r1, r3
 8000b98:	4828      	ldr	r0, [pc, #160]	; (8000c3c <MX_GPIO_Init+0x5f4>)
 8000b9a:	f000 fef1 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b9e:	2310      	movs	r3, #16
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4825      	ldr	r0, [pc, #148]	; (8000c48 <MX_GPIO_Init+0x600>)
 8000bb2:	f000 fee5 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000bc6:	230c      	movs	r3, #12
 8000bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bce:	4619      	mov	r1, r3
 8000bd0:	481d      	ldr	r0, [pc, #116]	; (8000c48 <MX_GPIO_Init+0x600>)
 8000bd2:	f000 fed5 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000bd6:	f248 0304 	movw	r3, #32772	; 0x8004
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000be4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be8:	4619      	mov	r1, r3
 8000bea:	481d      	ldr	r0, [pc, #116]	; (8000c60 <MX_GPIO_Init+0x618>)
 8000bec:	f000 fec8 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c00:	2305      	movs	r3, #5
 8000c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4811      	ldr	r0, [pc, #68]	; (8000c50 <MX_GPIO_Init+0x608>)
 8000c0c:	f000 feb8 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000c10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c26:	4619      	mov	r1, r3
 8000c28:	480d      	ldr	r0, [pc, #52]	; (8000c60 <MX_GPIO_Init+0x618>)
 8000c2a:	f000 fea9 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000c2e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000c32:	e017      	b.n	8000c64 <MX_GPIO_Init+0x61c>
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40020400 	.word	0x40020400
 8000c3c:	40021800 	.word	0x40021800
 8000c40:	40022400 	.word	0x40022400
 8000c44:	10120000 	.word	0x10120000
 8000c48:	40020c00 	.word	0x40020c00
 8000c4c:	40020000 	.word	0x40020000
 8000c50:	40022000 	.word	0x40022000
 8000c54:	40022800 	.word	0x40022800
 8000c58:	40020800 	.word	0x40020800
 8000c5c:	40021400 	.word	0x40021400
 8000c60:	40021c00 	.word	0x40021c00
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c72:	230d      	movs	r3, #13
 8000c74:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	48a5      	ldr	r0, [pc, #660]	; (8000f14 <MX_GPIO_Init+0x8cc>)
 8000c7e:	f000 fe7f 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000c82:	2301      	movs	r3, #1
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000c92:	2302      	movs	r3, #2
 8000c94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	489e      	ldr	r0, [pc, #632]	; (8000f18 <MX_GPIO_Init+0x8d0>)
 8000c9e:	f000 fe6f 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000ca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4897      	ldr	r0, [pc, #604]	; (8000f1c <MX_GPIO_Init+0x8d4>)
 8000cc0:	f000 fe5e 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000cc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cca:	4b95      	ldr	r3, [pc, #596]	; (8000f20 <MX_GPIO_Init+0x8d8>)
 8000ccc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	488f      	ldr	r0, [pc, #572]	; (8000f18 <MX_GPIO_Init+0x8d0>)
 8000cda:	f000 fe51 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000cde:	23c0      	movs	r3, #192	; 0xc0
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000cee:	2308      	movs	r3, #8
 8000cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	488a      	ldr	r0, [pc, #552]	; (8000f24 <MX_GPIO_Init+0x8dc>)
 8000cfa:	f000 fe41 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000cfe:	2310      	movs	r3, #16
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d0e:	230a      	movs	r3, #10
 8000d10:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000d12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d16:	4619      	mov	r1, r3
 8000d18:	487e      	ldr	r0, [pc, #504]	; (8000f14 <MX_GPIO_Init+0x8cc>)
 8000d1a:	f000 fe31 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000d1e:	2328      	movs	r3, #40	; 0x28
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d2e:	230c      	movs	r3, #12
 8000d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d36:	4619      	mov	r1, r3
 8000d38:	4876      	ldr	r0, [pc, #472]	; (8000f14 <MX_GPIO_Init+0x8cc>)
 8000d3a:	f000 fe21 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000d3e:	23c8      	movs	r3, #200	; 0xc8
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d42:	2301      	movs	r3, #1
 8000d44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d52:	4619      	mov	r1, r3
 8000d54:	4874      	ldr	r0, [pc, #464]	; (8000f28 <MX_GPIO_Init+0x8e0>)
 8000d56:	f000 fe13 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000d5a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d60:	2303      	movs	r3, #3
 8000d62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	486f      	ldr	r0, [pc, #444]	; (8000f2c <MX_GPIO_Init+0x8e4>)
 8000d70:	f000 fe06 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000d74:	2308      	movs	r3, #8
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d80:	2303      	movs	r3, #3
 8000d82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d84:	230c      	movs	r3, #12
 8000d86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000d88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4865      	ldr	r0, [pc, #404]	; (8000f24 <MX_GPIO_Init+0x8dc>)
 8000d90:	f000 fdf6 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000d94:	2305      	movs	r3, #5
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000da4:	230a      	movs	r3, #10
 8000da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dac:	4619      	mov	r1, r3
 8000dae:	485d      	ldr	r0, [pc, #372]	; (8000f24 <MX_GPIO_Init+0x8dc>)
 8000db0:	f000 fde6 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000db4:	2332      	movs	r3, #50	; 0x32
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dc4:	230b      	movs	r3, #11
 8000dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4855      	ldr	r0, [pc, #340]	; (8000f24 <MX_GPIO_Init+0x8dc>)
 8000dd0:	f000 fdd6 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000de4:	2309      	movs	r3, #9
 8000de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dec:	4619      	mov	r1, r3
 8000dee:	4850      	ldr	r0, [pc, #320]	; (8000f30 <MX_GPIO_Init+0x8e8>)
 8000df0:	f000 fdc6 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000df4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e02:	2303      	movs	r3, #3
 8000e04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e06:	2309      	movs	r3, #9
 8000e08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4848      	ldr	r0, [pc, #288]	; (8000f34 <MX_GPIO_Init+0x8ec>)
 8000e12:	f000 fdb5 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000e16:	2304      	movs	r3, #4
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e26:	4619      	mov	r1, r3
 8000e28:	483f      	ldr	r0, [pc, #252]	; (8000f28 <MX_GPIO_Init+0x8e0>)
 8000e2a:	f000 fda9 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e2e:	2386      	movs	r3, #134	; 0x86
 8000e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e3e:	230b      	movs	r3, #11
 8000e40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e46:	4619      	mov	r1, r3
 8000e48:	4834      	ldr	r0, [pc, #208]	; (8000f1c <MX_GPIO_Init+0x8d4>)
 8000e4a:	f000 fd99 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e52:	2303      	movs	r3, #3
 8000e54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000e5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e5e:	4619      	mov	r1, r3
 8000e60:	482e      	ldr	r0, [pc, #184]	; (8000f1c <MX_GPIO_Init+0x8d4>)
 8000e62:	f000 fd8d 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000e66:	2350      	movs	r3, #80	; 0x50
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e76:	230d      	movs	r3, #13
 8000e78:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4826      	ldr	r0, [pc, #152]	; (8000f1c <MX_GPIO_Init+0x8d4>)
 8000e82:	f000 fd7d 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000e86:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8c:	2312      	movs	r3, #18
 8000e8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e90:	2301      	movs	r3, #1
 8000e92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e98:	2304      	movs	r3, #4
 8000e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	481c      	ldr	r0, [pc, #112]	; (8000f14 <MX_GPIO_Init+0x8cc>)
 8000ea4:	f000 fd6c 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000ea8:	2328      	movs	r3, #40	; 0x28
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000eb8:	230a      	movs	r3, #10
 8000eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4816      	ldr	r0, [pc, #88]	; (8000f1c <MX_GPIO_Init+0x8d4>)
 8000ec4:	f000 fd5c 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000ec8:	2340      	movs	r3, #64	; 0x40
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000ed8:	2309      	movs	r3, #9
 8000eda:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480c      	ldr	r0, [pc, #48]	; (8000f14 <MX_GPIO_Init+0x8cc>)
 8000ee4:	f000 fd4c 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000ee8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000efa:	2305      	movs	r3, #5
 8000efc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f02:	4619      	mov	r1, r3
 8000f04:	480a      	ldr	r0, [pc, #40]	; (8000f30 <MX_GPIO_Init+0x8e8>)
 8000f06:	f000 fd3b 	bl	8001980 <HAL_GPIO_Init>

}
 8000f0a:	bf00      	nop
 8000f0c:	3740      	adds	r7, #64	; 0x40
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40021c00 	.word	0x40021c00
 8000f18:	40022000 	.word	0x40022000
 8000f1c:	40020000 	.word	0x40020000
 8000f20:	10120000 	.word	0x10120000
 8000f24:	40020800 	.word	0x40020800
 8000f28:	40021800 	.word	0x40021800
 8000f2c:	40021400 	.word	0x40021400
 8000f30:	40020400 	.word	0x40020400
 8000f34:	40020c00 	.word	0x40020c00

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3e:	f000 fc10 	bl	8001762 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f42:	f000 f865 	bl	8001010 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SEGGER_GET_DBG_WRITEACCESS();
 8000f46:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <main+0x9c>)
 8000f48:	4a23      	ldr	r2, [pc, #140]	; (8000fd8 <main+0xa0>)
 8000f4a:	601a      	str	r2, [r3, #0]
  SEGGER_SYSVIEW_ENABLE_DBG();
 8000f4c:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <main+0xa4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a22      	ldr	r2, [pc, #136]	; (8000fdc <main+0xa4>)
 8000f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f56:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_ENABLE_TIMESTAMP();
 8000f58:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <main+0xa8>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a20      	ldr	r2, [pc, #128]	; (8000fe0 <main+0xa8>)
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f64:	f7ff fb70 	bl	8000648 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000f68:	f000 fa4c 	bl	8001404 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 8000f6c:	481d      	ldr	r0, [pc, #116]	; (8000fe4 <main+0xac>)
 8000f6e:	f000 fb57 	bl	8001620 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000f72:	f003 fee1 	bl	8004d38 <SEGGER_SYSVIEW_Conf>
  startSysViewCustom(); // added here, because I'm not receiving that SysView hello string...
 8000f76:	f000 fafa 	bl	800156e <startSysViewCustom>

  traceSTART();

  status = xTaskCreate(task1_handler,  "Task-1",  200, "Hello world from Task-1\n", 2, &task1_handle);
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <main+0xb0>)
 8000f7c:	9301      	str	r3, [sp, #4]
 8000f7e:	2302      	movs	r3, #2
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <main+0xb4>)
 8000f84:	22c8      	movs	r2, #200	; 0xc8
 8000f86:	491a      	ldr	r1, [pc, #104]	; (8000ff0 <main+0xb8>)
 8000f88:	481a      	ldr	r0, [pc, #104]	; (8000ff4 <main+0xbc>)
 8000f8a:	f002 feb7 	bl	8003cfc <xTaskCreate>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4a19      	ldr	r2, [pc, #100]	; (8000ff8 <main+0xc0>)
 8000f92:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000f94:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <main+0xc0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d003      	beq.n	8000fa4 <main+0x6c>
 8000f9c:	4917      	ldr	r1, [pc, #92]	; (8000ffc <main+0xc4>)
 8000f9e:	2081      	movs	r0, #129	; 0x81
 8000fa0:	f000 f8f8 	bl	8001194 <vAssertCalled>

  status = xTaskCreate(task2_handler,  "Task-2",  200, "Hello world from Task-2\n", 2, &task2_handle);
 8000fa4:	4b16      	ldr	r3, [pc, #88]	; (8001000 <main+0xc8>)
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	2302      	movs	r3, #2
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <main+0xcc>)
 8000fae:	22c8      	movs	r2, #200	; 0xc8
 8000fb0:	4915      	ldr	r1, [pc, #84]	; (8001008 <main+0xd0>)
 8000fb2:	4816      	ldr	r0, [pc, #88]	; (800100c <main+0xd4>)
 8000fb4:	f002 fea2 	bl	8003cfc <xTaskCreate>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	4a0f      	ldr	r2, [pc, #60]	; (8000ff8 <main+0xc0>)
 8000fbc:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <main+0xc0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d003      	beq.n	8000fce <main+0x96>
 8000fc6:	490d      	ldr	r1, [pc, #52]	; (8000ffc <main+0xc4>)
 8000fc8:	2084      	movs	r0, #132	; 0x84
 8000fca:	f000 f8e3 	bl	8001194 <vAssertCalled>

  vTaskStartScheduler();
 8000fce:	f002 ffe7 	bl	8003fa0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <main+0x9a>
 8000fd4:	e0001fb0 	.word	0xe0001fb0
 8000fd8:	c5acce55 	.word	0xc5acce55
 8000fdc:	e000edfc 	.word	0xe000edfc
 8000fe0:	e0001000 	.word	0xe0001000
 8000fe4:	0007a120 	.word	0x0007a120
 8000fe8:	2000cfac 	.word	0x2000cfac
 8000fec:	08007868 	.word	0x08007868
 8000ff0:	08007884 	.word	0x08007884
 8000ff4:	08001125 	.word	0x08001125
 8000ff8:	2000cfb4 	.word	0x2000cfb4
 8000ffc:	0800788c 	.word	0x0800788c
 8001000:	2000cfb0 	.word	0x2000cfb0
 8001004:	080078a0 	.word	0x080078a0
 8001008:	080078bc 	.word	0x080078bc
 800100c:	0800115d 	.word	0x0800115d

08001010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b0b4      	sub	sp, #208	; 0xd0
 8001014:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001016:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800101a:	2230      	movs	r2, #48	; 0x30
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f005 ffcc 	bl	8006fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001024:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	2284      	movs	r2, #132	; 0x84
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f005 ffbd 	bl	8006fbc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001042:	4b36      	ldr	r3, [pc, #216]	; (800111c <SystemClock_Config+0x10c>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a35      	ldr	r2, [pc, #212]	; (800111c <SystemClock_Config+0x10c>)
 8001048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
 800104e:	4b33      	ldr	r3, [pc, #204]	; (800111c <SystemClock_Config+0x10c>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800105a:	4b31      	ldr	r3, [pc, #196]	; (8001120 <SystemClock_Config+0x110>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001062:	4a2f      	ldr	r2, [pc, #188]	; (8001120 <SystemClock_Config+0x110>)
 8001064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <SystemClock_Config+0x110>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001076:	2302      	movs	r3, #2
 8001078:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800107c:	2301      	movs	r3, #1
 800107e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001082:	2310      	movs	r3, #16
 8001084:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001088:	2302      	movs	r3, #2
 800108a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001094:	2308      	movs	r3, #8
 8001096:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 168;
 800109a:	23a8      	movs	r3, #168	; 0xa8
 800109c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010a0:	2302      	movs	r3, #2
 80010a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010a6:	2302      	movs	r3, #2
 80010a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ac:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 fe2b 	bl	8001d0c <HAL_RCC_OscConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80010bc:	f000 f882 	bl	80011c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c0:	230f      	movs	r3, #15
 80010c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c6:	2302      	movs	r3, #2
 80010c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010e2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80010e6:	2105      	movs	r1, #5
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 f8b3 	bl	8002254 <HAL_RCC_ClockConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80010f4:	f000 f866 	bl	80011c4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010f8:	2340      	movs	r3, #64	; 0x40
 80010fa:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010fc:	2300      	movs	r3, #0
 80010fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	4618      	mov	r0, r3
 8001106:	f001 faad 	bl	8002664 <HAL_RCCEx_PeriphCLKConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8001110:	f000 f858 	bl	80011c4 <Error_Handler>
  }
}
 8001114:	bf00      	nop
 8001116:	37d0      	adds	r7, #208	; 0xd0
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40023800 	.word	0x40023800
 8001120:	40007000 	.word	0x40007000

08001124 <task1_handler>:
	printf("Variant: r%lup%lu \n", cpuid_rvalue, cpuid_pvalue);
}


static void task1_handler(void* parameters)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b09c      	sub	sp, #112	; 0x70
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

	char msg[100];
	while(1){
		// printf("%s", (char *)parameters);
		snprintf(msg, 100, (char *)parameters);
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	2164      	movs	r1, #100	; 0x64
 8001134:	4618      	mov	r0, r3
 8001136:	f005 ff49 	bl	8006fcc <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 800113a:	f107 030c 	add.w	r3, r7, #12
 800113e:	4618      	mov	r0, r3
 8001140:	f005 fe5e 	bl	8006e00 <SEGGER_SYSVIEW_PrintfTarget>

		// print_cpuId();
		// print_cpuVariant();

		taskYIELD();
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <task1_handler+0x34>)
 8001146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	f3bf 8f4f 	dsb	sy
 8001150:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, (char *)parameters);
 8001154:	e7ea      	b.n	800112c <task1_handler+0x8>
 8001156:	bf00      	nop
 8001158:	e000ed04 	.word	0xe000ed04

0800115c <task2_handler>:

	return;
}

static void task2_handler(void* parameters)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b09c      	sub	sp, #112	; 0x70
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1){
		// printf("%s", (char *)parameters);
		snprintf(msg, 100, (char *)parameters);
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	2164      	movs	r1, #100	; 0x64
 800116c:	4618      	mov	r0, r3
 800116e:	f005 ff2d 	bl	8006fcc <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	4618      	mov	r0, r3
 8001178:	f005 fe42 	bl	8006e00 <SEGGER_SYSVIEW_PrintfTarget>

		taskYIELD();
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <task2_handler+0x34>)
 800117e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	f3bf 8f4f 	dsb	sy
 8001188:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, (char *)parameters);
 800118c:	e7ea      	b.n	8001164 <task2_handler+0x8>
 800118e:	bf00      	nop
 8001190:	e000ed04 	.word	0xe000ed04

08001194 <vAssertCalled>:

	return;
}

void vAssertCalled(  uint32_t ulLine, const char *pcFile )
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
    /* Called if an assertion passed to configASSERT() fails.  See
    http://www.freertos.org/a00110.html#configASSERT for more information. */
	for(;;);
 800119e:	e7fe      	b.n	800119e <vAssertCalled+0xa>

080011a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d101      	bne.n	80011b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011b2:	f000 fae3 	bl	800177c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40001000 	.word	0x40001000

080011c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c8:	b672      	cpsid	i
}
 80011ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011cc:	e7fe      	b.n	80011cc <Error_Handler+0x8>
	...

080011d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <HAL_MspInit+0x44>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <HAL_MspInit+0x44>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e0:	6413      	str	r3, [r2, #64]	; 0x40
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <HAL_MspInit+0x44>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_MspInit+0x44>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a08      	ldr	r2, [pc, #32]	; (8001214 <HAL_MspInit+0x44>)
 80011f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_MspInit+0x44>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8001206:	f003 fa05 	bl	8004614 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800

08001218 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08c      	sub	sp, #48	; 0x30
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001228:	2200      	movs	r2, #0
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	2036      	movs	r0, #54	; 0x36
 800122e:	f000 fb7d 	bl	800192c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001232:	2036      	movs	r0, #54	; 0x36
 8001234:	f000 fb96 	bl	8001964 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001238:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <HAL_InitTick+0xa0>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	4a1e      	ldr	r2, [pc, #120]	; (80012b8 <HAL_InitTick+0xa0>)
 800123e:	f043 0310 	orr.w	r3, r3, #16
 8001242:	6413      	str	r3, [r2, #64]	; 0x40
 8001244:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <HAL_InitTick+0xa0>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	f003 0310 	and.w	r3, r3, #16
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001250:	f107 0210 	add.w	r2, r7, #16
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4611      	mov	r1, r2
 800125a:	4618      	mov	r0, r3
 800125c:	f001 f9d0 	bl	8002600 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001260:	f001 f9a6 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
 8001264:	4603      	mov	r3, r0
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800126a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800126c:	4a13      	ldr	r2, [pc, #76]	; (80012bc <HAL_InitTick+0xa4>)
 800126e:	fba2 2303 	umull	r2, r3, r2, r3
 8001272:	0c9b      	lsrs	r3, r3, #18
 8001274:	3b01      	subs	r3, #1
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <HAL_InitTick+0xa8>)
 800127a:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <HAL_InitTick+0xac>)
 800127c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <HAL_InitTick+0xa8>)
 8001280:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001284:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001286:	4a0e      	ldr	r2, [pc, #56]	; (80012c0 <HAL_InitTick+0xa8>)
 8001288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800128a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <HAL_InitTick+0xa8>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_InitTick+0xa8>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001298:	4809      	ldr	r0, [pc, #36]	; (80012c0 <HAL_InitTick+0xa8>)
 800129a:	f001 fdd3 	bl	8002e44 <HAL_TIM_Base_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d104      	bne.n	80012ae <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80012a4:	4806      	ldr	r0, [pc, #24]	; (80012c0 <HAL_InitTick+0xa8>)
 80012a6:	f001 fe2f 	bl	8002f08 <HAL_TIM_Base_Start_IT>
 80012aa:	4603      	mov	r3, r0
 80012ac:	e000      	b.n	80012b0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3730      	adds	r7, #48	; 0x30
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40023800 	.word	0x40023800
 80012bc:	431bde83 	.word	0x431bde83
 80012c0:	2000cfb8 	.word	0x2000cfb8
 80012c4:	40001000 	.word	0x40001000

080012c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <NMI_Handler+0x4>

080012ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <HardFault_Handler+0x4>

080012d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <MemManage_Handler+0x4>

080012da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <BusFault_Handler+0x4>

080012e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <UsageFault_Handler+0x4>

080012e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012f8:	4802      	ldr	r0, [pc, #8]	; (8001304 <TIM6_DAC_IRQHandler+0x10>)
 80012fa:	f001 fe7d 	bl	8002ff8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	2000cfb8 	.word	0x2000cfb8

08001308 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <SystemInit+0x20>)
 800130e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001312:	4a05      	ldr	r2, [pc, #20]	; (8001328 <SystemInit+0x20>)
 8001314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	2b00      	cmp	r3, #0
 800133c:	db0b      	blt.n	8001356 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	f003 021f 	and.w	r2, r3, #31
 8001344:	4907      	ldr	r1, [pc, #28]	; (8001364 <__NVIC_EnableIRQ+0x38>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	2001      	movs	r0, #1
 800134e:	fa00 f202 	lsl.w	r2, r0, r2
 8001352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000e100 	.word	0xe000e100

08001368 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db12      	blt.n	80013a0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	f003 021f 	and.w	r2, r3, #31
 8001380:	490a      	ldr	r1, [pc, #40]	; (80013ac <__NVIC_DisableIRQ+0x44>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	095b      	lsrs	r3, r3, #5
 8001388:	2001      	movs	r0, #1
 800138a:	fa00 f202 	lsl.w	r2, r0, r2
 800138e:	3320      	adds	r3, #32
 8001390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001394:	f3bf 8f4f 	dsb	sy
}
 8001398:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800139a:	f3bf 8f6f 	isb	sy
}
 800139e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000e100 	.word	0xe000e100

080013b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	6039      	str	r1, [r7, #0]
 80013ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	db0a      	blt.n	80013da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	490c      	ldr	r1, [pc, #48]	; (80013fc <__NVIC_SetPriority+0x4c>)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	0112      	lsls	r2, r2, #4
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	440b      	add	r3, r1
 80013d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d8:	e00a      	b.n	80013f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4908      	ldr	r1, [pc, #32]	; (8001400 <__NVIC_SetPriority+0x50>)
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	3b04      	subs	r3, #4
 80013e8:	0112      	lsls	r2, r2, #4
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	440b      	add	r3, r1
 80013ee:	761a      	strb	r2, [r3, #24]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000e100 	.word	0xe000e100
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <MX_USART1_UART_Init+0x58>)
 800140a:	4a15      	ldr	r2, [pc, #84]	; (8001460 <MX_USART1_UART_Init+0x5c>)
 800140c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 800140e:	4b13      	ldr	r3, [pc, #76]	; (800145c <MX_USART1_UART_Init+0x58>)
 8001410:	4a14      	ldr	r2, [pc, #80]	; (8001464 <MX_USART1_UART_Init+0x60>)
 8001412:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_USART1_UART_Init+0x58>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <MX_USART1_UART_Init+0x58>)
 800141c:	2200      	movs	r2, #0
 800141e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_USART1_UART_Init+0x58>)
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <MX_USART1_UART_Init+0x58>)
 8001428:	220c      	movs	r2, #12
 800142a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MX_USART1_UART_Init+0x58>)
 800142e:	2200      	movs	r2, #0
 8001430:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <MX_USART1_UART_Init+0x58>)
 8001434:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001438:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <MX_USART1_UART_Init+0x58>)
 800143c:	2200      	movs	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_USART1_UART_Init+0x58>)
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_USART1_UART_Init+0x58>)
 8001448:	f001 ffdc 	bl	8003404 <HAL_UART_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001452:	f7ff feb7 	bl	80011c4 <Error_Handler>
  /* USER CODE BEGIN USART1_Init 2 */


  /* USER CODE END USART1_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2000d004 	.word	0x2000d004
 8001460:	40011000 	.word	0x40011000
 8001464:	0007a120 	.word	0x0007a120

08001468 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a2e      	ldr	r2, [pc, #184]	; (8001540 <HAL_UART_MspInit+0xd8>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d156      	bne.n	8001538 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800148a:	4b2e      	ldr	r3, [pc, #184]	; (8001544 <HAL_UART_MspInit+0xdc>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	4a2d      	ldr	r2, [pc, #180]	; (8001544 <HAL_UART_MspInit+0xdc>)
 8001490:	f043 0310 	orr.w	r3, r3, #16
 8001494:	6453      	str	r3, [r2, #68]	; 0x44
 8001496:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <HAL_UART_MspInit+0xdc>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	f003 0310 	and.w	r3, r3, #16
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	4b28      	ldr	r3, [pc, #160]	; (8001544 <HAL_UART_MspInit+0xdc>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a27      	ldr	r2, [pc, #156]	; (8001544 <HAL_UART_MspInit+0xdc>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b25      	ldr	r3, [pc, #148]	; (8001544 <HAL_UART_MspInit+0xdc>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	4b22      	ldr	r3, [pc, #136]	; (8001544 <HAL_UART_MspInit+0xdc>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a21      	ldr	r2, [pc, #132]	; (8001544 <HAL_UART_MspInit+0xdc>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <HAL_UART_MspInit+0xdc>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014e2:	2307      	movs	r3, #7
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	4816      	ldr	r0, [pc, #88]	; (8001548 <HAL_UART_MspInit+0xe0>)
 80014ee:	f000 fa47 	bl	8001980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80014f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001504:	2307      	movs	r3, #7
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	480f      	ldr	r0, [pc, #60]	; (800154c <HAL_UART_MspInit+0xe4>)
 8001510:	f000 fa36 	bl	8001980 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001514:	2200      	movs	r2, #0
 8001516:	2100      	movs	r1, #0
 8001518:	2025      	movs	r0, #37	; 0x25
 800151a:	f000 fa07 	bl	800192c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800151e:	2025      	movs	r0, #37	; 0x25
 8001520:	f000 fa20 	bl	8001964 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

    NVIC_DisableIRQ(USART1_IRQn);
 8001524:	2025      	movs	r0, #37	; 0x25
 8001526:	f7ff ff1f 	bl	8001368 <__NVIC_DisableIRQ>
    NVIC_SetPriority(USART1_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800152a:	2106      	movs	r1, #6
 800152c:	2025      	movs	r0, #37	; 0x25
 800152e:	f7ff ff3f 	bl	80013b0 <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART1_IRQn);
 8001532:	2025      	movs	r0, #37	; 0x25
 8001534:	f7ff fefa 	bl	800132c <__NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001538:	bf00      	nop
 800153a:	3728      	adds	r7, #40	; 0x28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40011000 	.word	0x40011000
 8001544:	40023800 	.word	0x40023800
 8001548:	40020400 	.word	0x40020400
 800154c:	40020000 	.word	0x40020000

08001550 <_StartSysView>:
/* USER CODE BEGIN 1 */




static void _StartSysView(void) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8001556:	f005 fcc3 	bl	8006ee0 <SEGGER_SYSVIEW_IsStarted>
 800155a:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8001562:	f004 ff4b 	bl	80063fc <SEGGER_SYSVIEW_Start>
  }
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <startSysViewCustom>:

void startSysViewCustom(void) {
 800156e:	b580      	push	{r7, lr}
 8001570:	af00      	add	r7, sp, #0
  _StartSysView();
 8001572:	f7ff ffed 	bl	8001550 <_StartSysView>
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8001586:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <_cbOnUARTRx+0x3c>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b03      	cmp	r3, #3
 800158c:	d806      	bhi.n	800159c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <_cbOnUARTRx+0x3c>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	3301      	adds	r3, #1
 8001594:	b2da      	uxtb	r2, r3
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <_cbOnUARTRx+0x3c>)
 8001598:	701a      	strb	r2, [r3, #0]
    goto Done;
 800159a:	e009      	b.n	80015b0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800159c:	f7ff ffd8 	bl	8001550 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <_cbOnUARTRx+0x3c>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	4618      	mov	r0, r3
 80015a6:	1dfb      	adds	r3, r7, #7
 80015a8:	2201      	movs	r2, #1
 80015aa:	4619      	mov	r1, r3
 80015ac:	f003 ff64 	bl	8005478 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80015b0:	bf00      	nop
}
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000004 	.word	0x20000004

080015bc <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80015c4:	4b14      	ldr	r3, [pc, #80]	; (8001618 <_cbOnUARTTx+0x5c>)
 80015c6:	785b      	ldrb	r3, [r3, #1]
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	d80f      	bhi.n	80015ec <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <_cbOnUARTTx+0x5c>)
 80015ce:	785b      	ldrb	r3, [r3, #1]
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <_cbOnUARTTx+0x60>)
 80015d4:	5c9a      	ldrb	r2, [r3, r2]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <_cbOnUARTTx+0x5c>)
 80015dc:	785b      	ldrb	r3, [r3, #1]
 80015de:	3301      	adds	r3, #1
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <_cbOnUARTTx+0x5c>)
 80015e4:	705a      	strb	r2, [r3, #1]
    r = 1;
 80015e6:	2301      	movs	r3, #1
 80015e8:	60fb      	str	r3, [r7, #12]
    goto Done;
 80015ea:	e00f      	b.n	800160c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80015ec:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <_cbOnUARTTx+0x5c>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2201      	movs	r2, #1
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f003 fde3 	bl	80051c0 <SEGGER_RTT_ReadUpBufferNoLock>
 80015fa:	4603      	mov	r3, r0
 80015fc:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2b00      	cmp	r3, #0
 8001602:	da02      	bge.n	800160a <_cbOnUARTTx+0x4e>
    r = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	e000      	b.n	800160c <_cbOnUARTTx+0x50>
  }
Done:
 800160a:	bf00      	nop
  return r;
 800160c:	68fb      	ldr	r3, [r7, #12]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000004 	.word	0x20000004
 800161c:	08007a6c 	.word	0x08007a6c

08001620 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	// HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
	_cbOnRx = _cbOnUARTRx;
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <SEGGER_UART_init+0x20>)
 800162a:	4a06      	ldr	r2, [pc, #24]	; (8001644 <SEGGER_UART_init+0x24>)
 800162c:	601a      	str	r2, [r3, #0]
	_cbOnTx = _cbOnUARTTx;
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <SEGGER_UART_init+0x28>)
 8001630:	4a06      	ldr	r2, [pc, #24]	; (800164c <SEGGER_UART_init+0x2c>)
 8001632:	601a      	str	r2, [r3, #0]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	2000009c 	.word	0x2000009c
 8001644:	0800157d 	.word	0x0800157d
 8001648:	200000a0 	.word	0x200000a0
 800164c:	080015bd 	.word	0x080015bd

08001650 <USART1_IRQHandler>:
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE) == 0); // Wait until transmit buffer empty (Last byte shift from data to shift register)
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == 0); // Wait until transmission is complete
}

void USART1_IRQHandler(void);
void USART1_IRQHandler(void) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
  uint8_t v;
  int r;

  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE)) {  // Data received?
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <USART1_IRQHandler+0x90>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	f003 0320 	and.w	r3, r3, #32
 8001660:	2b20      	cmp	r3, #32
 8001662:	d114      	bne.n	800168e <USART1_IRQHandler+0x3e>
	  v = (uint8_t)(huart1.Instance->RDR);                                    // Read data
 8001664:	4b1e      	ldr	r3, [pc, #120]	; (80016e0 <USART1_IRQHandler+0x90>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	b2db      	uxtb	r3, r3
 800166c:	70fb      	strb	r3, [r7, #3]
	if ((huart1.Instance->ISR & (USART_ISR_ORE | USART_ISR_FE | USART_ISR_PE)) == 0) { // Only process data if no error occurred
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <USART1_IRQHandler+0x90>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	f003 030b 	and.w	r3, r3, #11
 8001678:	2b00      	cmp	r3, #0
 800167a:	d108      	bne.n	800168e <USART1_IRQHandler+0x3e>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <USART1_IRQHandler+0x94>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d004      	beq.n	800168e <USART1_IRQHandler+0x3e>
        _cbOnRx(v);
 8001684:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <USART1_IRQHandler+0x94>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	78fa      	ldrb	r2, [r7, #3]
 800168a:	4610      	mov	r0, r2
 800168c:	4798      	blx	r3
      }
    }
  }

  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE)) { // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800168e:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <USART1_IRQHandler+0x90>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	69db      	ldr	r3, [r3, #28]
 8001694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001698:	2b80      	cmp	r3, #128	; 0x80
 800169a:	d11e      	bne.n	80016da <USART1_IRQHandler+0x8a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <USART1_IRQHandler+0x98>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d019      	beq.n	80016d8 <USART1_IRQHandler+0x88>
      return;
    }
    r = _cbOnTx(&v);
 80016a4:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <USART1_IRQHandler+0x98>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	1cfa      	adds	r2, r7, #3
 80016aa:	4610      	mov	r0, r2
 80016ac:	4798      	blx	r3
 80016ae:	6078      	str	r0, [r7, #4]
    if (r == 0) {                          // No more characters to send ?
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d108      	bne.n	80016c8 <USART1_IRQHandler+0x78>
    	__HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE); // Disable further tx interrupts
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <USART1_IRQHandler+0x90>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <USART1_IRQHandler+0x90>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	e008      	b.n	80016da <USART1_IRQHandler+0x8a>
    } else {
      huart1.Instance->ISR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <USART1_IRQHandler+0x90>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	69db      	ldr	r3, [r3, #28]
      huart1.Instance->TDR = v; // Start transmission by writing to data register
 80016ce:	78fa      	ldrb	r2, [r7, #3]
 80016d0:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <USART1_IRQHandler+0x90>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	629a      	str	r2, [r3, #40]	; 0x28
 80016d6:	e000      	b.n	80016da <USART1_IRQHandler+0x8a>
      return;
 80016d8:	bf00      	nop
    }
  }
}
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	2000d004 	.word	0x2000d004
 80016e4:	2000009c 	.word	0x2000009c
 80016e8:	200000a0 	.word	0x200000a0

080016ec <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_TXE); // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <HIF_UART_EnableTXEInterrupt+0x20>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4b05      	ldr	r3, [pc, #20]	; (800170c <HIF_UART_EnableTXEInterrupt+0x20>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016fe:	601a      	str	r2, [r3, #0]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	2000d004 	.word	0x2000d004

08001710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001748 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001714:	480d      	ldr	r0, [pc, #52]	; (800174c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001716:	490e      	ldr	r1, [pc, #56]	; (8001750 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001718:	4a0e      	ldr	r2, [pc, #56]	; (8001754 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800171c:	e002      	b.n	8001724 <LoopCopyDataInit>

0800171e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001722:	3304      	adds	r3, #4

08001724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001728:	d3f9      	bcc.n	800171e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800172c:	4c0b      	ldr	r4, [pc, #44]	; (800175c <LoopFillZerobss+0x26>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001730:	e001      	b.n	8001736 <LoopFillZerobss>

08001732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001734:	3204      	adds	r2, #4

08001736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001738:	d3fb      	bcc.n	8001732 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800173a:	f7ff fde5 	bl	8001308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800173e:	f005 fbfd 	bl	8006f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001742:	f7ff fbf9 	bl	8000f38 <main>
  bx  lr    
 8001746:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001748:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800174c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001750:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001754:	08007b38 	.word	0x08007b38
  ldr r2, =_sbss
 8001758:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800175c:	2000d144 	.word	0x2000d144

08001760 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001760:	e7fe      	b.n	8001760 <ADC_IRQHandler>

08001762 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001766:	2003      	movs	r0, #3
 8001768:	f000 f8d5 	bl	8001916 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800176c:	2000      	movs	r0, #0
 800176e:	f7ff fd53 	bl	8001218 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001772:	f7ff fd2d 	bl	80011d0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_IncTick+0x20>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_IncTick+0x24>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4413      	add	r3, r2
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <HAL_IncTick+0x24>)
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	20000010 	.word	0x20000010
 80017a0:	2000d088 	.word	0x2000d088

080017a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return uwTick;
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <HAL_GetTick+0x14>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	2000d088 	.word	0x2000d088

080017bc <__NVIC_SetPriorityGrouping>:
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <__NVIC_SetPriorityGrouping+0x40>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d8:	4013      	ands	r3, r2
 80017da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ea:	4a04      	ldr	r2, [pc, #16]	; (80017fc <__NVIC_SetPriorityGrouping+0x40>)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	60d3      	str	r3, [r2, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00
 8001800:	05fa0000 	.word	0x05fa0000

08001804 <__NVIC_GetPriorityGrouping>:
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <__NVIC_GetPriorityGrouping+0x18>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	f003 0307 	and.w	r3, r3, #7
}
 8001812:	4618      	mov	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <__NVIC_EnableIRQ>:
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	2b00      	cmp	r3, #0
 8001830:	db0b      	blt.n	800184a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	f003 021f 	and.w	r2, r3, #31
 8001838:	4907      	ldr	r1, [pc, #28]	; (8001858 <__NVIC_EnableIRQ+0x38>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	095b      	lsrs	r3, r3, #5
 8001840:	2001      	movs	r0, #1
 8001842:	fa00 f202 	lsl.w	r2, r0, r2
 8001846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000e100 	.word	0xe000e100

0800185c <__NVIC_SetPriority>:
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	6039      	str	r1, [r7, #0]
 8001866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	2b00      	cmp	r3, #0
 800186e:	db0a      	blt.n	8001886 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	b2da      	uxtb	r2, r3
 8001874:	490c      	ldr	r1, [pc, #48]	; (80018a8 <__NVIC_SetPriority+0x4c>)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	0112      	lsls	r2, r2, #4
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	440b      	add	r3, r1
 8001880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001884:	e00a      	b.n	800189c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4908      	ldr	r1, [pc, #32]	; (80018ac <__NVIC_SetPriority+0x50>)
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	3b04      	subs	r3, #4
 8001894:	0112      	lsls	r2, r2, #4
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	440b      	add	r3, r1
 800189a:	761a      	strb	r2, [r3, #24]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000e100 	.word	0xe000e100
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f1c3 0307 	rsb	r3, r3, #7
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	bf28      	it	cs
 80018ce:	2304      	movcs	r3, #4
 80018d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3304      	adds	r3, #4
 80018d6:	2b06      	cmp	r3, #6
 80018d8:	d902      	bls.n	80018e0 <NVIC_EncodePriority+0x30>
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3b03      	subs	r3, #3
 80018de:	e000      	b.n	80018e2 <NVIC_EncodePriority+0x32>
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43da      	mvns	r2, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	401a      	ands	r2, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001902:	43d9      	mvns	r1, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001908:	4313      	orrs	r3, r2
         );
}
 800190a:	4618      	mov	r0, r3
 800190c:	3724      	adds	r7, #36	; 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ff4c 	bl	80017bc <__NVIC_SetPriorityGrouping>
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
 8001938:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800193e:	f7ff ff61 	bl	8001804 <__NVIC_GetPriorityGrouping>
 8001942:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	68b9      	ldr	r1, [r7, #8]
 8001948:	6978      	ldr	r0, [r7, #20]
 800194a:	f7ff ffb1 	bl	80018b0 <NVIC_EncodePriority>
 800194e:	4602      	mov	r2, r0
 8001950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001954:	4611      	mov	r1, r2
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff80 	bl	800185c <__NVIC_SetPriority>
}
 800195c:	bf00      	nop
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff ff54 	bl	8001820 <__NVIC_EnableIRQ>
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001980:	b480      	push	{r7}
 8001982:	b089      	sub	sp, #36	; 0x24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
 800199e:	e175      	b.n	8001c8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80019a0:	2201      	movs	r2, #1
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	f040 8164 	bne.w	8001c86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d00b      	beq.n	80019de <HAL_GPIO_Init+0x5e>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d007      	beq.n	80019de <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019d2:	2b11      	cmp	r3, #17
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b12      	cmp	r3, #18
 80019dc:	d130      	bne.n	8001a40 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	2203      	movs	r2, #3
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4013      	ands	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	68da      	ldr	r2, [r3, #12]
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a14:	2201      	movs	r2, #1
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	091b      	lsrs	r3, r3, #4
 8001a2a:	f003 0201 	and.w	r2, r3, #1
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0x100>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b12      	cmp	r3, #18
 8001a7e:	d123      	bne.n	8001ac8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	08da      	lsrs	r2, r3, #3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3208      	adds	r2, #8
 8001a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	220f      	movs	r2, #15
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	691a      	ldr	r2, [r3, #16]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	08da      	lsrs	r2, r3, #3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3208      	adds	r2, #8
 8001ac2:	69b9      	ldr	r1, [r7, #24]
 8001ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0203 	and.w	r2, r3, #3
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 80be 	beq.w	8001c86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0a:	4b66      	ldr	r3, [pc, #408]	; (8001ca4 <HAL_GPIO_Init+0x324>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	4a65      	ldr	r2, [pc, #404]	; (8001ca4 <HAL_GPIO_Init+0x324>)
 8001b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b14:	6453      	str	r3, [r2, #68]	; 0x44
 8001b16:	4b63      	ldr	r3, [pc, #396]	; (8001ca4 <HAL_GPIO_Init+0x324>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b22:	4a61      	ldr	r2, [pc, #388]	; (8001ca8 <HAL_GPIO_Init+0x328>)
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	089b      	lsrs	r3, r3, #2
 8001b28:	3302      	adds	r3, #2
 8001b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	220f      	movs	r2, #15
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a58      	ldr	r2, [pc, #352]	; (8001cac <HAL_GPIO_Init+0x32c>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d037      	beq.n	8001bbe <HAL_GPIO_Init+0x23e>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a57      	ldr	r2, [pc, #348]	; (8001cb0 <HAL_GPIO_Init+0x330>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d031      	beq.n	8001bba <HAL_GPIO_Init+0x23a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a56      	ldr	r2, [pc, #344]	; (8001cb4 <HAL_GPIO_Init+0x334>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d02b      	beq.n	8001bb6 <HAL_GPIO_Init+0x236>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a55      	ldr	r2, [pc, #340]	; (8001cb8 <HAL_GPIO_Init+0x338>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d025      	beq.n	8001bb2 <HAL_GPIO_Init+0x232>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a54      	ldr	r2, [pc, #336]	; (8001cbc <HAL_GPIO_Init+0x33c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d01f      	beq.n	8001bae <HAL_GPIO_Init+0x22e>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a53      	ldr	r2, [pc, #332]	; (8001cc0 <HAL_GPIO_Init+0x340>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d019      	beq.n	8001baa <HAL_GPIO_Init+0x22a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a52      	ldr	r2, [pc, #328]	; (8001cc4 <HAL_GPIO_Init+0x344>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d013      	beq.n	8001ba6 <HAL_GPIO_Init+0x226>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a51      	ldr	r2, [pc, #324]	; (8001cc8 <HAL_GPIO_Init+0x348>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d00d      	beq.n	8001ba2 <HAL_GPIO_Init+0x222>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a50      	ldr	r2, [pc, #320]	; (8001ccc <HAL_GPIO_Init+0x34c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d007      	beq.n	8001b9e <HAL_GPIO_Init+0x21e>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a4f      	ldr	r2, [pc, #316]	; (8001cd0 <HAL_GPIO_Init+0x350>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d101      	bne.n	8001b9a <HAL_GPIO_Init+0x21a>
 8001b96:	2309      	movs	r3, #9
 8001b98:	e012      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001b9a:	230a      	movs	r3, #10
 8001b9c:	e010      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001b9e:	2308      	movs	r3, #8
 8001ba0:	e00e      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001ba2:	2307      	movs	r3, #7
 8001ba4:	e00c      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001ba6:	2306      	movs	r3, #6
 8001ba8:	e00a      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001baa:	2305      	movs	r3, #5
 8001bac:	e008      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001bae:	2304      	movs	r3, #4
 8001bb0:	e006      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e004      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e002      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	69fa      	ldr	r2, [r7, #28]
 8001bc2:	f002 0203 	and.w	r2, r2, #3
 8001bc6:	0092      	lsls	r2, r2, #2
 8001bc8:	4093      	lsls	r3, r2
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bd0:	4935      	ldr	r1, [pc, #212]	; (8001ca8 <HAL_GPIO_Init+0x328>)
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	089b      	lsrs	r3, r3, #2
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bde:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <HAL_GPIO_Init+0x354>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c02:	4a34      	ldr	r2, [pc, #208]	; (8001cd4 <HAL_GPIO_Init+0x354>)
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c08:	4b32      	ldr	r3, [pc, #200]	; (8001cd4 <HAL_GPIO_Init+0x354>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c2c:	4a29      	ldr	r2, [pc, #164]	; (8001cd4 <HAL_GPIO_Init+0x354>)
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c32:	4b28      	ldr	r3, [pc, #160]	; (8001cd4 <HAL_GPIO_Init+0x354>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c56:	4a1f      	ldr	r2, [pc, #124]	; (8001cd4 <HAL_GPIO_Init+0x354>)
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c5c:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <HAL_GPIO_Init+0x354>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c80:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <HAL_GPIO_Init+0x354>)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	61fb      	str	r3, [r7, #28]
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	2b0f      	cmp	r3, #15
 8001c90:	f67f ae86 	bls.w	80019a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	3724      	adds	r7, #36	; 0x24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40013800 	.word	0x40013800
 8001cac:	40020000 	.word	0x40020000
 8001cb0:	40020400 	.word	0x40020400
 8001cb4:	40020800 	.word	0x40020800
 8001cb8:	40020c00 	.word	0x40020c00
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40021400 	.word	0x40021400
 8001cc4:	40021800 	.word	0x40021800
 8001cc8:	40021c00 	.word	0x40021c00
 8001ccc:	40022000 	.word	0x40022000
 8001cd0:	40022400 	.word	0x40022400
 8001cd4:	40013c00 	.word	0x40013c00

08001cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	807b      	strh	r3, [r7, #2]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ce8:	787b      	ldrb	r3, [r7, #1]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cee:	887a      	ldrh	r2, [r7, #2]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001cf4:	e003      	b.n	8001cfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001cf6:	887b      	ldrh	r3, [r7, #2]
 8001cf8:	041a      	lsls	r2, r3, #16
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	619a      	str	r2, [r3, #24]
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001d14:	2300      	movs	r3, #0
 8001d16:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e291      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 8087 	beq.w	8001e3e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d30:	4b96      	ldr	r3, [pc, #600]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 030c 	and.w	r3, r3, #12
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d00c      	beq.n	8001d56 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d3c:	4b93      	ldr	r3, [pc, #588]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 030c 	and.w	r3, r3, #12
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d112      	bne.n	8001d6e <HAL_RCC_OscConfig+0x62>
 8001d48:	4b90      	ldr	r3, [pc, #576]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d54:	d10b      	bne.n	8001d6e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d56:	4b8d      	ldr	r3, [pc, #564]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d06c      	beq.n	8001e3c <HAL_RCC_OscConfig+0x130>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d168      	bne.n	8001e3c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e26b      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d76:	d106      	bne.n	8001d86 <HAL_RCC_OscConfig+0x7a>
 8001d78:	4b84      	ldr	r3, [pc, #528]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a83      	ldr	r2, [pc, #524]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	e02e      	b.n	8001de4 <HAL_RCC_OscConfig+0xd8>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x9c>
 8001d8e:	4b7f      	ldr	r3, [pc, #508]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a7e      	ldr	r2, [pc, #504]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	4b7c      	ldr	r3, [pc, #496]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a7b      	ldr	r2, [pc, #492]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001da0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	e01d      	b.n	8001de4 <HAL_RCC_OscConfig+0xd8>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0xc0>
 8001db2:	4b76      	ldr	r3, [pc, #472]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a75      	ldr	r2, [pc, #468]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	4b73      	ldr	r3, [pc, #460]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a72      	ldr	r2, [pc, #456]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	e00b      	b.n	8001de4 <HAL_RCC_OscConfig+0xd8>
 8001dcc:	4b6f      	ldr	r3, [pc, #444]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a6e      	ldr	r2, [pc, #440]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	4b6c      	ldr	r3, [pc, #432]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a6b      	ldr	r2, [pc, #428]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d013      	beq.n	8001e14 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dec:	f7ff fcda 	bl	80017a4 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df4:	f7ff fcd6 	bl	80017a4 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b64      	cmp	r3, #100	; 0x64
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e21f      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e06:	4b61      	ldr	r3, [pc, #388]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0xe8>
 8001e12:	e014      	b.n	8001e3e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7ff fcc6 	bl	80017a4 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e1c:	f7ff fcc2 	bl	80017a4 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b64      	cmp	r3, #100	; 0x64
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e20b      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e2e:	4b57      	ldr	r3, [pc, #348]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x110>
 8001e3a:	e000      	b.n	8001e3e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d069      	beq.n	8001f1e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e4a:	4b50      	ldr	r3, [pc, #320]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00b      	beq.n	8001e6e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e56:	4b4d      	ldr	r3, [pc, #308]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d11c      	bne.n	8001e9c <HAL_RCC_OscConfig+0x190>
 8001e62:	4b4a      	ldr	r3, [pc, #296]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d116      	bne.n	8001e9c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6e:	4b47      	ldr	r3, [pc, #284]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d005      	beq.n	8001e86 <HAL_RCC_OscConfig+0x17a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d001      	beq.n	8001e86 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e1df      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e86:	4b41      	ldr	r3, [pc, #260]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	493d      	ldr	r1, [pc, #244]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9a:	e040      	b.n	8001f1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d023      	beq.n	8001eec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea4:	4b39      	ldr	r3, [pc, #228]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a38      	ldr	r2, [pc, #224]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7ff fc78 	bl	80017a4 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb8:	f7ff fc74 	bl	80017a4 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e1bd      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eca:	4b30      	ldr	r3, [pc, #192]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed6:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4929      	ldr	r1, [pc, #164]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	600b      	str	r3, [r1, #0]
 8001eea:	e018      	b.n	8001f1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eec:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a26      	ldr	r2, [pc, #152]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001ef2:	f023 0301 	bic.w	r3, r3, #1
 8001ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7ff fc54 	bl	80017a4 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f00:	f7ff fc50 	bl	80017a4 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e199      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f12:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d038      	beq.n	8001f9c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d019      	beq.n	8001f66 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f32:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f36:	4a15      	ldr	r2, [pc, #84]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3e:	f7ff fc31 	bl	80017a4 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f46:	f7ff fc2d 	bl	80017a4 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e176      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x23a>
 8001f64:	e01a      	b.n	8001f9c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f66:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f6a:	4a08      	ldr	r2, [pc, #32]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001f6c:	f023 0301 	bic.w	r3, r3, #1
 8001f70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f72:	f7ff fc17 	bl	80017a4 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f78:	e00a      	b.n	8001f90 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f7a:	f7ff fc13 	bl	80017a4 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d903      	bls.n	8001f90 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e15c      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
 8001f8c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f90:	4b91      	ldr	r3, [pc, #580]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8001f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1ee      	bne.n	8001f7a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 80a4 	beq.w	80020f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001faa:	4b8b      	ldr	r3, [pc, #556]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10d      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb6:	4b88      	ldr	r3, [pc, #544]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	4a87      	ldr	r2, [pc, #540]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8001fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc2:	4b85      	ldr	r3, [pc, #532]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fd2:	4b82      	ldr	r3, [pc, #520]	; (80021dc <HAL_RCC_OscConfig+0x4d0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d118      	bne.n	8002010 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001fde:	4b7f      	ldr	r3, [pc, #508]	; (80021dc <HAL_RCC_OscConfig+0x4d0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a7e      	ldr	r2, [pc, #504]	; (80021dc <HAL_RCC_OscConfig+0x4d0>)
 8001fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fea:	f7ff fbdb 	bl	80017a4 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff2:	f7ff fbd7 	bl	80017a4 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b64      	cmp	r3, #100	; 0x64
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e120      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002004:	4b75      	ldr	r3, [pc, #468]	; (80021dc <HAL_RCC_OscConfig+0x4d0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f0      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d106      	bne.n	8002026 <HAL_RCC_OscConfig+0x31a>
 8002018:	4b6f      	ldr	r3, [pc, #444]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 800201a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201c:	4a6e      	ldr	r2, [pc, #440]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	6713      	str	r3, [r2, #112]	; 0x70
 8002024:	e02d      	b.n	8002082 <HAL_RCC_OscConfig+0x376>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10c      	bne.n	8002048 <HAL_RCC_OscConfig+0x33c>
 800202e:	4b6a      	ldr	r3, [pc, #424]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002032:	4a69      	ldr	r2, [pc, #420]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002034:	f023 0301 	bic.w	r3, r3, #1
 8002038:	6713      	str	r3, [r2, #112]	; 0x70
 800203a:	4b67      	ldr	r3, [pc, #412]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 800203c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203e:	4a66      	ldr	r2, [pc, #408]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002040:	f023 0304 	bic.w	r3, r3, #4
 8002044:	6713      	str	r3, [r2, #112]	; 0x70
 8002046:	e01c      	b.n	8002082 <HAL_RCC_OscConfig+0x376>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b05      	cmp	r3, #5
 800204e:	d10c      	bne.n	800206a <HAL_RCC_OscConfig+0x35e>
 8002050:	4b61      	ldr	r3, [pc, #388]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002054:	4a60      	ldr	r2, [pc, #384]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002056:	f043 0304 	orr.w	r3, r3, #4
 800205a:	6713      	str	r3, [r2, #112]	; 0x70
 800205c:	4b5e      	ldr	r3, [pc, #376]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 800205e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002060:	4a5d      	ldr	r2, [pc, #372]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	6713      	str	r3, [r2, #112]	; 0x70
 8002068:	e00b      	b.n	8002082 <HAL_RCC_OscConfig+0x376>
 800206a:	4b5b      	ldr	r3, [pc, #364]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 800206c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206e:	4a5a      	ldr	r2, [pc, #360]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002070:	f023 0301 	bic.w	r3, r3, #1
 8002074:	6713      	str	r3, [r2, #112]	; 0x70
 8002076:	4b58      	ldr	r3, [pc, #352]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207a:	4a57      	ldr	r2, [pc, #348]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 800207c:	f023 0304 	bic.w	r3, r3, #4
 8002080:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d015      	beq.n	80020b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208a:	f7ff fb8b 	bl	80017a4 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002090:	e00a      	b.n	80020a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002092:	f7ff fb87 	bl	80017a4 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e0ce      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a8:	4b4b      	ldr	r3, [pc, #300]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 80020aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0ee      	beq.n	8002092 <HAL_RCC_OscConfig+0x386>
 80020b4:	e014      	b.n	80020e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b6:	f7ff fb75 	bl	80017a4 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020bc:	e00a      	b.n	80020d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020be:	f7ff fb71 	bl	80017a4 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e0b8      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d4:	4b40      	ldr	r3, [pc, #256]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 80020d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1ee      	bne.n	80020be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020e0:	7dfb      	ldrb	r3, [r7, #23]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d105      	bne.n	80020f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e6:	4b3c      	ldr	r3, [pc, #240]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	4a3b      	ldr	r2, [pc, #236]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 80020ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 80a4 	beq.w	8002244 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020fc:	4b36      	ldr	r3, [pc, #216]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 030c 	and.w	r3, r3, #12
 8002104:	2b08      	cmp	r3, #8
 8002106:	d06b      	beq.n	80021e0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d149      	bne.n	80021a4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002110:	4b31      	ldr	r3, [pc, #196]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a30      	ldr	r2, [pc, #192]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800211a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7ff fb42 	bl	80017a4 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002124:	f7ff fb3e 	bl	80017a4 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e087      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002136:	4b28      	ldr	r3, [pc, #160]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69da      	ldr	r2, [r3, #28]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	019b      	lsls	r3, r3, #6
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	085b      	lsrs	r3, r3, #1
 800215a:	3b01      	subs	r3, #1
 800215c:	041b      	lsls	r3, r3, #16
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	061b      	lsls	r3, r3, #24
 8002166:	4313      	orrs	r3, r2
 8002168:	4a1b      	ldr	r2, [pc, #108]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 800216a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800216e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002170:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a18      	ldr	r2, [pc, #96]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002176:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800217a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217c:	f7ff fb12 	bl	80017a4 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002184:	f7ff fb0e 	bl	80017a4 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e057      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0x478>
 80021a2:	e04f      	b.n	8002244 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0b      	ldr	r2, [pc, #44]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 80021aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b0:	f7ff faf8 	bl	80017a4 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b8:	f7ff faf4 	bl	80017a4 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e03d      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ca:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x4ac>
 80021d6:	e035      	b.n	8002244 <HAL_RCC_OscConfig+0x538>
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80021e0:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_RCC_OscConfig+0x544>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d028      	beq.n	8002240 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d121      	bne.n	8002240 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002206:	429a      	cmp	r2, r3
 8002208:	d11a      	bne.n	8002240 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002210:	4013      	ands	r3, r2
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002216:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002218:	4293      	cmp	r3, r2
 800221a:	d111      	bne.n	8002240 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002226:	085b      	lsrs	r3, r3, #1
 8002228:	3b01      	subs	r3, #1
 800222a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800222c:	429a      	cmp	r2, r3
 800222e:	d107      	bne.n	8002240 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800223c:	429a      	cmp	r2, r3
 800223e:	d001      	beq.n	8002244 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800

08002254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0d0      	b.n	800240e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800226c:	4b6a      	ldr	r3, [pc, #424]	; (8002418 <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 030f 	and.w	r3, r3, #15
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d910      	bls.n	800229c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227a:	4b67      	ldr	r3, [pc, #412]	; (8002418 <HAL_RCC_ClockConfig+0x1c4>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 020f 	bic.w	r2, r3, #15
 8002282:	4965      	ldr	r1, [pc, #404]	; (8002418 <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800228a:	4b63      	ldr	r3, [pc, #396]	; (8002418 <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d001      	beq.n	800229c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0b8      	b.n	800240e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d020      	beq.n	80022ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4a58      	ldr	r2, [pc, #352]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 80022ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022cc:	4b53      	ldr	r3, [pc, #332]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	4a52      	ldr	r2, [pc, #328]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 80022d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d8:	4b50      	ldr	r3, [pc, #320]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	494d      	ldr	r1, [pc, #308]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d040      	beq.n	8002378 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d107      	bne.n	800230e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fe:	4b47      	ldr	r3, [pc, #284]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d115      	bne.n	8002336 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e07f      	b.n	800240e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d107      	bne.n	8002326 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002316:	4b41      	ldr	r3, [pc, #260]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e073      	b.n	800240e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002326:	4b3d      	ldr	r3, [pc, #244]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e06b      	b.n	800240e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002336:	4b39      	ldr	r3, [pc, #228]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f023 0203 	bic.w	r2, r3, #3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	4936      	ldr	r1, [pc, #216]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 8002344:	4313      	orrs	r3, r2
 8002346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002348:	f7ff fa2c 	bl	80017a4 <HAL_GetTick>
 800234c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234e:	e00a      	b.n	8002366 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002350:	f7ff fa28 	bl	80017a4 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f241 3288 	movw	r2, #5000	; 0x1388
 800235e:	4293      	cmp	r3, r2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e053      	b.n	800240e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002366:	4b2d      	ldr	r3, [pc, #180]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 020c 	and.w	r2, r3, #12
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	429a      	cmp	r2, r3
 8002376:	d1eb      	bne.n	8002350 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002378:	4b27      	ldr	r3, [pc, #156]	; (8002418 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d210      	bcs.n	80023a8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b24      	ldr	r3, [pc, #144]	; (8002418 <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 020f 	bic.w	r2, r3, #15
 800238e:	4922      	ldr	r1, [pc, #136]	; (8002418 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002396:	4b20      	ldr	r3, [pc, #128]	; (8002418 <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e032      	b.n	800240e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4916      	ldr	r1, [pc, #88]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d009      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023d2:	4b12      	ldr	r3, [pc, #72]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	490e      	ldr	r1, [pc, #56]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023e6:	f000 f821 	bl	800242c <HAL_RCC_GetSysClockFreq>
 80023ea:	4602      	mov	r2, r0
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	490a      	ldr	r1, [pc, #40]	; (8002420 <HAL_RCC_ClockConfig+0x1cc>)
 80023f8:	5ccb      	ldrb	r3, [r1, r3]
 80023fa:	fa22 f303 	lsr.w	r3, r2, r3
 80023fe:	4a09      	ldr	r2, [pc, #36]	; (8002424 <HAL_RCC_ClockConfig+0x1d0>)
 8002400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <HAL_RCC_ClockConfig+0x1d4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe ff06 	bl	8001218 <HAL_InitTick>

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40023c00 	.word	0x40023c00
 800241c:	40023800 	.word	0x40023800
 8002420:	08007a54 	.word	0x08007a54
 8002424:	20000000 	.word	0x20000000
 8002428:	2000000c 	.word	0x2000000c

0800242c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800242c:	b5b0      	push	{r4, r5, r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002432:	2100      	movs	r1, #0
 8002434:	6079      	str	r1, [r7, #4]
 8002436:	2100      	movs	r1, #0
 8002438:	60f9      	str	r1, [r7, #12]
 800243a:	2100      	movs	r1, #0
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800243e:	2100      	movs	r1, #0
 8002440:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002442:	4952      	ldr	r1, [pc, #328]	; (800258c <HAL_RCC_GetSysClockFreq+0x160>)
 8002444:	6889      	ldr	r1, [r1, #8]
 8002446:	f001 010c 	and.w	r1, r1, #12
 800244a:	2908      	cmp	r1, #8
 800244c:	d00d      	beq.n	800246a <HAL_RCC_GetSysClockFreq+0x3e>
 800244e:	2908      	cmp	r1, #8
 8002450:	f200 8094 	bhi.w	800257c <HAL_RCC_GetSysClockFreq+0x150>
 8002454:	2900      	cmp	r1, #0
 8002456:	d002      	beq.n	800245e <HAL_RCC_GetSysClockFreq+0x32>
 8002458:	2904      	cmp	r1, #4
 800245a:	d003      	beq.n	8002464 <HAL_RCC_GetSysClockFreq+0x38>
 800245c:	e08e      	b.n	800257c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800245e:	4b4c      	ldr	r3, [pc, #304]	; (8002590 <HAL_RCC_GetSysClockFreq+0x164>)
 8002460:	60bb      	str	r3, [r7, #8]
      break;
 8002462:	e08e      	b.n	8002582 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002464:	4b4b      	ldr	r3, [pc, #300]	; (8002594 <HAL_RCC_GetSysClockFreq+0x168>)
 8002466:	60bb      	str	r3, [r7, #8]
      break;
 8002468:	e08b      	b.n	8002582 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800246a:	4948      	ldr	r1, [pc, #288]	; (800258c <HAL_RCC_GetSysClockFreq+0x160>)
 800246c:	6849      	ldr	r1, [r1, #4]
 800246e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002472:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002474:	4945      	ldr	r1, [pc, #276]	; (800258c <HAL_RCC_GetSysClockFreq+0x160>)
 8002476:	6849      	ldr	r1, [r1, #4]
 8002478:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800247c:	2900      	cmp	r1, #0
 800247e:	d024      	beq.n	80024ca <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002480:	4942      	ldr	r1, [pc, #264]	; (800258c <HAL_RCC_GetSysClockFreq+0x160>)
 8002482:	6849      	ldr	r1, [r1, #4]
 8002484:	0989      	lsrs	r1, r1, #6
 8002486:	4608      	mov	r0, r1
 8002488:	f04f 0100 	mov.w	r1, #0
 800248c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002490:	f04f 0500 	mov.w	r5, #0
 8002494:	ea00 0204 	and.w	r2, r0, r4
 8002498:	ea01 0305 	and.w	r3, r1, r5
 800249c:	493d      	ldr	r1, [pc, #244]	; (8002594 <HAL_RCC_GetSysClockFreq+0x168>)
 800249e:	fb01 f003 	mul.w	r0, r1, r3
 80024a2:	2100      	movs	r1, #0
 80024a4:	fb01 f102 	mul.w	r1, r1, r2
 80024a8:	1844      	adds	r4, r0, r1
 80024aa:	493a      	ldr	r1, [pc, #232]	; (8002594 <HAL_RCC_GetSysClockFreq+0x168>)
 80024ac:	fba2 0101 	umull	r0, r1, r2, r1
 80024b0:	1863      	adds	r3, r4, r1
 80024b2:	4619      	mov	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	461a      	mov	r2, r3
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	f7fd ff48 	bl	8000350 <__aeabi_uldivmod>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	4613      	mov	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	e04a      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ca:	4b30      	ldr	r3, [pc, #192]	; (800258c <HAL_RCC_GetSysClockFreq+0x160>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	099b      	lsrs	r3, r3, #6
 80024d0:	461a      	mov	r2, r3
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80024da:	f04f 0100 	mov.w	r1, #0
 80024de:	ea02 0400 	and.w	r4, r2, r0
 80024e2:	ea03 0501 	and.w	r5, r3, r1
 80024e6:	4620      	mov	r0, r4
 80024e8:	4629      	mov	r1, r5
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	014b      	lsls	r3, r1, #5
 80024f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024f8:	0142      	lsls	r2, r0, #5
 80024fa:	4610      	mov	r0, r2
 80024fc:	4619      	mov	r1, r3
 80024fe:	1b00      	subs	r0, r0, r4
 8002500:	eb61 0105 	sbc.w	r1, r1, r5
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	f04f 0300 	mov.w	r3, #0
 800250c:	018b      	lsls	r3, r1, #6
 800250e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002512:	0182      	lsls	r2, r0, #6
 8002514:	1a12      	subs	r2, r2, r0
 8002516:	eb63 0301 	sbc.w	r3, r3, r1
 800251a:	f04f 0000 	mov.w	r0, #0
 800251e:	f04f 0100 	mov.w	r1, #0
 8002522:	00d9      	lsls	r1, r3, #3
 8002524:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002528:	00d0      	lsls	r0, r2, #3
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	1912      	adds	r2, r2, r4
 8002530:	eb45 0303 	adc.w	r3, r5, r3
 8002534:	f04f 0000 	mov.w	r0, #0
 8002538:	f04f 0100 	mov.w	r1, #0
 800253c:	0299      	lsls	r1, r3, #10
 800253e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002542:	0290      	lsls	r0, r2, #10
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	461a      	mov	r2, r3
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	f7fd fefc 	bl	8000350 <__aeabi_uldivmod>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4613      	mov	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002560:	4b0a      	ldr	r3, [pc, #40]	; (800258c <HAL_RCC_GetSysClockFreq+0x160>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	0c1b      	lsrs	r3, r3, #16
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	3301      	adds	r3, #1
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	fbb2 f3f3 	udiv	r3, r2, r3
 8002578:	60bb      	str	r3, [r7, #8]
      break;
 800257a:	e002      	b.n	8002582 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800257c:	4b04      	ldr	r3, [pc, #16]	; (8002590 <HAL_RCC_GetSysClockFreq+0x164>)
 800257e:	60bb      	str	r3, [r7, #8]
      break;
 8002580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002582:	68bb      	ldr	r3, [r7, #8]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bdb0      	pop	{r4, r5, r7, pc}
 800258c:	40023800 	.word	0x40023800
 8002590:	00f42400 	.word	0x00f42400
 8002594:	017d7840 	.word	0x017d7840

08002598 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800259c:	4b03      	ldr	r3, [pc, #12]	; (80025ac <HAL_RCC_GetHCLKFreq+0x14>)
 800259e:	681b      	ldr	r3, [r3, #0]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	20000000 	.word	0x20000000

080025b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025b4:	f7ff fff0 	bl	8002598 <HAL_RCC_GetHCLKFreq>
 80025b8:	4602      	mov	r2, r0
 80025ba:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	0a9b      	lsrs	r3, r3, #10
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	4903      	ldr	r1, [pc, #12]	; (80025d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025c6:	5ccb      	ldrb	r3, [r1, r3]
 80025c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40023800 	.word	0x40023800
 80025d4:	08007a64 	.word	0x08007a64

080025d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025dc:	f7ff ffdc 	bl	8002598 <HAL_RCC_GetHCLKFreq>
 80025e0:	4602      	mov	r2, r0
 80025e2:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	0b5b      	lsrs	r3, r3, #13
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	4903      	ldr	r1, [pc, #12]	; (80025fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ee:	5ccb      	ldrb	r3, [r1, r3]
 80025f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40023800 	.word	0x40023800
 80025fc:	08007a64 	.word	0x08007a64

08002600 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	220f      	movs	r2, #15
 800260e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002610:	4b12      	ldr	r3, [pc, #72]	; (800265c <HAL_RCC_GetClockConfig+0x5c>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 0203 	and.w	r2, r3, #3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800261c:	4b0f      	ldr	r3, [pc, #60]	; (800265c <HAL_RCC_GetClockConfig+0x5c>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <HAL_RCC_GetClockConfig+0x5c>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002634:	4b09      	ldr	r3, [pc, #36]	; (800265c <HAL_RCC_GetClockConfig+0x5c>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	08db      	lsrs	r3, r3, #3
 800263a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002642:	4b07      	ldr	r3, [pc, #28]	; (8002660 <HAL_RCC_GetClockConfig+0x60>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 020f 	and.w	r2, r3, #15
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	601a      	str	r2, [r3, #0]
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40023800 	.word	0x40023800
 8002660:	40023c00 	.word	0x40023c00

08002664 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002678:	2300      	movs	r3, #0
 800267a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b00      	cmp	r3, #0
 800268a:	d012      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800268c:	4b69      	ldr	r3, [pc, #420]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	4a68      	ldr	r2, [pc, #416]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002692:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002696:	6093      	str	r3, [r2, #8]
 8002698:	4b66      	ldr	r3, [pc, #408]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a0:	4964      	ldr	r1, [pc, #400]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80026ae:	2301      	movs	r3, #1
 80026b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d017      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026be:	4b5d      	ldr	r3, [pc, #372]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026cc:	4959      	ldr	r1, [pc, #356]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026dc:	d101      	bne.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80026de:	2301      	movs	r3, #1
 80026e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80026ea:	2301      	movs	r3, #1
 80026ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d017      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026fa:	4b4e      	ldr	r3, [pc, #312]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002700:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	494a      	ldr	r1, [pc, #296]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002718:	d101      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800271a:	2301      	movs	r3, #1
 800271c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002726:	2301      	movs	r3, #1
 8002728:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002736:	2301      	movs	r3, #1
 8002738:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0320 	and.w	r3, r3, #32
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 808b 	beq.w	800285e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002748:	4b3a      	ldr	r3, [pc, #232]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	4a39      	ldr	r2, [pc, #228]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800274e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002752:	6413      	str	r3, [r2, #64]	; 0x40
 8002754:	4b37      	ldr	r3, [pc, #220]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275c:	60bb      	str	r3, [r7, #8]
 800275e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002760:	4b35      	ldr	r3, [pc, #212]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a34      	ldr	r2, [pc, #208]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800276c:	f7ff f81a 	bl	80017a4 <HAL_GetTick>
 8002770:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002774:	f7ff f816 	bl	80017a4 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	; 0x64
 8002780:	d901      	bls.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e357      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002786:	4b2c      	ldr	r3, [pc, #176]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002792:	4b28      	ldr	r3, [pc, #160]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800279a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d035      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d02e      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027b0:	4b20      	ldr	r3, [pc, #128]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027ba:	4b1e      	ldr	r3, [pc, #120]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027be:	4a1d      	ldr	r2, [pc, #116]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027c6:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ca:	4a1a      	ldr	r2, [pc, #104]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80027d2:	4a18      	ldr	r2, [pc, #96]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027d8:	4b16      	ldr	r3, [pc, #88]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d114      	bne.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7fe ffde 	bl	80017a4 <HAL_GetTick>
 80027e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ea:	e00a      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ec:	f7fe ffda 	bl	80017a4 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d901      	bls.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e319      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002802:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0ee      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002816:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800281a:	d111      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800281c:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002828:	4b04      	ldr	r3, [pc, #16]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800282a:	400b      	ands	r3, r1
 800282c:	4901      	ldr	r1, [pc, #4]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800282e:	4313      	orrs	r3, r2
 8002830:	608b      	str	r3, [r1, #8]
 8002832:	e00b      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002834:	40023800 	.word	0x40023800
 8002838:	40007000 	.word	0x40007000
 800283c:	0ffffcff 	.word	0x0ffffcff
 8002840:	4bb1      	ldr	r3, [pc, #708]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	4ab0      	ldr	r2, [pc, #704]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002846:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800284a:	6093      	str	r3, [r2, #8]
 800284c:	4bae      	ldr	r3, [pc, #696]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800284e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002858:	49ab      	ldr	r1, [pc, #684]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800285a:	4313      	orrs	r3, r2
 800285c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b00      	cmp	r3, #0
 8002868:	d010      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800286a:	4ba7      	ldr	r3, [pc, #668]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800286c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002870:	4aa5      	ldr	r2, [pc, #660]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002876:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800287a:	4ba3      	ldr	r3, [pc, #652]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800287c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002884:	49a0      	ldr	r1, [pc, #640]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002898:	4b9b      	ldr	r3, [pc, #620]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800289a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028a6:	4998      	ldr	r1, [pc, #608]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028ba:	4b93      	ldr	r3, [pc, #588]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028c8:	498f      	ldr	r1, [pc, #572]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00a      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028dc:	4b8a      	ldr	r3, [pc, #552]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ea:	4987      	ldr	r1, [pc, #540]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028fe:	4b82      	ldr	r3, [pc, #520]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002904:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290c:	497e      	ldr	r1, [pc, #504]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00a      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002920:	4b79      	ldr	r3, [pc, #484]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002926:	f023 0203 	bic.w	r2, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292e:	4976      	ldr	r1, [pc, #472]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00a      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002942:	4b71      	ldr	r3, [pc, #452]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002948:	f023 020c 	bic.w	r2, r3, #12
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002950:	496d      	ldr	r1, [pc, #436]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002952:	4313      	orrs	r3, r2
 8002954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002964:	4b68      	ldr	r3, [pc, #416]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002972:	4965      	ldr	r1, [pc, #404]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00a      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002986:	4b60      	ldr	r3, [pc, #384]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002994:	495c      	ldr	r1, [pc, #368]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00a      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029a8:	4b57      	ldr	r3, [pc, #348]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b6:	4954      	ldr	r1, [pc, #336]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80029ca:	4b4f      	ldr	r3, [pc, #316]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d8:	494b      	ldr	r1, [pc, #300]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00a      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80029ec:	4b46      	ldr	r3, [pc, #280]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fa:	4943      	ldr	r1, [pc, #268]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002a0e:	4b3e      	ldr	r3, [pc, #248]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a1c:	493a      	ldr	r1, [pc, #232]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00a      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a30:	4b35      	ldr	r3, [pc, #212]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a36:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a3e:	4932      	ldr	r1, [pc, #200]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d011      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a52:	4b2d      	ldr	r3, [pc, #180]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a58:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a60:	4929      	ldr	r1, [pc, #164]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a70:	d101      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002a72:	2301      	movs	r3, #1
 8002a74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a82:	2301      	movs	r3, #1
 8002a84:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a92:	4b1d      	ldr	r3, [pc, #116]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a98:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa0:	4919      	ldr	r1, [pc, #100]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00b      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ab4:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ac4:	4910      	ldr	r1, [pc, #64]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d006      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 80d9 	beq.w	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ae0:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a08      	ldr	r2, [pc, #32]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ae6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002aea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aec:	f7fe fe5a 	bl	80017a4 <HAL_GetTick>
 8002af0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002af2:	e00b      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002af4:	f7fe fe56 	bl	80017a4 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b64      	cmp	r3, #100	; 0x64
 8002b00:	d904      	bls.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e197      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002b06:	bf00      	nop
 8002b08:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b0c:	4b6c      	ldr	r3, [pc, #432]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1ed      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d021      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d11d      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b2c:	4b64      	ldr	r3, [pc, #400]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b32:	0c1b      	lsrs	r3, r3, #16
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b3a:	4b61      	ldr	r3, [pc, #388]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b40:	0e1b      	lsrs	r3, r3, #24
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	019a      	lsls	r2, r3, #6
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	041b      	lsls	r3, r3, #16
 8002b52:	431a      	orrs	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	061b      	lsls	r3, r3, #24
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	071b      	lsls	r3, r3, #28
 8002b60:	4957      	ldr	r1, [pc, #348]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d004      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b7c:	d00a      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d02e      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b92:	d129      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b94:	4b4a      	ldr	r3, [pc, #296]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b9a:	0c1b      	lsrs	r3, r3, #16
 8002b9c:	f003 0303 	and.w	r3, r3, #3
 8002ba0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ba2:	4b47      	ldr	r3, [pc, #284]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ba8:	0f1b      	lsrs	r3, r3, #28
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	019a      	lsls	r2, r3, #6
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	041b      	lsls	r3, r3, #16
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	061b      	lsls	r3, r3, #24
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	071b      	lsls	r3, r3, #28
 8002bc8:	493d      	ldr	r1, [pc, #244]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002bd0:	4b3b      	ldr	r3, [pc, #236]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bd6:	f023 021f 	bic.w	r2, r3, #31
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	3b01      	subs	r3, #1
 8002be0:	4937      	ldr	r1, [pc, #220]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d01d      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002bf4:	4b32      	ldr	r3, [pc, #200]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bfa:	0e1b      	lsrs	r3, r3, #24
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c02:	4b2f      	ldr	r3, [pc, #188]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c08:	0f1b      	lsrs	r3, r3, #28
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	019a      	lsls	r2, r3, #6
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	041b      	lsls	r3, r3, #16
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	061b      	lsls	r3, r3, #24
 8002c22:	431a      	orrs	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	071b      	lsls	r3, r3, #28
 8002c28:	4925      	ldr	r1, [pc, #148]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d011      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	019a      	lsls	r2, r3, #6
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	041b      	lsls	r3, r3, #16
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	061b      	lsls	r3, r3, #24
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	071b      	lsls	r3, r3, #28
 8002c58:	4919      	ldr	r1, [pc, #100]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c60:	4b17      	ldr	r3, [pc, #92]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a16      	ldr	r2, [pc, #88]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c6c:	f7fe fd9a 	bl	80017a4 <HAL_GetTick>
 8002c70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c72:	e008      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c74:	f7fe fd96 	bl	80017a4 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b64      	cmp	r3, #100	; 0x64
 8002c80:	d901      	bls.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e0d7      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c86:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0f0      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	f040 80cd 	bne.w	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c9a:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a08      	ldr	r2, [pc, #32]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ca6:	f7fe fd7d 	bl	80017a4 <HAL_GetTick>
 8002caa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cac:	e00a      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002cae:	f7fe fd79 	bl	80017a4 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b64      	cmp	r3, #100	; 0x64
 8002cba:	d903      	bls.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e0ba      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002cc0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cc4:	4b5e      	ldr	r3, [pc, #376]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cd0:	d0ed      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d02e      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d12a      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002cfa:	4b51      	ldr	r3, [pc, #324]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d00:	0c1b      	lsrs	r3, r3, #16
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d08:	4b4d      	ldr	r3, [pc, #308]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0e:	0f1b      	lsrs	r3, r3, #28
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	019a      	lsls	r2, r3, #6
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	041b      	lsls	r3, r3, #16
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	061b      	lsls	r3, r3, #24
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	071b      	lsls	r3, r3, #28
 8002d2e:	4944      	ldr	r1, [pc, #272]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d36:	4b42      	ldr	r3, [pc, #264]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d3c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	3b01      	subs	r3, #1
 8002d46:	021b      	lsls	r3, r3, #8
 8002d48:	493d      	ldr	r1, [pc, #244]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d022      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d64:	d11d      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d66:	4b36      	ldr	r3, [pc, #216]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6c:	0e1b      	lsrs	r3, r3, #24
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d74:	4b32      	ldr	r3, [pc, #200]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7a:	0f1b      	lsrs	r3, r3, #28
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	019a      	lsls	r2, r3, #6
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	041b      	lsls	r3, r3, #16
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	061b      	lsls	r3, r3, #24
 8002d94:	431a      	orrs	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	071b      	lsls	r3, r3, #28
 8002d9a:	4929      	ldr	r1, [pc, #164]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d028      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002dae:	4b24      	ldr	r3, [pc, #144]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db4:	0e1b      	lsrs	r3, r3, #24
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002dbc:	4b20      	ldr	r3, [pc, #128]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc2:	0c1b      	lsrs	r3, r3, #16
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	019a      	lsls	r2, r3, #6
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	041b      	lsls	r3, r3, #16
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	061b      	lsls	r3, r3, #24
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	071b      	lsls	r3, r3, #28
 8002de2:	4917      	ldr	r1, [pc, #92]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002dea:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002df0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	4911      	ldr	r1, [pc, #68]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e00:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a0e      	ldr	r2, [pc, #56]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e0c:	f7fe fcca 	bl	80017a4 <HAL_GetTick>
 8002e10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e14:	f7fe fcc6 	bl	80017a4 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b64      	cmp	r3, #100	; 0x64
 8002e20:	d901      	bls.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e007      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e32:	d1ef      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3720      	adds	r7, #32
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40023800 	.word	0x40023800

08002e44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e049      	b.n	8002eea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f841 	bl	8002ef2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3304      	adds	r3, #4
 8002e80:	4619      	mov	r1, r3
 8002e82:	4610      	mov	r0, r2
 8002e84:	f000 fa00 	bl	8003288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
	...

08002f08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d001      	beq.n	8002f20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e054      	b.n	8002fca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a26      	ldr	r2, [pc, #152]	; (8002fd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d022      	beq.n	8002f88 <HAL_TIM_Base_Start_IT+0x80>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4a:	d01d      	beq.n	8002f88 <HAL_TIM_Base_Start_IT+0x80>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a22      	ldr	r2, [pc, #136]	; (8002fdc <HAL_TIM_Base_Start_IT+0xd4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d018      	beq.n	8002f88 <HAL_TIM_Base_Start_IT+0x80>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a21      	ldr	r2, [pc, #132]	; (8002fe0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d013      	beq.n	8002f88 <HAL_TIM_Base_Start_IT+0x80>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a1f      	ldr	r2, [pc, #124]	; (8002fe4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00e      	beq.n	8002f88 <HAL_TIM_Base_Start_IT+0x80>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1e      	ldr	r2, [pc, #120]	; (8002fe8 <HAL_TIM_Base_Start_IT+0xe0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d009      	beq.n	8002f88 <HAL_TIM_Base_Start_IT+0x80>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1c      	ldr	r2, [pc, #112]	; (8002fec <HAL_TIM_Base_Start_IT+0xe4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d004      	beq.n	8002f88 <HAL_TIM_Base_Start_IT+0x80>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1b      	ldr	r2, [pc, #108]	; (8002ff0 <HAL_TIM_Base_Start_IT+0xe8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d115      	bne.n	8002fb4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <HAL_TIM_Base_Start_IT+0xec>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2b06      	cmp	r3, #6
 8002f98:	d015      	beq.n	8002fc6 <HAL_TIM_Base_Start_IT+0xbe>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa0:	d011      	beq.n	8002fc6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0201 	orr.w	r2, r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb2:	e008      	b.n	8002fc6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0201 	orr.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	e000      	b.n	8002fc8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40010000 	.word	0x40010000
 8002fdc:	40000400 	.word	0x40000400
 8002fe0:	40000800 	.word	0x40000800
 8002fe4:	40000c00 	.word	0x40000c00
 8002fe8:	40010400 	.word	0x40010400
 8002fec:	40014000 	.word	0x40014000
 8002ff0:	40001800 	.word	0x40001800
 8002ff4:	00010007 	.word	0x00010007

08002ff8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b02      	cmp	r3, #2
 800300c:	d122      	bne.n	8003054 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b02      	cmp	r3, #2
 800301a:	d11b      	bne.n	8003054 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f06f 0202 	mvn.w	r2, #2
 8003024:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f905 	bl	800324a <HAL_TIM_IC_CaptureCallback>
 8003040:	e005      	b.n	800304e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f8f7 	bl	8003236 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f908 	bl	800325e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	2b04      	cmp	r3, #4
 8003060:	d122      	bne.n	80030a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b04      	cmp	r3, #4
 800306e:	d11b      	bne.n	80030a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f06f 0204 	mvn.w	r2, #4
 8003078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2202      	movs	r2, #2
 800307e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f8db 	bl	800324a <HAL_TIM_IC_CaptureCallback>
 8003094:	e005      	b.n	80030a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f8cd 	bl	8003236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f8de 	bl	800325e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b08      	cmp	r3, #8
 80030b4:	d122      	bne.n	80030fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d11b      	bne.n	80030fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0208 	mvn.w	r2, #8
 80030cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2204      	movs	r2, #4
 80030d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f8b1 	bl	800324a <HAL_TIM_IC_CaptureCallback>
 80030e8:	e005      	b.n	80030f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f8a3 	bl	8003236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f8b4 	bl	800325e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f003 0310 	and.w	r3, r3, #16
 8003106:	2b10      	cmp	r3, #16
 8003108:	d122      	bne.n	8003150 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b10      	cmp	r3, #16
 8003116:	d11b      	bne.n	8003150 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0210 	mvn.w	r2, #16
 8003120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2208      	movs	r2, #8
 8003126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f887 	bl	800324a <HAL_TIM_IC_CaptureCallback>
 800313c:	e005      	b.n	800314a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f879 	bl	8003236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f88a 	bl	800325e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b01      	cmp	r3, #1
 800315c:	d10e      	bne.n	800317c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b01      	cmp	r3, #1
 800316a:	d107      	bne.n	800317c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f06f 0201 	mvn.w	r2, #1
 8003174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7fe f812 	bl	80011a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003186:	2b80      	cmp	r3, #128	; 0x80
 8003188:	d10e      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003194:	2b80      	cmp	r3, #128	; 0x80
 8003196:	d107      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f91a 	bl	80033dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b6:	d10e      	bne.n	80031d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c2:	2b80      	cmp	r3, #128	; 0x80
 80031c4:	d107      	bne.n	80031d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f90d 	bl	80033f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e0:	2b40      	cmp	r3, #64	; 0x40
 80031e2:	d10e      	bne.n	8003202 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ee:	2b40      	cmp	r3, #64	; 0x40
 80031f0:	d107      	bne.n	8003202 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f838 	bl	8003272 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	2b20      	cmp	r3, #32
 800320e:	d10e      	bne.n	800322e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f003 0320 	and.w	r3, r3, #32
 800321a:	2b20      	cmp	r3, #32
 800321c:	d107      	bne.n	800322e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f06f 0220 	mvn.w	r2, #32
 8003226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f8cd 	bl	80033c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
	...

08003288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a40      	ldr	r2, [pc, #256]	; (800339c <TIM_Base_SetConfig+0x114>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d013      	beq.n	80032c8 <TIM_Base_SetConfig+0x40>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a6:	d00f      	beq.n	80032c8 <TIM_Base_SetConfig+0x40>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a3d      	ldr	r2, [pc, #244]	; (80033a0 <TIM_Base_SetConfig+0x118>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d00b      	beq.n	80032c8 <TIM_Base_SetConfig+0x40>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a3c      	ldr	r2, [pc, #240]	; (80033a4 <TIM_Base_SetConfig+0x11c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d007      	beq.n	80032c8 <TIM_Base_SetConfig+0x40>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a3b      	ldr	r2, [pc, #236]	; (80033a8 <TIM_Base_SetConfig+0x120>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d003      	beq.n	80032c8 <TIM_Base_SetConfig+0x40>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a3a      	ldr	r2, [pc, #232]	; (80033ac <TIM_Base_SetConfig+0x124>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d108      	bne.n	80032da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a2f      	ldr	r2, [pc, #188]	; (800339c <TIM_Base_SetConfig+0x114>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d02b      	beq.n	800333a <TIM_Base_SetConfig+0xb2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e8:	d027      	beq.n	800333a <TIM_Base_SetConfig+0xb2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a2c      	ldr	r2, [pc, #176]	; (80033a0 <TIM_Base_SetConfig+0x118>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d023      	beq.n	800333a <TIM_Base_SetConfig+0xb2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a2b      	ldr	r2, [pc, #172]	; (80033a4 <TIM_Base_SetConfig+0x11c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d01f      	beq.n	800333a <TIM_Base_SetConfig+0xb2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a2a      	ldr	r2, [pc, #168]	; (80033a8 <TIM_Base_SetConfig+0x120>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d01b      	beq.n	800333a <TIM_Base_SetConfig+0xb2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a29      	ldr	r2, [pc, #164]	; (80033ac <TIM_Base_SetConfig+0x124>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d017      	beq.n	800333a <TIM_Base_SetConfig+0xb2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a28      	ldr	r2, [pc, #160]	; (80033b0 <TIM_Base_SetConfig+0x128>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d013      	beq.n	800333a <TIM_Base_SetConfig+0xb2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a27      	ldr	r2, [pc, #156]	; (80033b4 <TIM_Base_SetConfig+0x12c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d00f      	beq.n	800333a <TIM_Base_SetConfig+0xb2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a26      	ldr	r2, [pc, #152]	; (80033b8 <TIM_Base_SetConfig+0x130>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00b      	beq.n	800333a <TIM_Base_SetConfig+0xb2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a25      	ldr	r2, [pc, #148]	; (80033bc <TIM_Base_SetConfig+0x134>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d007      	beq.n	800333a <TIM_Base_SetConfig+0xb2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a24      	ldr	r2, [pc, #144]	; (80033c0 <TIM_Base_SetConfig+0x138>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d003      	beq.n	800333a <TIM_Base_SetConfig+0xb2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a23      	ldr	r2, [pc, #140]	; (80033c4 <TIM_Base_SetConfig+0x13c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d108      	bne.n	800334c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4313      	orrs	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a0a      	ldr	r2, [pc, #40]	; (800339c <TIM_Base_SetConfig+0x114>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d003      	beq.n	8003380 <TIM_Base_SetConfig+0xf8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a0c      	ldr	r2, [pc, #48]	; (80033ac <TIM_Base_SetConfig+0x124>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d103      	bne.n	8003388 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	615a      	str	r2, [r3, #20]
}
 800338e:	bf00      	nop
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40010000 	.word	0x40010000
 80033a0:	40000400 	.word	0x40000400
 80033a4:	40000800 	.word	0x40000800
 80033a8:	40000c00 	.word	0x40000c00
 80033ac:	40010400 	.word	0x40010400
 80033b0:	40014000 	.word	0x40014000
 80033b4:	40014400 	.word	0x40014400
 80033b8:	40014800 	.word	0x40014800
 80033bc:	40001800 	.word	0x40001800
 80033c0:	40001c00 	.word	0x40001c00
 80033c4:	40002000 	.word	0x40002000

080033c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e040      	b.n	8003498 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800341a:	2b00      	cmp	r3, #0
 800341c:	d106      	bne.n	800342c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7fe f81e 	bl	8001468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2224      	movs	r2, #36	; 0x24
 8003430:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0201 	bic.w	r2, r2, #1
 8003440:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f82c 	bl	80034a0 <UART_SetConfig>
 8003448:	4603      	mov	r3, r0
 800344a:	2b01      	cmp	r3, #1
 800344c:	d101      	bne.n	8003452 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e022      	b.n	8003498 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 fa82 	bl	8003964 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800346e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800347e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0201 	orr.w	r2, r2, #1
 800348e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fb09 	bl	8003aa8 <UART_CheckIdleState>
 8003496:	4603      	mov	r3, r0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	431a      	orrs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	4ba7      	ldr	r3, [pc, #668]	; (8003768 <UART_SetConfig+0x2c8>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6812      	ldr	r2, [r2, #0]
 80034d2:	6979      	ldr	r1, [r7, #20]
 80034d4:	430b      	orrs	r3, r1
 80034d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	430a      	orrs	r2, r1
 8003510:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a95      	ldr	r2, [pc, #596]	; (800376c <UART_SetConfig+0x2cc>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d120      	bne.n	800355e <UART_SetConfig+0xbe>
 800351c:	4b94      	ldr	r3, [pc, #592]	; (8003770 <UART_SetConfig+0x2d0>)
 800351e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	2b03      	cmp	r3, #3
 8003528:	d816      	bhi.n	8003558 <UART_SetConfig+0xb8>
 800352a:	a201      	add	r2, pc, #4	; (adr r2, 8003530 <UART_SetConfig+0x90>)
 800352c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003530:	08003541 	.word	0x08003541
 8003534:	0800354d 	.word	0x0800354d
 8003538:	08003547 	.word	0x08003547
 800353c:	08003553 	.word	0x08003553
 8003540:	2301      	movs	r3, #1
 8003542:	77fb      	strb	r3, [r7, #31]
 8003544:	e14f      	b.n	80037e6 <UART_SetConfig+0x346>
 8003546:	2302      	movs	r3, #2
 8003548:	77fb      	strb	r3, [r7, #31]
 800354a:	e14c      	b.n	80037e6 <UART_SetConfig+0x346>
 800354c:	2304      	movs	r3, #4
 800354e:	77fb      	strb	r3, [r7, #31]
 8003550:	e149      	b.n	80037e6 <UART_SetConfig+0x346>
 8003552:	2308      	movs	r3, #8
 8003554:	77fb      	strb	r3, [r7, #31]
 8003556:	e146      	b.n	80037e6 <UART_SetConfig+0x346>
 8003558:	2310      	movs	r3, #16
 800355a:	77fb      	strb	r3, [r7, #31]
 800355c:	e143      	b.n	80037e6 <UART_SetConfig+0x346>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a84      	ldr	r2, [pc, #528]	; (8003774 <UART_SetConfig+0x2d4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d132      	bne.n	80035ce <UART_SetConfig+0x12e>
 8003568:	4b81      	ldr	r3, [pc, #516]	; (8003770 <UART_SetConfig+0x2d0>)
 800356a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356e:	f003 030c 	and.w	r3, r3, #12
 8003572:	2b0c      	cmp	r3, #12
 8003574:	d828      	bhi.n	80035c8 <UART_SetConfig+0x128>
 8003576:	a201      	add	r2, pc, #4	; (adr r2, 800357c <UART_SetConfig+0xdc>)
 8003578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357c:	080035b1 	.word	0x080035b1
 8003580:	080035c9 	.word	0x080035c9
 8003584:	080035c9 	.word	0x080035c9
 8003588:	080035c9 	.word	0x080035c9
 800358c:	080035bd 	.word	0x080035bd
 8003590:	080035c9 	.word	0x080035c9
 8003594:	080035c9 	.word	0x080035c9
 8003598:	080035c9 	.word	0x080035c9
 800359c:	080035b7 	.word	0x080035b7
 80035a0:	080035c9 	.word	0x080035c9
 80035a4:	080035c9 	.word	0x080035c9
 80035a8:	080035c9 	.word	0x080035c9
 80035ac:	080035c3 	.word	0x080035c3
 80035b0:	2300      	movs	r3, #0
 80035b2:	77fb      	strb	r3, [r7, #31]
 80035b4:	e117      	b.n	80037e6 <UART_SetConfig+0x346>
 80035b6:	2302      	movs	r3, #2
 80035b8:	77fb      	strb	r3, [r7, #31]
 80035ba:	e114      	b.n	80037e6 <UART_SetConfig+0x346>
 80035bc:	2304      	movs	r3, #4
 80035be:	77fb      	strb	r3, [r7, #31]
 80035c0:	e111      	b.n	80037e6 <UART_SetConfig+0x346>
 80035c2:	2308      	movs	r3, #8
 80035c4:	77fb      	strb	r3, [r7, #31]
 80035c6:	e10e      	b.n	80037e6 <UART_SetConfig+0x346>
 80035c8:	2310      	movs	r3, #16
 80035ca:	77fb      	strb	r3, [r7, #31]
 80035cc:	e10b      	b.n	80037e6 <UART_SetConfig+0x346>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a69      	ldr	r2, [pc, #420]	; (8003778 <UART_SetConfig+0x2d8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d120      	bne.n	800361a <UART_SetConfig+0x17a>
 80035d8:	4b65      	ldr	r3, [pc, #404]	; (8003770 <UART_SetConfig+0x2d0>)
 80035da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035e2:	2b30      	cmp	r3, #48	; 0x30
 80035e4:	d013      	beq.n	800360e <UART_SetConfig+0x16e>
 80035e6:	2b30      	cmp	r3, #48	; 0x30
 80035e8:	d814      	bhi.n	8003614 <UART_SetConfig+0x174>
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d009      	beq.n	8003602 <UART_SetConfig+0x162>
 80035ee:	2b20      	cmp	r3, #32
 80035f0:	d810      	bhi.n	8003614 <UART_SetConfig+0x174>
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <UART_SetConfig+0x15c>
 80035f6:	2b10      	cmp	r3, #16
 80035f8:	d006      	beq.n	8003608 <UART_SetConfig+0x168>
 80035fa:	e00b      	b.n	8003614 <UART_SetConfig+0x174>
 80035fc:	2300      	movs	r3, #0
 80035fe:	77fb      	strb	r3, [r7, #31]
 8003600:	e0f1      	b.n	80037e6 <UART_SetConfig+0x346>
 8003602:	2302      	movs	r3, #2
 8003604:	77fb      	strb	r3, [r7, #31]
 8003606:	e0ee      	b.n	80037e6 <UART_SetConfig+0x346>
 8003608:	2304      	movs	r3, #4
 800360a:	77fb      	strb	r3, [r7, #31]
 800360c:	e0eb      	b.n	80037e6 <UART_SetConfig+0x346>
 800360e:	2308      	movs	r3, #8
 8003610:	77fb      	strb	r3, [r7, #31]
 8003612:	e0e8      	b.n	80037e6 <UART_SetConfig+0x346>
 8003614:	2310      	movs	r3, #16
 8003616:	77fb      	strb	r3, [r7, #31]
 8003618:	e0e5      	b.n	80037e6 <UART_SetConfig+0x346>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a57      	ldr	r2, [pc, #348]	; (800377c <UART_SetConfig+0x2dc>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d120      	bne.n	8003666 <UART_SetConfig+0x1c6>
 8003624:	4b52      	ldr	r3, [pc, #328]	; (8003770 <UART_SetConfig+0x2d0>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800362e:	2bc0      	cmp	r3, #192	; 0xc0
 8003630:	d013      	beq.n	800365a <UART_SetConfig+0x1ba>
 8003632:	2bc0      	cmp	r3, #192	; 0xc0
 8003634:	d814      	bhi.n	8003660 <UART_SetConfig+0x1c0>
 8003636:	2b80      	cmp	r3, #128	; 0x80
 8003638:	d009      	beq.n	800364e <UART_SetConfig+0x1ae>
 800363a:	2b80      	cmp	r3, #128	; 0x80
 800363c:	d810      	bhi.n	8003660 <UART_SetConfig+0x1c0>
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <UART_SetConfig+0x1a8>
 8003642:	2b40      	cmp	r3, #64	; 0x40
 8003644:	d006      	beq.n	8003654 <UART_SetConfig+0x1b4>
 8003646:	e00b      	b.n	8003660 <UART_SetConfig+0x1c0>
 8003648:	2300      	movs	r3, #0
 800364a:	77fb      	strb	r3, [r7, #31]
 800364c:	e0cb      	b.n	80037e6 <UART_SetConfig+0x346>
 800364e:	2302      	movs	r3, #2
 8003650:	77fb      	strb	r3, [r7, #31]
 8003652:	e0c8      	b.n	80037e6 <UART_SetConfig+0x346>
 8003654:	2304      	movs	r3, #4
 8003656:	77fb      	strb	r3, [r7, #31]
 8003658:	e0c5      	b.n	80037e6 <UART_SetConfig+0x346>
 800365a:	2308      	movs	r3, #8
 800365c:	77fb      	strb	r3, [r7, #31]
 800365e:	e0c2      	b.n	80037e6 <UART_SetConfig+0x346>
 8003660:	2310      	movs	r3, #16
 8003662:	77fb      	strb	r3, [r7, #31]
 8003664:	e0bf      	b.n	80037e6 <UART_SetConfig+0x346>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a45      	ldr	r2, [pc, #276]	; (8003780 <UART_SetConfig+0x2e0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d125      	bne.n	80036bc <UART_SetConfig+0x21c>
 8003670:	4b3f      	ldr	r3, [pc, #252]	; (8003770 <UART_SetConfig+0x2d0>)
 8003672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800367a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800367e:	d017      	beq.n	80036b0 <UART_SetConfig+0x210>
 8003680:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003684:	d817      	bhi.n	80036b6 <UART_SetConfig+0x216>
 8003686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800368a:	d00b      	beq.n	80036a4 <UART_SetConfig+0x204>
 800368c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003690:	d811      	bhi.n	80036b6 <UART_SetConfig+0x216>
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <UART_SetConfig+0x1fe>
 8003696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800369a:	d006      	beq.n	80036aa <UART_SetConfig+0x20a>
 800369c:	e00b      	b.n	80036b6 <UART_SetConfig+0x216>
 800369e:	2300      	movs	r3, #0
 80036a0:	77fb      	strb	r3, [r7, #31]
 80036a2:	e0a0      	b.n	80037e6 <UART_SetConfig+0x346>
 80036a4:	2302      	movs	r3, #2
 80036a6:	77fb      	strb	r3, [r7, #31]
 80036a8:	e09d      	b.n	80037e6 <UART_SetConfig+0x346>
 80036aa:	2304      	movs	r3, #4
 80036ac:	77fb      	strb	r3, [r7, #31]
 80036ae:	e09a      	b.n	80037e6 <UART_SetConfig+0x346>
 80036b0:	2308      	movs	r3, #8
 80036b2:	77fb      	strb	r3, [r7, #31]
 80036b4:	e097      	b.n	80037e6 <UART_SetConfig+0x346>
 80036b6:	2310      	movs	r3, #16
 80036b8:	77fb      	strb	r3, [r7, #31]
 80036ba:	e094      	b.n	80037e6 <UART_SetConfig+0x346>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a30      	ldr	r2, [pc, #192]	; (8003784 <UART_SetConfig+0x2e4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d125      	bne.n	8003712 <UART_SetConfig+0x272>
 80036c6:	4b2a      	ldr	r3, [pc, #168]	; (8003770 <UART_SetConfig+0x2d0>)
 80036c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036d4:	d017      	beq.n	8003706 <UART_SetConfig+0x266>
 80036d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036da:	d817      	bhi.n	800370c <UART_SetConfig+0x26c>
 80036dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e0:	d00b      	beq.n	80036fa <UART_SetConfig+0x25a>
 80036e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e6:	d811      	bhi.n	800370c <UART_SetConfig+0x26c>
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <UART_SetConfig+0x254>
 80036ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f0:	d006      	beq.n	8003700 <UART_SetConfig+0x260>
 80036f2:	e00b      	b.n	800370c <UART_SetConfig+0x26c>
 80036f4:	2301      	movs	r3, #1
 80036f6:	77fb      	strb	r3, [r7, #31]
 80036f8:	e075      	b.n	80037e6 <UART_SetConfig+0x346>
 80036fa:	2302      	movs	r3, #2
 80036fc:	77fb      	strb	r3, [r7, #31]
 80036fe:	e072      	b.n	80037e6 <UART_SetConfig+0x346>
 8003700:	2304      	movs	r3, #4
 8003702:	77fb      	strb	r3, [r7, #31]
 8003704:	e06f      	b.n	80037e6 <UART_SetConfig+0x346>
 8003706:	2308      	movs	r3, #8
 8003708:	77fb      	strb	r3, [r7, #31]
 800370a:	e06c      	b.n	80037e6 <UART_SetConfig+0x346>
 800370c:	2310      	movs	r3, #16
 800370e:	77fb      	strb	r3, [r7, #31]
 8003710:	e069      	b.n	80037e6 <UART_SetConfig+0x346>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a1c      	ldr	r2, [pc, #112]	; (8003788 <UART_SetConfig+0x2e8>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d137      	bne.n	800378c <UART_SetConfig+0x2ec>
 800371c:	4b14      	ldr	r3, [pc, #80]	; (8003770 <UART_SetConfig+0x2d0>)
 800371e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003722:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003726:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800372a:	d017      	beq.n	800375c <UART_SetConfig+0x2bc>
 800372c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003730:	d817      	bhi.n	8003762 <UART_SetConfig+0x2c2>
 8003732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003736:	d00b      	beq.n	8003750 <UART_SetConfig+0x2b0>
 8003738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800373c:	d811      	bhi.n	8003762 <UART_SetConfig+0x2c2>
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <UART_SetConfig+0x2aa>
 8003742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003746:	d006      	beq.n	8003756 <UART_SetConfig+0x2b6>
 8003748:	e00b      	b.n	8003762 <UART_SetConfig+0x2c2>
 800374a:	2300      	movs	r3, #0
 800374c:	77fb      	strb	r3, [r7, #31]
 800374e:	e04a      	b.n	80037e6 <UART_SetConfig+0x346>
 8003750:	2302      	movs	r3, #2
 8003752:	77fb      	strb	r3, [r7, #31]
 8003754:	e047      	b.n	80037e6 <UART_SetConfig+0x346>
 8003756:	2304      	movs	r3, #4
 8003758:	77fb      	strb	r3, [r7, #31]
 800375a:	e044      	b.n	80037e6 <UART_SetConfig+0x346>
 800375c:	2308      	movs	r3, #8
 800375e:	77fb      	strb	r3, [r7, #31]
 8003760:	e041      	b.n	80037e6 <UART_SetConfig+0x346>
 8003762:	2310      	movs	r3, #16
 8003764:	77fb      	strb	r3, [r7, #31]
 8003766:	e03e      	b.n	80037e6 <UART_SetConfig+0x346>
 8003768:	efff69f3 	.word	0xefff69f3
 800376c:	40011000 	.word	0x40011000
 8003770:	40023800 	.word	0x40023800
 8003774:	40004400 	.word	0x40004400
 8003778:	40004800 	.word	0x40004800
 800377c:	40004c00 	.word	0x40004c00
 8003780:	40005000 	.word	0x40005000
 8003784:	40011400 	.word	0x40011400
 8003788:	40007800 	.word	0x40007800
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a71      	ldr	r2, [pc, #452]	; (8003958 <UART_SetConfig+0x4b8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d125      	bne.n	80037e2 <UART_SetConfig+0x342>
 8003796:	4b71      	ldr	r3, [pc, #452]	; (800395c <UART_SetConfig+0x4bc>)
 8003798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80037a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80037a4:	d017      	beq.n	80037d6 <UART_SetConfig+0x336>
 80037a6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80037aa:	d817      	bhi.n	80037dc <UART_SetConfig+0x33c>
 80037ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037b0:	d00b      	beq.n	80037ca <UART_SetConfig+0x32a>
 80037b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037b6:	d811      	bhi.n	80037dc <UART_SetConfig+0x33c>
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <UART_SetConfig+0x324>
 80037bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037c0:	d006      	beq.n	80037d0 <UART_SetConfig+0x330>
 80037c2:	e00b      	b.n	80037dc <UART_SetConfig+0x33c>
 80037c4:	2300      	movs	r3, #0
 80037c6:	77fb      	strb	r3, [r7, #31]
 80037c8:	e00d      	b.n	80037e6 <UART_SetConfig+0x346>
 80037ca:	2302      	movs	r3, #2
 80037cc:	77fb      	strb	r3, [r7, #31]
 80037ce:	e00a      	b.n	80037e6 <UART_SetConfig+0x346>
 80037d0:	2304      	movs	r3, #4
 80037d2:	77fb      	strb	r3, [r7, #31]
 80037d4:	e007      	b.n	80037e6 <UART_SetConfig+0x346>
 80037d6:	2308      	movs	r3, #8
 80037d8:	77fb      	strb	r3, [r7, #31]
 80037da:	e004      	b.n	80037e6 <UART_SetConfig+0x346>
 80037dc:	2310      	movs	r3, #16
 80037de:	77fb      	strb	r3, [r7, #31]
 80037e0:	e001      	b.n	80037e6 <UART_SetConfig+0x346>
 80037e2:	2310      	movs	r3, #16
 80037e4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ee:	d15b      	bne.n	80038a8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80037f0:	7ffb      	ldrb	r3, [r7, #31]
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d827      	bhi.n	8003846 <UART_SetConfig+0x3a6>
 80037f6:	a201      	add	r2, pc, #4	; (adr r2, 80037fc <UART_SetConfig+0x35c>)
 80037f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fc:	08003821 	.word	0x08003821
 8003800:	08003829 	.word	0x08003829
 8003804:	08003831 	.word	0x08003831
 8003808:	08003847 	.word	0x08003847
 800380c:	08003837 	.word	0x08003837
 8003810:	08003847 	.word	0x08003847
 8003814:	08003847 	.word	0x08003847
 8003818:	08003847 	.word	0x08003847
 800381c:	0800383f 	.word	0x0800383f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003820:	f7fe fec6 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
 8003824:	61b8      	str	r0, [r7, #24]
        break;
 8003826:	e013      	b.n	8003850 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003828:	f7fe fed6 	bl	80025d8 <HAL_RCC_GetPCLK2Freq>
 800382c:	61b8      	str	r0, [r7, #24]
        break;
 800382e:	e00f      	b.n	8003850 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003830:	4b4b      	ldr	r3, [pc, #300]	; (8003960 <UART_SetConfig+0x4c0>)
 8003832:	61bb      	str	r3, [r7, #24]
        break;
 8003834:	e00c      	b.n	8003850 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003836:	f7fe fdf9 	bl	800242c <HAL_RCC_GetSysClockFreq>
 800383a:	61b8      	str	r0, [r7, #24]
        break;
 800383c:	e008      	b.n	8003850 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800383e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003842:	61bb      	str	r3, [r7, #24]
        break;
 8003844:	e004      	b.n	8003850 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003846:	2300      	movs	r3, #0
 8003848:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	77bb      	strb	r3, [r7, #30]
        break;
 800384e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d074      	beq.n	8003940 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	005a      	lsls	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	085b      	lsrs	r3, r3, #1
 8003860:	441a      	add	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	fbb2 f3f3 	udiv	r3, r2, r3
 800386a:	b29b      	uxth	r3, r3
 800386c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	2b0f      	cmp	r3, #15
 8003872:	d916      	bls.n	80038a2 <UART_SetConfig+0x402>
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800387a:	d212      	bcs.n	80038a2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	b29b      	uxth	r3, r3
 8003880:	f023 030f 	bic.w	r3, r3, #15
 8003884:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	085b      	lsrs	r3, r3, #1
 800388a:	b29b      	uxth	r3, r3
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	b29a      	uxth	r2, r3
 8003892:	89fb      	ldrh	r3, [r7, #14]
 8003894:	4313      	orrs	r3, r2
 8003896:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	89fa      	ldrh	r2, [r7, #14]
 800389e:	60da      	str	r2, [r3, #12]
 80038a0:	e04e      	b.n	8003940 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	77bb      	strb	r3, [r7, #30]
 80038a6:	e04b      	b.n	8003940 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038a8:	7ffb      	ldrb	r3, [r7, #31]
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d827      	bhi.n	80038fe <UART_SetConfig+0x45e>
 80038ae:	a201      	add	r2, pc, #4	; (adr r2, 80038b4 <UART_SetConfig+0x414>)
 80038b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b4:	080038d9 	.word	0x080038d9
 80038b8:	080038e1 	.word	0x080038e1
 80038bc:	080038e9 	.word	0x080038e9
 80038c0:	080038ff 	.word	0x080038ff
 80038c4:	080038ef 	.word	0x080038ef
 80038c8:	080038ff 	.word	0x080038ff
 80038cc:	080038ff 	.word	0x080038ff
 80038d0:	080038ff 	.word	0x080038ff
 80038d4:	080038f7 	.word	0x080038f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038d8:	f7fe fe6a 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
 80038dc:	61b8      	str	r0, [r7, #24]
        break;
 80038de:	e013      	b.n	8003908 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038e0:	f7fe fe7a 	bl	80025d8 <HAL_RCC_GetPCLK2Freq>
 80038e4:	61b8      	str	r0, [r7, #24]
        break;
 80038e6:	e00f      	b.n	8003908 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038e8:	4b1d      	ldr	r3, [pc, #116]	; (8003960 <UART_SetConfig+0x4c0>)
 80038ea:	61bb      	str	r3, [r7, #24]
        break;
 80038ec:	e00c      	b.n	8003908 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ee:	f7fe fd9d 	bl	800242c <HAL_RCC_GetSysClockFreq>
 80038f2:	61b8      	str	r0, [r7, #24]
        break;
 80038f4:	e008      	b.n	8003908 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038fa:	61bb      	str	r3, [r7, #24]
        break;
 80038fc:	e004      	b.n	8003908 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	77bb      	strb	r3, [r7, #30]
        break;
 8003906:	bf00      	nop
    }

    if (pclk != 0U)
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d018      	beq.n	8003940 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	085a      	lsrs	r2, r3, #1
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	441a      	add	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003920:	b29b      	uxth	r3, r3
 8003922:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b0f      	cmp	r3, #15
 8003928:	d908      	bls.n	800393c <UART_SetConfig+0x49c>
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003930:	d204      	bcs.n	800393c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	60da      	str	r2, [r3, #12]
 800393a:	e001      	b.n	8003940 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800394c:	7fbb      	ldrb	r3, [r7, #30]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3720      	adds	r7, #32
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40007c00 	.word	0x40007c00
 800395c:	40023800 	.word	0x40023800
 8003960:	00f42400 	.word	0x00f42400

08003964 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00a      	beq.n	800398e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00a      	beq.n	80039d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	f003 0308 	and.w	r3, r3, #8
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	f003 0310 	and.w	r3, r3, #16
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00a      	beq.n	8003a16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d01a      	beq.n	8003a7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a62:	d10a      	bne.n	8003a7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	605a      	str	r2, [r3, #4]
  }
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af02      	add	r7, sp, #8
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ab8:	f7fd fe74 	bl	80017a4 <HAL_GetTick>
 8003abc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d10e      	bne.n	8003aea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003acc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f817 	bl	8003b0e <UART_WaitOnFlagUntilTimeout>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e00d      	b.n	8003b06 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2220      	movs	r2, #32
 8003aee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	603b      	str	r3, [r7, #0]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b1e:	e05e      	b.n	8003bde <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b26:	d05a      	beq.n	8003bde <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b28:	f7fd fe3c 	bl	80017a4 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d302      	bcc.n	8003b3e <UART_WaitOnFlagUntilTimeout+0x30>
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d11b      	bne.n	8003b76 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b4c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0201 	bic.w	r2, r2, #1
 8003b5c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2220      	movs	r2, #32
 8003b62:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e043      	b.n	8003bfe <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d02c      	beq.n	8003bde <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b92:	d124      	bne.n	8003bde <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b9c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003bac:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 0201 	bic.w	r2, r2, #1
 8003bbc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e00f      	b.n	8003bfe <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	69da      	ldr	r2, [r3, #28]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4013      	ands	r3, r2
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	bf0c      	ite	eq
 8003bee:	2301      	moveq	r3, #1
 8003bf0:	2300      	movne	r3, #0
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	79fb      	ldrb	r3, [r7, #7]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d091      	beq.n	8003b20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f103 0208 	add.w	r2, r3, #8
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c1e:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f103 0208 	add.w	r2, r3, #8
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f103 0208 	add.w	r2, r3, #8
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	601a      	str	r2, [r3, #0]
}
 8003c9c:	bf00      	nop
 8003c9e:	3714      	adds	r7, #20
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6892      	ldr	r2, [r2, #8]
 8003cbe:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6852      	ldr	r2, [r2, #4]
 8003cc8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d103      	bne.n	8003cdc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	1e5a      	subs	r2, r3, #1
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08c      	sub	sp, #48	; 0x30
 8003d00:	af04      	add	r7, sp, #16
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	603b      	str	r3, [r7, #0]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003d0c:	88fb      	ldrh	r3, [r7, #6]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 fe21 	bl	8004958 <pvPortMalloc>
 8003d16:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00e      	beq.n	8003d3c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003d1e:	2058      	movs	r0, #88	; 0x58
 8003d20:	f000 fe1a 	bl	8004958 <pvPortMalloc>
 8003d24:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	631a      	str	r2, [r3, #48]	; 0x30
 8003d32:	e005      	b.n	8003d40 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003d34:	6978      	ldr	r0, [r7, #20]
 8003d36:	f000 fedd 	bl	8004af4 <vPortFree>
 8003d3a:	e001      	b.n	8003d40 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d013      	beq.n	8003d6e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d46:	88fa      	ldrh	r2, [r7, #6]
 8003d48:	2300      	movs	r3, #0
 8003d4a:	9303      	str	r3, [sp, #12]
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	9302      	str	r3, [sp, #8]
 8003d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d52:	9301      	str	r3, [sp, #4]
 8003d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	68b9      	ldr	r1, [r7, #8]
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 f80f 	bl	8003d80 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003d62:	69f8      	ldr	r0, [r7, #28]
 8003d64:	f000 f89e 	bl	8003ea4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	61bb      	str	r3, [r7, #24]
 8003d6c:	e002      	b.n	8003d74 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d72:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003d74:	69bb      	ldr	r3, [r7, #24]
    }
 8003d76:	4618      	mov	r0, r3
 8003d78:	3720      	adds	r7, #32
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
	...

08003d80 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	461a      	mov	r2, r3
 8003d98:	21a5      	movs	r1, #165	; 0xa5
 8003d9a:	f003 f90f 	bl	8006fbc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003da8:	440b      	add	r3, r1
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f023 0307 	bic.w	r3, r3, #7
 8003db6:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d004      	beq.n	8003dcc <prvInitialiseNewTask+0x4c>
 8003dc2:	4937      	ldr	r1, [pc, #220]	; (8003ea0 <prvInitialiseNewTask+0x120>)
 8003dc4:	f240 306b 	movw	r0, #875	; 0x36b
 8003dc8:	f7fd f9e4 	bl	8001194 <vAssertCalled>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d01f      	beq.n	8003e12 <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	e012      	b.n	8003dfe <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	4413      	add	r3, r2
 8003dde:	7819      	ldrb	r1, [r3, #0]
 8003de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	4413      	add	r3, r2
 8003de6:	3334      	adds	r3, #52	; 0x34
 8003de8:	460a      	mov	r2, r1
 8003dea:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	4413      	add	r3, r2
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d006      	beq.n	8003e06 <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	617b      	str	r3, [r7, #20]
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2b09      	cmp	r3, #9
 8003e02:	d9e9      	bls.n	8003dd8 <prvInitialiseNewTask+0x58>
 8003e04:	e000      	b.n	8003e08 <prvInitialiseNewTask+0x88>
            {
                break;
 8003e06:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e10:	e003      	b.n	8003e1a <prvInitialiseNewTask+0x9a>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d901      	bls.n	8003e24 <prvInitialiseNewTask+0xa4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e20:	2304      	movs	r3, #4
 8003e22:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e26:	6a3a      	ldr	r2, [r7, #32]
 8003e28:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2c:	6a3a      	ldr	r2, [r7, #32]
 8003e2e:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e32:	2200      	movs	r2, #0
 8003e34:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e38:	3304      	adds	r3, #4
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff ff03 	bl	8003c46 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e42:	3318      	adds	r3, #24
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff fefe 	bl	8003c46 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e4e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	f1c3 0205 	rsb	r2, r3, #5
 8003e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e58:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e5e:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e62:	3350      	adds	r3, #80	; 0x50
 8003e64:	2204      	movs	r2, #4
 8003e66:	2100      	movs	r1, #0
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f003 f8a7 	bl	8006fbc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e70:	3354      	adds	r3, #84	; 0x54
 8003e72:	2201      	movs	r2, #1
 8003e74:	2100      	movs	r1, #0
 8003e76:	4618      	mov	r0, r3
 8003e78:	f003 f8a0 	bl	8006fbc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	68f9      	ldr	r1, [r7, #12]
 8003e80:	6938      	ldr	r0, [r7, #16]
 8003e82:	f000 fb3d 	bl	8004500 <pxPortInitialiseStack>
 8003e86:	4602      	mov	r2, r0
 8003e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e96:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e98:	bf00      	nop
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	080078e8 	.word	0x080078e8

08003ea4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003ea4:	b5b0      	push	{r4, r5, r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af02      	add	r7, sp, #8
 8003eaa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003eac:	f000 fc3a 	bl	8004724 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003eb0:	4b35      	ldr	r3, [pc, #212]	; (8003f88 <prvAddNewTaskToReadyList+0xe4>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	4a34      	ldr	r2, [pc, #208]	; (8003f88 <prvAddNewTaskToReadyList+0xe4>)
 8003eb8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003eba:	4b34      	ldr	r3, [pc, #208]	; (8003f8c <prvAddNewTaskToReadyList+0xe8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d109      	bne.n	8003ed6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003ec2:	4a32      	ldr	r2, [pc, #200]	; (8003f8c <prvAddNewTaskToReadyList+0xe8>)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ec8:	4b2f      	ldr	r3, [pc, #188]	; (8003f88 <prvAddNewTaskToReadyList+0xe4>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d110      	bne.n	8003ef2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003ed0:	f000 fa7c 	bl	80043cc <prvInitialiseTaskLists>
 8003ed4:	e00d      	b.n	8003ef2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003ed6:	4b2e      	ldr	r3, [pc, #184]	; (8003f90 <prvAddNewTaskToReadyList+0xec>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d109      	bne.n	8003ef2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ede:	4b2b      	ldr	r3, [pc, #172]	; (8003f8c <prvAddNewTaskToReadyList+0xe8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d802      	bhi.n	8003ef2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003eec:	4a27      	ldr	r2, [pc, #156]	; (8003f8c <prvAddNewTaskToReadyList+0xe8>)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003ef2:	4b28      	ldr	r3, [pc, #160]	; (8003f94 <prvAddNewTaskToReadyList+0xf0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	4a26      	ldr	r2, [pc, #152]	; (8003f94 <prvAddNewTaskToReadyList+0xf0>)
 8003efa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003efc:	4b25      	ldr	r3, [pc, #148]	; (8003f94 <prvAddNewTaskToReadyList+0xf0>)
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d016      	beq.n	8003f38 <prvAddNewTaskToReadyList+0x94>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f002 fdd5 	bl	8006abc <SEGGER_SYSVIEW_OnTaskCreate>
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	461d      	mov	r5, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	461c      	mov	r4, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	1ae3      	subs	r3, r4, r3
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	462b      	mov	r3, r5
 8003f34:	f000 ff9a 	bl	8004e6c <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f002 fe42 	bl	8006bc4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f44:	2201      	movs	r2, #1
 8003f46:	409a      	lsls	r2, r3
 8003f48:	4b13      	ldr	r3, [pc, #76]	; (8003f98 <prvAddNewTaskToReadyList+0xf4>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	4a12      	ldr	r2, [pc, #72]	; (8003f98 <prvAddNewTaskToReadyList+0xf4>)
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f56:	4613      	mov	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4a0f      	ldr	r2, [pc, #60]	; (8003f9c <prvAddNewTaskToReadyList+0xf8>)
 8003f60:	441a      	add	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3304      	adds	r3, #4
 8003f66:	4619      	mov	r1, r3
 8003f68:	4610      	mov	r0, r2
 8003f6a:	f7ff fe79 	bl	8003c60 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003f6e:	f000 fc05 	bl	800477c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003f72:	4b07      	ldr	r3, [pc, #28]	; (8003f90 <prvAddNewTaskToReadyList+0xec>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f7a:	4b04      	ldr	r3, [pc, #16]	; (8003f8c <prvAddNewTaskToReadyList+0xe8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bdb0      	pop	{r4, r5, r7, pc}
 8003f86:	bf00      	nop
 8003f88:	2000017c 	.word	0x2000017c
 8003f8c:	200000a4 	.word	0x200000a4
 8003f90:	20000188 	.word	0x20000188
 8003f94:	20000198 	.word	0x20000198
 8003f98:	20000184 	.word	0x20000184
 8003f9c:	200000a8 	.word	0x200000a8

08003fa0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003fa6:	4b22      	ldr	r3, [pc, #136]	; (8004030 <vTaskStartScheduler+0x90>)
 8003fa8:	9301      	str	r3, [sp, #4]
 8003faa:	2300      	movs	r3, #0
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	2282      	movs	r2, #130	; 0x82
 8003fb2:	4920      	ldr	r1, [pc, #128]	; (8004034 <vTaskStartScheduler+0x94>)
 8003fb4:	4820      	ldr	r0, [pc, #128]	; (8004038 <vTaskStartScheduler+0x98>)
 8003fb6:	f7ff fea1 	bl	8003cfc <xTaskCreate>
 8003fba:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d126      	bne.n	8004010 <vTaskStartScheduler+0x70>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003fc2:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003fc6:	b672      	cpsid	i
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	b662      	cpsie	i
 8003fd6:	603b      	str	r3, [r7, #0]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003fd8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003fda:	4b18      	ldr	r3, [pc, #96]	; (800403c <vTaskStartScheduler+0x9c>)
 8003fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fe0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003fe2:	4b17      	ldr	r3, [pc, #92]	; (8004040 <vTaskStartScheduler+0xa0>)
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003fe8:	4b16      	ldr	r3, [pc, #88]	; (8004044 <vTaskStartScheduler+0xa4>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003fee:	4b16      	ldr	r3, [pc, #88]	; (8004048 <vTaskStartScheduler+0xa8>)
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	4b0f      	ldr	r3, [pc, #60]	; (8004030 <vTaskStartScheduler+0x90>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d102      	bne.n	8004000 <vTaskStartScheduler+0x60>
 8003ffa:	f002 fd43 	bl	8006a84 <SEGGER_SYSVIEW_OnIdle>
 8003ffe:	e004      	b.n	800400a <vTaskStartScheduler+0x6a>
 8004000:	4b11      	ldr	r3, [pc, #68]	; (8004048 <vTaskStartScheduler+0xa8>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f002 fd9b 	bl	8006b40 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800400a:	f000 fb5f 	bl	80046cc <xPortStartScheduler>
 800400e:	e008      	b.n	8004022 <vTaskStartScheduler+0x82>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004016:	d104      	bne.n	8004022 <vTaskStartScheduler+0x82>
 8004018:	490c      	ldr	r1, [pc, #48]	; (800404c <vTaskStartScheduler+0xac>)
 800401a:	f640 0045 	movw	r0, #2117	; 0x845
 800401e:	f7fd f8b9 	bl	8001194 <vAssertCalled>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004022:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <vTaskStartScheduler+0xb0>)
 8004024:	681b      	ldr	r3, [r3, #0]
}
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	200001a0 	.word	0x200001a0
 8004034:	08007908 	.word	0x08007908
 8004038:	080043a9 	.word	0x080043a9
 800403c:	2000019c 	.word	0x2000019c
 8004040:	20000188 	.word	0x20000188
 8004044:	20000180 	.word	0x20000180
 8004048:	200000a4 	.word	0x200000a4
 800404c:	080078e8 	.word	0x080078e8
 8004050:	20000014 	.word	0x20000014

08004054 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004058:	4b04      	ldr	r3, [pc, #16]	; (800406c <vTaskSuspendAll+0x18>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3301      	adds	r3, #1
 800405e:	4a03      	ldr	r2, [pc, #12]	; (800406c <vTaskSuspendAll+0x18>)
 8004060:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004062:	bf00      	nop
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	200001a4 	.word	0x200001a4

08004070 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800407a:	2300      	movs	r3, #0
 800407c:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800407e:	4b3a      	ldr	r3, [pc, #232]	; (8004168 <xTaskResumeAll+0xf8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d104      	bne.n	8004090 <xTaskResumeAll+0x20>
 8004086:	4939      	ldr	r1, [pc, #228]	; (800416c <xTaskResumeAll+0xfc>)
 8004088:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800408c:	f7fd f882 	bl	8001194 <vAssertCalled>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004090:	f000 fb48 	bl	8004724 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004094:	4b34      	ldr	r3, [pc, #208]	; (8004168 <xTaskResumeAll+0xf8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3b01      	subs	r3, #1
 800409a:	4a33      	ldr	r2, [pc, #204]	; (8004168 <xTaskResumeAll+0xf8>)
 800409c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800409e:	4b32      	ldr	r3, [pc, #200]	; (8004168 <xTaskResumeAll+0xf8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d159      	bne.n	800415a <xTaskResumeAll+0xea>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040a6:	4b32      	ldr	r3, [pc, #200]	; (8004170 <xTaskResumeAll+0x100>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d055      	beq.n	800415a <xTaskResumeAll+0xea>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040ae:	e032      	b.n	8004116 <xTaskResumeAll+0xa6>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040b0:	4b30      	ldr	r3, [pc, #192]	; (8004174 <xTaskResumeAll+0x104>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	3318      	adds	r3, #24
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff fdf3 	bl	8003ca8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	3304      	adds	r3, #4
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff fdee 	bl	8003ca8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f002 fd78 	bl	8006bc4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	2201      	movs	r2, #1
 80040da:	409a      	lsls	r2, r3
 80040dc:	4b26      	ldr	r3, [pc, #152]	; (8004178 <xTaskResumeAll+0x108>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	4a25      	ldr	r2, [pc, #148]	; (8004178 <xTaskResumeAll+0x108>)
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ea:	4613      	mov	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4413      	add	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4a22      	ldr	r2, [pc, #136]	; (800417c <xTaskResumeAll+0x10c>)
 80040f4:	441a      	add	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	3304      	adds	r3, #4
 80040fa:	4619      	mov	r1, r3
 80040fc:	4610      	mov	r0, r2
 80040fe:	f7ff fdaf 	bl	8003c60 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004106:	4b1e      	ldr	r3, [pc, #120]	; (8004180 <xTaskResumeAll+0x110>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	429a      	cmp	r2, r3
 800410e:	d302      	bcc.n	8004116 <xTaskResumeAll+0xa6>
                    {
                        xYieldPending = pdTRUE;
 8004110:	4b1c      	ldr	r3, [pc, #112]	; (8004184 <xTaskResumeAll+0x114>)
 8004112:	2201      	movs	r2, #1
 8004114:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004116:	4b17      	ldr	r3, [pc, #92]	; (8004174 <xTaskResumeAll+0x104>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1c8      	bne.n	80040b0 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <xTaskResumeAll+0xb8>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004124:	f000 f9d0 	bl	80044c8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004128:	4b17      	ldr	r3, [pc, #92]	; (8004188 <xTaskResumeAll+0x118>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d010      	beq.n	8004156 <xTaskResumeAll+0xe6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004134:	f000 f83c 	bl	80041b0 <xTaskIncrementTick>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <xTaskResumeAll+0xd4>
                            {
                                xYieldPending = pdTRUE;
 800413e:	4b11      	ldr	r3, [pc, #68]	; (8004184 <xTaskResumeAll+0x114>)
 8004140:	2201      	movs	r2, #1
 8004142:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	3b01      	subs	r3, #1
 8004148:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1f1      	bne.n	8004134 <xTaskResumeAll+0xc4>

                        xPendedTicks = 0;
 8004150:	4b0d      	ldr	r3, [pc, #52]	; (8004188 <xTaskResumeAll+0x118>)
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004156:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <xTaskResumeAll+0x114>)
 8004158:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800415a:	f000 fb0f 	bl	800477c <vPortExitCritical>

    return xAlreadyYielded;
 800415e:	687b      	ldr	r3, [r7, #4]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	200001a4 	.word	0x200001a4
 800416c:	080078e8 	.word	0x080078e8
 8004170:	2000017c 	.word	0x2000017c
 8004174:	2000013c 	.word	0x2000013c
 8004178:	20000184 	.word	0x20000184
 800417c:	200000a8 	.word	0x200000a8
 8004180:	200000a4 	.word	0x200000a4
 8004184:	20000190 	.word	0x20000190
 8004188:	2000018c 	.word	0x2000018c

0800418c <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004192:	f000 fbad 	bl	80048f0 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004196:	2300      	movs	r3, #0
 8004198:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800419a:	4b04      	ldr	r3, [pc, #16]	; (80041ac <xTaskGetTickCountFromISR+0x20>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80041a0:	683b      	ldr	r3, [r7, #0]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	20000180 	.word	0x20000180

080041b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041ba:	4b3e      	ldr	r3, [pc, #248]	; (80042b4 <xTaskIncrementTick+0x104>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d16d      	bne.n	800429e <xTaskIncrementTick+0xee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041c2:	4b3d      	ldr	r3, [pc, #244]	; (80042b8 <xTaskIncrementTick+0x108>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	3301      	adds	r3, #1
 80041c8:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80041ca:	4a3b      	ldr	r2, [pc, #236]	; (80042b8 <xTaskIncrementTick+0x108>)
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d11a      	bne.n	800420c <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 80041d6:	4b39      	ldr	r3, [pc, #228]	; (80042bc <xTaskIncrementTick+0x10c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d004      	beq.n	80041ea <xTaskIncrementTick+0x3a>
 80041e0:	4937      	ldr	r1, [pc, #220]	; (80042c0 <xTaskIncrementTick+0x110>)
 80041e2:	f640 20cb 	movw	r0, #2763	; 0xacb
 80041e6:	f7fc ffd5 	bl	8001194 <vAssertCalled>
 80041ea:	4b34      	ldr	r3, [pc, #208]	; (80042bc <xTaskIncrementTick+0x10c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	4b34      	ldr	r3, [pc, #208]	; (80042c4 <xTaskIncrementTick+0x114>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a31      	ldr	r2, [pc, #196]	; (80042bc <xTaskIncrementTick+0x10c>)
 80041f6:	6013      	str	r3, [r2, #0]
 80041f8:	4a32      	ldr	r2, [pc, #200]	; (80042c4 <xTaskIncrementTick+0x114>)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	4b32      	ldr	r3, [pc, #200]	; (80042c8 <xTaskIncrementTick+0x118>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	3301      	adds	r3, #1
 8004204:	4a30      	ldr	r2, [pc, #192]	; (80042c8 <xTaskIncrementTick+0x118>)
 8004206:	6013      	str	r3, [r2, #0]
 8004208:	f000 f95e 	bl	80044c8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800420c:	4b2f      	ldr	r3, [pc, #188]	; (80042cc <xTaskIncrementTick+0x11c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	429a      	cmp	r2, r3
 8004214:	d348      	bcc.n	80042a8 <xTaskIncrementTick+0xf8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004216:	4b29      	ldr	r3, [pc, #164]	; (80042bc <xTaskIncrementTick+0x10c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d104      	bne.n	800422a <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004220:	4b2a      	ldr	r3, [pc, #168]	; (80042cc <xTaskIncrementTick+0x11c>)
 8004222:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004226:	601a      	str	r2, [r3, #0]
                    break;
 8004228:	e03e      	b.n	80042a8 <xTaskIncrementTick+0xf8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800422a:	4b24      	ldr	r3, [pc, #144]	; (80042bc <xTaskIncrementTick+0x10c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	429a      	cmp	r2, r3
 8004240:	d203      	bcs.n	800424a <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004242:	4a22      	ldr	r2, [pc, #136]	; (80042cc <xTaskIncrementTick+0x11c>)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004248:	e02e      	b.n	80042a8 <xTaskIncrementTick+0xf8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	3304      	adds	r3, #4
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff fd2a 	bl	8003ca8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004258:	2b00      	cmp	r3, #0
 800425a:	d004      	beq.n	8004266 <xTaskIncrementTick+0xb6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	3318      	adds	r3, #24
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff fd21 	bl	8003ca8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	4618      	mov	r0, r3
 800426a:	f002 fcab 	bl	8006bc4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004272:	2201      	movs	r2, #1
 8004274:	409a      	lsls	r2, r3
 8004276:	4b16      	ldr	r3, [pc, #88]	; (80042d0 <xTaskIncrementTick+0x120>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4313      	orrs	r3, r2
 800427c:	4a14      	ldr	r2, [pc, #80]	; (80042d0 <xTaskIncrementTick+0x120>)
 800427e:	6013      	str	r3, [r2, #0]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4a11      	ldr	r2, [pc, #68]	; (80042d4 <xTaskIncrementTick+0x124>)
 800428e:	441a      	add	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	3304      	adds	r3, #4
 8004294:	4619      	mov	r1, r3
 8004296:	4610      	mov	r0, r2
 8004298:	f7ff fce2 	bl	8003c60 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800429c:	e7bb      	b.n	8004216 <xTaskIncrementTick+0x66>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800429e:	4b0e      	ldr	r3, [pc, #56]	; (80042d8 <xTaskIncrementTick+0x128>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3301      	adds	r3, #1
 80042a4:	4a0c      	ldr	r2, [pc, #48]	; (80042d8 <xTaskIncrementTick+0x128>)
 80042a6:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80042a8:	697b      	ldr	r3, [r7, #20]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	200001a4 	.word	0x200001a4
 80042b8:	20000180 	.word	0x20000180
 80042bc:	20000134 	.word	0x20000134
 80042c0:	080078e8 	.word	0x080078e8
 80042c4:	20000138 	.word	0x20000138
 80042c8:	20000194 	.word	0x20000194
 80042cc:	2000019c 	.word	0x2000019c
 80042d0:	20000184 	.word	0x20000184
 80042d4:	200000a8 	.word	0x200000a8
 80042d8:	2000018c 	.word	0x2000018c

080042dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042e2:	4b2a      	ldr	r3, [pc, #168]	; (800438c <vTaskSwitchContext+0xb0>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80042ea:	4b29      	ldr	r3, [pc, #164]	; (8004390 <vTaskSwitchContext+0xb4>)
 80042ec:	2201      	movs	r2, #1
 80042ee:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80042f0:	e047      	b.n	8004382 <vTaskSwitchContext+0xa6>
        xYieldPending = pdFALSE;
 80042f2:	4b27      	ldr	r3, [pc, #156]	; (8004390 <vTaskSwitchContext+0xb4>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042f8:	4b26      	ldr	r3, [pc, #152]	; (8004394 <vTaskSwitchContext+0xb8>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	fab3 f383 	clz	r3, r3
 8004304:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8004306:	78fb      	ldrb	r3, [r7, #3]
 8004308:	f1c3 031f 	rsb	r3, r3, #31
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	4922      	ldr	r1, [pc, #136]	; (8004398 <vTaskSwitchContext+0xbc>)
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d104      	bne.n	800432c <vTaskSwitchContext+0x50>
 8004322:	491e      	ldr	r1, [pc, #120]	; (800439c <vTaskSwitchContext+0xc0>)
 8004324:	f640 4006 	movw	r0, #3078	; 0xc06
 8004328:	f7fc ff34 	bl	8001194 <vAssertCalled>
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4613      	mov	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4a18      	ldr	r2, [pc, #96]	; (8004398 <vTaskSwitchContext+0xbc>)
 8004338:	4413      	add	r3, r2
 800433a:	60bb      	str	r3, [r7, #8]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	605a      	str	r2, [r3, #4]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	3308      	adds	r3, #8
 800434e:	429a      	cmp	r2, r3
 8004350:	d104      	bne.n	800435c <vTaskSwitchContext+0x80>
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	605a      	str	r2, [r3, #4]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	4a0f      	ldr	r2, [pc, #60]	; (80043a0 <vTaskSwitchContext+0xc4>)
 8004364:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8004366:	4b0e      	ldr	r3, [pc, #56]	; (80043a0 <vTaskSwitchContext+0xc4>)
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	4b0e      	ldr	r3, [pc, #56]	; (80043a4 <vTaskSwitchContext+0xc8>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d102      	bne.n	8004378 <vTaskSwitchContext+0x9c>
 8004372:	f002 fb87 	bl	8006a84 <SEGGER_SYSVIEW_OnIdle>
}
 8004376:	e004      	b.n	8004382 <vTaskSwitchContext+0xa6>
        traceTASK_SWITCHED_IN();
 8004378:	4b09      	ldr	r3, [pc, #36]	; (80043a0 <vTaskSwitchContext+0xc4>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	f002 fbdf 	bl	8006b40 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8004382:	bf00      	nop
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	200001a4 	.word	0x200001a4
 8004390:	20000190 	.word	0x20000190
 8004394:	20000184 	.word	0x20000184
 8004398:	200000a8 	.word	0x200000a8
 800439c:	080078e8 	.word	0x080078e8
 80043a0:	200000a4 	.word	0x200000a4
 80043a4:	200001a0 	.word	0x200001a0

080043a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80043b0:	f000 f84c 	bl	800444c <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 80043b4:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <prvIdleTask+0x20>)
 80043b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80043c4:	e7f4      	b.n	80043b0 <prvIdleTask+0x8>
 80043c6:	bf00      	nop
 80043c8:	e000ed04 	.word	0xe000ed04

080043cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043d2:	2300      	movs	r3, #0
 80043d4:	607b      	str	r3, [r7, #4]
 80043d6:	e00c      	b.n	80043f2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	4613      	mov	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4a12      	ldr	r2, [pc, #72]	; (800442c <prvInitialiseTaskLists+0x60>)
 80043e4:	4413      	add	r3, r2
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff fc0d 	bl	8003c06 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3301      	adds	r3, #1
 80043f0:	607b      	str	r3, [r7, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b04      	cmp	r3, #4
 80043f6:	d9ef      	bls.n	80043d8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80043f8:	480d      	ldr	r0, [pc, #52]	; (8004430 <prvInitialiseTaskLists+0x64>)
 80043fa:	f7ff fc04 	bl	8003c06 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80043fe:	480d      	ldr	r0, [pc, #52]	; (8004434 <prvInitialiseTaskLists+0x68>)
 8004400:	f7ff fc01 	bl	8003c06 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004404:	480c      	ldr	r0, [pc, #48]	; (8004438 <prvInitialiseTaskLists+0x6c>)
 8004406:	f7ff fbfe 	bl	8003c06 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800440a:	480c      	ldr	r0, [pc, #48]	; (800443c <prvInitialiseTaskLists+0x70>)
 800440c:	f7ff fbfb 	bl	8003c06 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004410:	480b      	ldr	r0, [pc, #44]	; (8004440 <prvInitialiseTaskLists+0x74>)
 8004412:	f7ff fbf8 	bl	8003c06 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004416:	4b0b      	ldr	r3, [pc, #44]	; (8004444 <prvInitialiseTaskLists+0x78>)
 8004418:	4a05      	ldr	r2, [pc, #20]	; (8004430 <prvInitialiseTaskLists+0x64>)
 800441a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800441c:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <prvInitialiseTaskLists+0x7c>)
 800441e:	4a05      	ldr	r2, [pc, #20]	; (8004434 <prvInitialiseTaskLists+0x68>)
 8004420:	601a      	str	r2, [r3, #0]
}
 8004422:	bf00      	nop
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	200000a8 	.word	0x200000a8
 8004430:	2000010c 	.word	0x2000010c
 8004434:	20000120 	.word	0x20000120
 8004438:	2000013c 	.word	0x2000013c
 800443c:	20000150 	.word	0x20000150
 8004440:	20000168 	.word	0x20000168
 8004444:	20000134 	.word	0x20000134
 8004448:	20000138 	.word	0x20000138

0800444c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004452:	e019      	b.n	8004488 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004454:	f000 f966 	bl	8004724 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004458:	4b10      	ldr	r3, [pc, #64]	; (800449c <prvCheckTasksWaitingTermination+0x50>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3304      	adds	r3, #4
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff fc1f 	bl	8003ca8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800446a:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <prvCheckTasksWaitingTermination+0x54>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	3b01      	subs	r3, #1
 8004470:	4a0b      	ldr	r2, [pc, #44]	; (80044a0 <prvCheckTasksWaitingTermination+0x54>)
 8004472:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004474:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <prvCheckTasksWaitingTermination+0x58>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3b01      	subs	r3, #1
 800447a:	4a0a      	ldr	r2, [pc, #40]	; (80044a4 <prvCheckTasksWaitingTermination+0x58>)
 800447c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800447e:	f000 f97d 	bl	800477c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f810 	bl	80044a8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004488:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <prvCheckTasksWaitingTermination+0x58>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e1      	bne.n	8004454 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004490:	bf00      	nop
 8004492:	bf00      	nop
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	20000150 	.word	0x20000150
 80044a0:	2000017c 	.word	0x2000017c
 80044a4:	20000164 	.word	0x20000164

080044a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 fb1d 	bl	8004af4 <vPortFree>
                vPortFree( pxTCB );
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fb1a 	bl	8004af4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80044c0:	bf00      	nop
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044cc:	4b0a      	ldr	r3, [pc, #40]	; (80044f8 <prvResetNextTaskUnblockTime+0x30>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d104      	bne.n	80044e0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80044d6:	4b09      	ldr	r3, [pc, #36]	; (80044fc <prvResetNextTaskUnblockTime+0x34>)
 80044d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044dc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80044de:	e005      	b.n	80044ec <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80044e0:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <prvResetNextTaskUnblockTime+0x30>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a04      	ldr	r2, [pc, #16]	; (80044fc <prvResetNextTaskUnblockTime+0x34>)
 80044ea:	6013      	str	r3, [r2, #0]
}
 80044ec:	bf00      	nop
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	20000134 	.word	0x20000134
 80044fc:	2000019c 	.word	0x2000019c

08004500 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	3b04      	subs	r3, #4
 8004510:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004518:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	3b04      	subs	r3, #4
 800451e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f023 0201 	bic.w	r2, r3, #1
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	3b04      	subs	r3, #4
 800452e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004530:	4a0c      	ldr	r2, [pc, #48]	; (8004564 <pxPortInitialiseStack+0x64>)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	3b14      	subs	r3, #20
 800453a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	3b04      	subs	r3, #4
 8004546:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f06f 0202 	mvn.w	r2, #2
 800454e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	3b20      	subs	r3, #32
 8004554:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004556:	68fb      	ldr	r3, [r7, #12]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3714      	adds	r7, #20
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	08004569 	.word	0x08004569

08004568 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800456e:	2300      	movs	r3, #0
 8004570:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004572:	4b0f      	ldr	r3, [pc, #60]	; (80045b0 <prvTaskExitError+0x48>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800457a:	d003      	beq.n	8004584 <prvTaskExitError+0x1c>
 800457c:	490d      	ldr	r1, [pc, #52]	; (80045b4 <prvTaskExitError+0x4c>)
 800457e:	20df      	movs	r0, #223	; 0xdf
 8004580:	f7fc fe08 	bl	8001194 <vAssertCalled>
        __asm volatile
 8004584:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004588:	b672      	cpsid	i
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	b662      	cpsie	i
 8004598:	607b      	str	r3, [r7, #4]
    }
 800459a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800459c:	bf00      	nop
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0fc      	beq.n	800459e <prvTaskExitError+0x36>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20000018 	.word	0x20000018
 80045b4:	08007920 	.word	0x08007920
	...

080045c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80045c0:	4b07      	ldr	r3, [pc, #28]	; (80045e0 <pxCurrentTCBConst2>)
 80045c2:	6819      	ldr	r1, [r3, #0]
 80045c4:	6808      	ldr	r0, [r1, #0]
 80045c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ca:	f380 8809 	msr	PSP, r0
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f04f 0000 	mov.w	r0, #0
 80045d6:	f380 8811 	msr	BASEPRI, r0
 80045da:	4770      	bx	lr
 80045dc:	f3af 8000 	nop.w

080045e0 <pxCurrentTCBConst2>:
 80045e0:	200000a4 	.word	0x200000a4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop

080045e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80045e8:	4808      	ldr	r0, [pc, #32]	; (800460c <prvPortStartFirstTask+0x24>)
 80045ea:	6800      	ldr	r0, [r0, #0]
 80045ec:	6800      	ldr	r0, [r0, #0]
 80045ee:	f380 8808 	msr	MSP, r0
 80045f2:	f04f 0000 	mov.w	r0, #0
 80045f6:	f380 8814 	msr	CONTROL, r0
 80045fa:	b662      	cpsie	i
 80045fc:	b661      	cpsie	f
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	df00      	svc	0
 8004608:	bf00      	nop
 800460a:	0000      	.short	0x0000
 800460c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004610:	bf00      	nop
 8004612:	bf00      	nop

08004614 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/

void vInitPrioGroupValue(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if ( configASSERT_DEFINED == 1 )
		{
			volatile uint32_t ulOriginalPriority;
			volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800461a:	4b28      	ldr	r3, [pc, #160]	; (80046bc <vInitPrioGroupValue+0xa8>)
 800461c:	60fb      	str	r3, [r7, #12]
			 * functions can be called.  ISR safe functions are those that end in
			 * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
			 * ensure interrupt entry is as fast and simple as possible.
			 *
			 * Save the interrupt priority value that is about to be clobbered. */
			ulOriginalPriority = *pucFirstUserPriorityRegister;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	b2db      	uxtb	r3, r3
 8004624:	60bb      	str	r3, [r7, #8]

			/* Determine the number of priority bits available.  First write to all
			 * possible bits. */
			*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	22ff      	movs	r2, #255	; 0xff
 800462a:	701a      	strb	r2, [r3, #0]

			/* Read the value back to see how many bits stuck. */
			ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	b2db      	uxtb	r3, r3
 8004632:	71fb      	strb	r3, [r7, #7]

			/* Use the same mask on the maximum system call priority. */
			ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004634:	79fb      	ldrb	r3, [r7, #7]
 8004636:	b2db      	uxtb	r3, r3
 8004638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463c:	b2da      	uxtb	r2, r3
 800463e:	4b20      	ldr	r3, [pc, #128]	; (80046c0 <vInitPrioGroupValue+0xac>)
 8004640:	701a      	strb	r2, [r3, #0]

			/* Calculate the maximum acceptable priority group value for the number
			 * of bits read back. */
			ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004642:	4b20      	ldr	r3, [pc, #128]	; (80046c4 <vInitPrioGroupValue+0xb0>)
 8004644:	2207      	movs	r2, #7
 8004646:	601a      	str	r2, [r3, #0]

			while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004648:	e009      	b.n	800465e <vInitPrioGroupValue+0x4a>
			{
				ulMaxPRIGROUPValue--;
 800464a:	4b1e      	ldr	r3, [pc, #120]	; (80046c4 <vInitPrioGroupValue+0xb0>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3b01      	subs	r3, #1
 8004650:	4a1c      	ldr	r2, [pc, #112]	; (80046c4 <vInitPrioGroupValue+0xb0>)
 8004652:	6013      	str	r3, [r2, #0]
				ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004654:	79fb      	ldrb	r3, [r7, #7]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	b2db      	uxtb	r3, r3
 800465c:	71fb      	strb	r3, [r7, #7]
			while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800465e:	79fb      	ldrb	r3, [r7, #7]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004666:	2b80      	cmp	r3, #128	; 0x80
 8004668:	d0ef      	beq.n	800464a <vInitPrioGroupValue+0x36>
			#ifdef __NVIC_PRIO_BITS
				{
					/* Check the CMSIS configuration that defines the number of
					 * priority bits matches the number of priority bits actually queried
					 * from the hardware. */
					configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800466a:	4b16      	ldr	r3, [pc, #88]	; (80046c4 <vInitPrioGroupValue+0xb0>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f1c3 0307 	rsb	r3, r3, #7
 8004672:	2b04      	cmp	r3, #4
 8004674:	d004      	beq.n	8004680 <vInitPrioGroupValue+0x6c>
 8004676:	4914      	ldr	r1, [pc, #80]	; (80046c8 <vInitPrioGroupValue+0xb4>)
 8004678:	f240 1047 	movw	r0, #327	; 0x147
 800467c:	f7fc fd8a 	bl	8001194 <vAssertCalled>
			#ifdef configPRIO_BITS
				{
					/* Check the FreeRTOS configuration that defines the number of
					 * priority bits matches the number of priority bits actually queried
					 * from the hardware. */
					configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004680:	4b10      	ldr	r3, [pc, #64]	; (80046c4 <vInitPrioGroupValue+0xb0>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f1c3 0307 	rsb	r3, r3, #7
 8004688:	2b04      	cmp	r3, #4
 800468a:	d004      	beq.n	8004696 <vInitPrioGroupValue+0x82>
 800468c:	490e      	ldr	r1, [pc, #56]	; (80046c8 <vInitPrioGroupValue+0xb4>)
 800468e:	f44f 70a8 	mov.w	r0, #336	; 0x150
 8004692:	f7fc fd7f 	bl	8001194 <vAssertCalled>
				}
			#endif

			/* Shift the priority group value back to its position within the AIRCR
			 * register. */
			ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004696:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <vInitPrioGroupValue+0xb0>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	021b      	lsls	r3, r3, #8
 800469c:	4a09      	ldr	r2, [pc, #36]	; (80046c4 <vInitPrioGroupValue+0xb0>)
 800469e:	6013      	str	r3, [r2, #0]
			ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046a0:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <vInitPrioGroupValue+0xb0>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046a8:	4a06      	ldr	r2, [pc, #24]	; (80046c4 <vInitPrioGroupValue+0xb0>)
 80046aa:	6013      	str	r3, [r2, #0]

			/* Restore the clobbered interrupt priority register to its original
			 * value. */
			*pucFirstUserPriorityRegister = ulOriginalPriority;
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	701a      	strb	r2, [r3, #0]
		}
	#endif /* conifgASSERT_DEFINED */
}
 80046b4:	bf00      	nop
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	e000e400 	.word	0xe000e400
 80046c0:	200001a8 	.word	0x200001a8
 80046c4:	200001ac 	.word	0x200001ac
 80046c8:	08007920 	.word	0x08007920

080046cc <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
	vInitPrioGroupValue();
 80046d0:	f7ff ffa0 	bl	8004614 <vInitPrioGroupValue>

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80046d4:	4b10      	ldr	r3, [pc, #64]	; (8004718 <xPortStartScheduler+0x4c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a0f      	ldr	r2, [pc, #60]	; (8004718 <xPortStartScheduler+0x4c>)
 80046da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046de:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80046e0:	4b0d      	ldr	r3, [pc, #52]	; (8004718 <xPortStartScheduler+0x4c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a0c      	ldr	r2, [pc, #48]	; (8004718 <xPortStartScheduler+0x4c>)
 80046e6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80046ea:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80046ec:	f000 f8d0 	bl	8004890 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80046f0:	4b0a      	ldr	r3, [pc, #40]	; (800471c <xPortStartScheduler+0x50>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80046f6:	f000 f8ef 	bl	80048d8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80046fa:	4b09      	ldr	r3, [pc, #36]	; (8004720 <xPortStartScheduler+0x54>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a08      	ldr	r2, [pc, #32]	; (8004720 <xPortStartScheduler+0x54>)
 8004700:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004704:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004706:	f7ff ff6f 	bl	80045e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800470a:	f7ff fde7 	bl	80042dc <vTaskSwitchContext>
    prvTaskExitError();
 800470e:	f7ff ff2b 	bl	8004568 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	bd80      	pop	{r7, pc}
 8004718:	e000ed20 	.word	0xe000ed20
 800471c:	20000018 	.word	0x20000018
 8004720:	e000ef34 	.word	0xe000ef34

08004724 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
        __asm volatile
 800472a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800472e:	b672      	cpsid	i
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	b662      	cpsie	i
 800473e:	607b      	str	r3, [r7, #4]
    }
 8004740:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004742:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <vPortEnterCritical+0x4c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	3301      	adds	r3, #1
 8004748:	4a09      	ldr	r2, [pc, #36]	; (8004770 <vPortEnterCritical+0x4c>)
 800474a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800474c:	4b08      	ldr	r3, [pc, #32]	; (8004770 <vPortEnterCritical+0x4c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d109      	bne.n	8004768 <vPortEnterCritical+0x44>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004754:	4b07      	ldr	r3, [pc, #28]	; (8004774 <vPortEnterCritical+0x50>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d004      	beq.n	8004768 <vPortEnterCritical+0x44>
 800475e:	4906      	ldr	r1, [pc, #24]	; (8004778 <vPortEnterCritical+0x54>)
 8004760:	f240 109f 	movw	r0, #415	; 0x19f
 8004764:	f7fc fd16 	bl	8001194 <vAssertCalled>
    }
}
 8004768:	bf00      	nop
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	20000018 	.word	0x20000018
 8004774:	e000ed04 	.word	0xe000ed04
 8004778:	08007920 	.word	0x08007920

0800477c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004782:	4b0e      	ldr	r3, [pc, #56]	; (80047bc <vPortExitCritical+0x40>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d104      	bne.n	8004794 <vPortExitCritical+0x18>
 800478a:	490d      	ldr	r1, [pc, #52]	; (80047c0 <vPortExitCritical+0x44>)
 800478c:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
 8004790:	f7fc fd00 	bl	8001194 <vAssertCalled>
    uxCriticalNesting--;
 8004794:	4b09      	ldr	r3, [pc, #36]	; (80047bc <vPortExitCritical+0x40>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3b01      	subs	r3, #1
 800479a:	4a08      	ldr	r2, [pc, #32]	; (80047bc <vPortExitCritical+0x40>)
 800479c:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800479e:	4b07      	ldr	r3, [pc, #28]	; (80047bc <vPortExitCritical+0x40>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d105      	bne.n	80047b2 <vPortExitCritical+0x36>
 80047a6:	2300      	movs	r3, #0
 80047a8:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80047b0:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80047b2:	bf00      	nop
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	20000018 	.word	0x20000018
 80047c0:	08007920 	.word	0x08007920
	...

080047d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80047d0:	f3ef 8009 	mrs	r0, PSP
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	4b15      	ldr	r3, [pc, #84]	; (8004830 <pxCurrentTCBConst>)
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	f01e 0f10 	tst.w	lr, #16
 80047e0:	bf08      	it	eq
 80047e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ea:	6010      	str	r0, [r2, #0]
 80047ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047f0:	f04f 0040 	mov.w	r0, #64	; 0x40
 80047f4:	b672      	cpsid	i
 80047f6:	f380 8811 	msr	BASEPRI, r0
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	b662      	cpsie	i
 8004804:	f7ff fd6a 	bl	80042dc <vTaskSwitchContext>
 8004808:	f04f 0000 	mov.w	r0, #0
 800480c:	f380 8811 	msr	BASEPRI, r0
 8004810:	bc09      	pop	{r0, r3}
 8004812:	6819      	ldr	r1, [r3, #0]
 8004814:	6808      	ldr	r0, [r1, #0]
 8004816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800481a:	f01e 0f10 	tst.w	lr, #16
 800481e:	bf08      	it	eq
 8004820:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004824:	f380 8809 	msr	PSP, r0
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop

08004830 <pxCurrentTCBConst>:
 8004830:	200000a4 	.word	0x200000a4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004834:	bf00      	nop
 8004836:	bf00      	nop

08004838 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
        __asm volatile
 800483e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004842:	b672      	cpsid	i
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	b662      	cpsie	i
 8004852:	607b      	str	r3, [r7, #4]
    }
 8004854:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8004856:	f002 f89b 	bl	8006990 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800485a:	f7ff fca9 	bl	80041b0 <xTaskIncrementTick>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d006      	beq.n	8004872 <SysTick_Handler+0x3a>
        {
        	traceISR_EXIT_TO_SCHEDULER();
 8004864:	f002 f8f2 	bl	8006a4c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004868:	4b08      	ldr	r3, [pc, #32]	; (800488c <SysTick_Handler+0x54>)
 800486a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	e001      	b.n	8004876 <SysTick_Handler+0x3e>
        }
        else
        {
        	traceISR_EXIT();
 8004872:	f002 f8cf 	bl	8006a14 <SEGGER_SYSVIEW_RecordExitISR>
 8004876:	2300      	movs	r3, #0
 8004878:	603b      	str	r3, [r7, #0]
        __asm volatile
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	f383 8811 	msr	BASEPRI, r3
    }
 8004880:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004882:	bf00      	nop
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	e000ed04 	.word	0xe000ed04

08004890 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004894:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <vPortSetupTimerInterrupt+0x34>)
 8004896:	2200      	movs	r2, #0
 8004898:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800489a:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <vPortSetupTimerInterrupt+0x38>)
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048a0:	4b0a      	ldr	r3, [pc, #40]	; (80048cc <vPortSetupTimerInterrupt+0x3c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a0a      	ldr	r2, [pc, #40]	; (80048d0 <vPortSetupTimerInterrupt+0x40>)
 80048a6:	fba2 2303 	umull	r2, r3, r2, r3
 80048aa:	099b      	lsrs	r3, r3, #6
 80048ac:	4a09      	ldr	r2, [pc, #36]	; (80048d4 <vPortSetupTimerInterrupt+0x44>)
 80048ae:	3b01      	subs	r3, #1
 80048b0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048b2:	4b04      	ldr	r3, [pc, #16]	; (80048c4 <vPortSetupTimerInterrupt+0x34>)
 80048b4:	2207      	movs	r2, #7
 80048b6:	601a      	str	r2, [r3, #0]
}
 80048b8:	bf00      	nop
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	e000e010 	.word	0xe000e010
 80048c8:	e000e018 	.word	0xe000e018
 80048cc:	20000000 	.word	0x20000000
 80048d0:	10624dd3 	.word	0x10624dd3
 80048d4:	e000e014 	.word	0xe000e014

080048d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80048d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80048e8 <vPortEnableVFP+0x10>
 80048dc:	6801      	ldr	r1, [r0, #0]
 80048de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80048e2:	6001      	str	r1, [r0, #0]
 80048e4:	4770      	bx	lr
 80048e6:	0000      	.short	0x0000
 80048e8:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80048ec:	bf00      	nop
 80048ee:	bf00      	nop

080048f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80048f6:	f3ef 8305 	mrs	r3, IPSR
 80048fa:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b0f      	cmp	r3, #15
 8004900:	d90e      	bls.n	8004920 <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004902:	4a10      	ldr	r2, [pc, #64]	; (8004944 <vPortValidateInterruptPriority+0x54>)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4413      	add	r3, r2
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800490c:	4b0e      	ldr	r3, [pc, #56]	; (8004948 <vPortValidateInterruptPriority+0x58>)
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	78fa      	ldrb	r2, [r7, #3]
 8004912:	429a      	cmp	r2, r3
 8004914:	d204      	bcs.n	8004920 <vPortValidateInterruptPriority+0x30>
 8004916:	490d      	ldr	r1, [pc, #52]	; (800494c <vPortValidateInterruptPriority+0x5c>)
 8004918:	f240 20ff 	movw	r0, #767	; 0x2ff
 800491c:	f7fc fc3a 	bl	8001194 <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004920:	4b0b      	ldr	r3, [pc, #44]	; (8004950 <vPortValidateInterruptPriority+0x60>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004928:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <vPortValidateInterruptPriority+0x64>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	429a      	cmp	r2, r3
 800492e:	d904      	bls.n	800493a <vPortValidateInterruptPriority+0x4a>
 8004930:	4906      	ldr	r1, [pc, #24]	; (800494c <vPortValidateInterruptPriority+0x5c>)
 8004932:	f240 300f 	movw	r0, #783	; 0x30f
 8004936:	f7fc fc2d 	bl	8001194 <vAssertCalled>
    }
 800493a:	bf00      	nop
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	e000e3f0 	.word	0xe000e3f0
 8004948:	200001a8 	.word	0x200001a8
 800494c:	08007920 	.word	0x08007920
 8004950:	e000ed0c 	.word	0xe000ed0c
 8004954:	200001ac 	.word	0x200001ac

08004958 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004960:	2300      	movs	r3, #0
 8004962:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8004964:	f7ff fb76 	bl	8004054 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004968:	4b5b      	ldr	r3, [pc, #364]	; (8004ad8 <pvPortMalloc+0x180>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004970:	f000 f918 	bl	8004ba4 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004974:	4b59      	ldr	r3, [pc, #356]	; (8004adc <pvPortMalloc+0x184>)
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4013      	ands	r3, r2
 800497c:	2b00      	cmp	r3, #0
 800497e:	f040 809a 	bne.w	8004ab6 <pvPortMalloc+0x15e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d027      	beq.n	80049d8 <pvPortMalloc+0x80>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004988:	2208      	movs	r2, #8
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	429a      	cmp	r2, r3
 8004992:	d221      	bcs.n	80049d8 <pvPortMalloc+0x80>
            {
                xWantedSize += xHeapStructSize;
 8004994:	2208      	movs	r2, #8
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4413      	add	r3, r2
 800499a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d01b      	beq.n	80049de <pvPortMalloc+0x86>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f023 0307 	bic.w	r3, r3, #7
 80049ac:	3308      	adds	r3, #8
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d20e      	bcs.n	80049d2 <pvPortMalloc+0x7a>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f023 0307 	bic.w	r3, r3, #7
 80049ba:	3308      	adds	r3, #8
 80049bc:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00a      	beq.n	80049de <pvPortMalloc+0x86>
 80049c8:	4945      	ldr	r1, [pc, #276]	; (8004ae0 <pvPortMalloc+0x188>)
 80049ca:	209a      	movs	r0, #154	; 0x9a
 80049cc:	f7fc fbe2 	bl	8001194 <vAssertCalled>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049d0:	e005      	b.n	80049de <pvPortMalloc+0x86>
                    }
                    else
                    {
                        xWantedSize = 0;
 80049d2:	2300      	movs	r3, #0
 80049d4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049d6:	e002      	b.n	80049de <pvPortMalloc+0x86>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80049d8:	2300      	movs	r3, #0
 80049da:	607b      	str	r3, [r7, #4]
 80049dc:	e000      	b.n	80049e0 <pvPortMalloc+0x88>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049de:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d067      	beq.n	8004ab6 <pvPortMalloc+0x15e>
 80049e6:	4b3f      	ldr	r3, [pc, #252]	; (8004ae4 <pvPortMalloc+0x18c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d862      	bhi.n	8004ab6 <pvPortMalloc+0x15e>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80049f0:	4b3d      	ldr	r3, [pc, #244]	; (8004ae8 <pvPortMalloc+0x190>)
 80049f2:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 80049f4:	4b3c      	ldr	r3, [pc, #240]	; (8004ae8 <pvPortMalloc+0x190>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049fa:	e004      	b.n	8004a06 <pvPortMalloc+0xae>
                {
                    pxPreviousBlock = pxBlock;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d903      	bls.n	8004a18 <pvPortMalloc+0xc0>
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1f1      	bne.n	80049fc <pvPortMalloc+0xa4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004a18:	4b2f      	ldr	r3, [pc, #188]	; (8004ad8 <pvPortMalloc+0x180>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d049      	beq.n	8004ab6 <pvPortMalloc+0x15e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2208      	movs	r2, #8
 8004a28:	4413      	add	r3, r2
 8004a2a:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	1ad2      	subs	r2, r2, r3
 8004a3c:	2308      	movs	r3, #8
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d918      	bls.n	8004a76 <pvPortMalloc+0x11e>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4413      	add	r3, r2
 8004a4a:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f003 0307 	and.w	r3, r3, #7
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <pvPortMalloc+0x106>
 8004a56:	4922      	ldr	r1, [pc, #136]	; (8004ae0 <pvPortMalloc+0x188>)
 8004a58:	20cd      	movs	r0, #205	; 0xcd
 8004a5a:	f7fc fb9b 	bl	8001194 <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	1ad2      	subs	r2, r2, r3
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a70:	68b8      	ldr	r0, [r7, #8]
 8004a72:	f000 f8f9 	bl	8004c68 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a76:	4b1b      	ldr	r3, [pc, #108]	; (8004ae4 <pvPortMalloc+0x18c>)
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	4a18      	ldr	r2, [pc, #96]	; (8004ae4 <pvPortMalloc+0x18c>)
 8004a82:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a84:	4b17      	ldr	r3, [pc, #92]	; (8004ae4 <pvPortMalloc+0x18c>)
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	4b18      	ldr	r3, [pc, #96]	; (8004aec <pvPortMalloc+0x194>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d203      	bcs.n	8004a98 <pvPortMalloc+0x140>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a90:	4b14      	ldr	r3, [pc, #80]	; (8004ae4 <pvPortMalloc+0x18c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a15      	ldr	r2, [pc, #84]	; (8004aec <pvPortMalloc+0x194>)
 8004a96:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	4b0f      	ldr	r3, [pc, #60]	; (8004adc <pvPortMalloc+0x184>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004aac:	4b10      	ldr	r3, [pc, #64]	; (8004af0 <pvPortMalloc+0x198>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	4a0f      	ldr	r2, [pc, #60]	; (8004af0 <pvPortMalloc+0x198>)
 8004ab4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004ab6:	f7ff fadb 	bl	8004070 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d004      	beq.n	8004ace <pvPortMalloc+0x176>
 8004ac4:	4906      	ldr	r1, [pc, #24]	; (8004ae0 <pvPortMalloc+0x188>)
 8004ac6:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004aca:	f7fc fb63 	bl	8001194 <vAssertCalled>
    return pvReturn;
 8004ace:	68fb      	ldr	r3, [r7, #12]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3718      	adds	r7, #24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	2000b9b8 	.word	0x2000b9b8
 8004adc:	2000b9cc 	.word	0x2000b9cc
 8004ae0:	08007958 	.word	0x08007958
 8004ae4:	2000b9bc 	.word	0x2000b9bc
 8004ae8:	2000b9b0 	.word	0x2000b9b0
 8004aec:	2000b9c0 	.word	0x2000b9c0
 8004af0:	2000b9c4 	.word	0x2000b9c4

08004af4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d041      	beq.n	8004b8a <vPortFree+0x96>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004b06:	2308      	movs	r3, #8
 8004b08:	425b      	negs	r3, r3
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	4b1e      	ldr	r3, [pc, #120]	; (8004b94 <vPortFree+0xa0>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d104      	bne.n	8004b2c <vPortFree+0x38>
 8004b22:	491d      	ldr	r1, [pc, #116]	; (8004b98 <vPortFree+0xa4>)
 8004b24:	f44f 7091 	mov.w	r0, #290	; 0x122
 8004b28:	f7fc fb34 	bl	8001194 <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d004      	beq.n	8004b3e <vPortFree+0x4a>
 8004b34:	4918      	ldr	r1, [pc, #96]	; (8004b98 <vPortFree+0xa4>)
 8004b36:	f240 1023 	movw	r0, #291	; 0x123
 8004b3a:	f7fc fb2b 	bl	8001194 <vAssertCalled>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <vPortFree+0xa0>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4013      	ands	r3, r2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01e      	beq.n	8004b8a <vPortFree+0x96>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d11a      	bne.n	8004b8a <vPortFree+0x96>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	4b0e      	ldr	r3, [pc, #56]	; (8004b94 <vPortFree+0xa0>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	43db      	mvns	r3, r3
 8004b5e:	401a      	ands	r2, r3
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004b64:	f7ff fa76 	bl	8004054 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	4b0b      	ldr	r3, [pc, #44]	; (8004b9c <vPortFree+0xa8>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4413      	add	r3, r2
 8004b72:	4a0a      	ldr	r2, [pc, #40]	; (8004b9c <vPortFree+0xa8>)
 8004b74:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b76:	68b8      	ldr	r0, [r7, #8]
 8004b78:	f000 f876 	bl	8004c68 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004b7c:	4b08      	ldr	r3, [pc, #32]	; (8004ba0 <vPortFree+0xac>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3301      	adds	r3, #1
 8004b82:	4a07      	ldr	r2, [pc, #28]	; (8004ba0 <vPortFree+0xac>)
 8004b84:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004b86:	f7ff fa73 	bl	8004070 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004b8a:	bf00      	nop
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	2000b9cc 	.word	0x2000b9cc
 8004b98:	08007958 	.word	0x08007958
 8004b9c:	2000b9bc 	.word	0x2000b9bc
 8004ba0:	2000b9c8 	.word	0x2000b9c8

08004ba4 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004baa:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 8004bae:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004bb0:	4b27      	ldr	r3, [pc, #156]	; (8004c50 <prvHeapInit+0xac>)
 8004bb2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00c      	beq.n	8004bd8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3307      	adds	r3, #7
 8004bc2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 0307 	bic.w	r3, r3, #7
 8004bca:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	4a1f      	ldr	r2, [pc, #124]	; (8004c50 <prvHeapInit+0xac>)
 8004bd4:	4413      	add	r3, r2
 8004bd6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004bdc:	4a1d      	ldr	r2, [pc, #116]	; (8004c54 <prvHeapInit+0xb0>)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004be2:	4b1c      	ldr	r3, [pc, #112]	; (8004c54 <prvHeapInit+0xb0>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	4413      	add	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004bf0:	2208      	movs	r2, #8
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	1a9b      	subs	r3, r3, r2
 8004bf6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f023 0307 	bic.w	r3, r3, #7
 8004bfe:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4a15      	ldr	r2, [pc, #84]	; (8004c58 <prvHeapInit+0xb4>)
 8004c04:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004c06:	4b14      	ldr	r3, [pc, #80]	; (8004c58 <prvHeapInit+0xb4>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004c0e:	4b12      	ldr	r3, [pc, #72]	; (8004c58 <prvHeapInit+0xb4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2200      	movs	r2, #0
 8004c14:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	1ad2      	subs	r2, r2, r3
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c24:	4b0c      	ldr	r3, [pc, #48]	; (8004c58 <prvHeapInit+0xb4>)
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	4a0a      	ldr	r2, [pc, #40]	; (8004c5c <prvHeapInit+0xb8>)
 8004c32:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	4a09      	ldr	r2, [pc, #36]	; (8004c60 <prvHeapInit+0xbc>)
 8004c3a:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c3c:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <prvHeapInit+0xc0>)
 8004c3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c42:	601a      	str	r2, [r3, #0]
}
 8004c44:	bf00      	nop
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	200001b0 	.word	0x200001b0
 8004c54:	2000b9b0 	.word	0x2000b9b0
 8004c58:	2000b9b8 	.word	0x2000b9b8
 8004c5c:	2000b9c0 	.word	0x2000b9c0
 8004c60:	2000b9bc 	.word	0x2000b9bc
 8004c64:	2000b9cc 	.word	0x2000b9cc

08004c68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c70:	4b28      	ldr	r3, [pc, #160]	; (8004d14 <prvInsertBlockIntoFreeList+0xac>)
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	e002      	b.n	8004c7c <prvInsertBlockIntoFreeList+0x14>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d8f7      	bhi.n	8004c76 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	4413      	add	r3, r2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d108      	bne.n	8004caa <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	441a      	add	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	441a      	add	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d118      	bne.n	8004cf0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	4b15      	ldr	r3, [pc, #84]	; (8004d18 <prvInsertBlockIntoFreeList+0xb0>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d00d      	beq.n	8004ce6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	441a      	add	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	e008      	b.n	8004cf8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ce6:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <prvInsertBlockIntoFreeList+0xb0>)
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	e003      	b.n	8004cf8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d002      	beq.n	8004d06 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004d06:	bf00      	nop
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	2000b9b0 	.word	0x2000b9b0
 8004d18:	2000b9b8 	.word	0x2000b9b8

08004d1c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004d20:	4803      	ldr	r0, [pc, #12]	; (8004d30 <_cbSendSystemDesc+0x14>)
 8004d22:	f001 fddf 	bl	80068e4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004d26:	4803      	ldr	r0, [pc, #12]	; (8004d34 <_cbSendSystemDesc+0x18>)
 8004d28:	f001 fddc 	bl	80068e4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004d2c:	bf00      	nop
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	0800798c 	.word	0x0800798c
 8004d34:	080079cc 	.word	0x080079cc

08004d38 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004d3c:	4b06      	ldr	r3, [pc, #24]	; (8004d58 <SEGGER_SYSVIEW_Conf+0x20>)
 8004d3e:	6818      	ldr	r0, [r3, #0]
 8004d40:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <SEGGER_SYSVIEW_Conf+0x20>)
 8004d42:	6819      	ldr	r1, [r3, #0]
 8004d44:	4b05      	ldr	r3, [pc, #20]	; (8004d5c <SEGGER_SYSVIEW_Conf+0x24>)
 8004d46:	4a06      	ldr	r2, [pc, #24]	; (8004d60 <SEGGER_SYSVIEW_Conf+0x28>)
 8004d48:	f001 fa50 	bl	80061ec <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004d4c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004d50:	f001 fa90 	bl	8006274 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004d54:	bf00      	nop
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	20000000 	.word	0x20000000
 8004d5c:	08004d1d 	.word	0x08004d1d
 8004d60:	08007a70 	.word	0x08007a70

08004d64 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	607b      	str	r3, [r7, #4]
 8004d6e:	e033      	b.n	8004dd8 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004d70:	491e      	ldr	r1, [pc, #120]	; (8004dec <_cbSendTaskList+0x88>)
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	4613      	mov	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	6818      	ldr	r0, [r3, #0]
 8004d80:	491a      	ldr	r1, [pc, #104]	; (8004dec <_cbSendTaskList+0x88>)
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	3304      	adds	r3, #4
 8004d90:	6819      	ldr	r1, [r3, #0]
 8004d92:	4c16      	ldr	r4, [pc, #88]	; (8004dec <_cbSendTaskList+0x88>)
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	4613      	mov	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4413      	add	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4423      	add	r3, r4
 8004da0:	3308      	adds	r3, #8
 8004da2:	681c      	ldr	r4, [r3, #0]
 8004da4:	4d11      	ldr	r5, [pc, #68]	; (8004dec <_cbSendTaskList+0x88>)
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	4613      	mov	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	442b      	add	r3, r5
 8004db2:	330c      	adds	r3, #12
 8004db4:	681d      	ldr	r5, [r3, #0]
 8004db6:	4e0d      	ldr	r6, [pc, #52]	; (8004dec <_cbSendTaskList+0x88>)
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4433      	add	r3, r6
 8004dc4:	3310      	adds	r3, #16
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	462b      	mov	r3, r5
 8004dcc:	4622      	mov	r2, r4
 8004dce:	f000 f8b5 	bl	8004f3c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	607b      	str	r3, [r7, #4]
 8004dd8:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <_cbSendTaskList+0x8c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d3c6      	bcc.n	8004d70 <_cbSendTaskList+0xc>
  }
}
 8004de2:	bf00      	nop
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dec:	2000b9d0 	.word	0x2000b9d0
 8004df0:	2000ba70 	.word	0x2000ba70

08004df4 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004df4:	b5b0      	push	{r4, r5, r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004dfa:	f7ff f9c7 	bl	800418c <xTaskGetTickCountFromISR>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	461a      	mov	r2, r3
 8004e02:	f04f 0300 	mov.w	r3, #0
 8004e06:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004e0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	f04f 0400 	mov.w	r4, #0
 8004e16:	f04f 0500 	mov.w	r5, #0
 8004e1a:	015d      	lsls	r5, r3, #5
 8004e1c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004e20:	0154      	lsls	r4, r2, #5
 8004e22:	4622      	mov	r2, r4
 8004e24:	462b      	mov	r3, r5
 8004e26:	1a12      	subs	r2, r2, r0
 8004e28:	eb63 0301 	sbc.w	r3, r3, r1
 8004e2c:	f04f 0400 	mov.w	r4, #0
 8004e30:	f04f 0500 	mov.w	r5, #0
 8004e34:	009d      	lsls	r5, r3, #2
 8004e36:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004e3a:	0094      	lsls	r4, r2, #2
 8004e3c:	4622      	mov	r2, r4
 8004e3e:	462b      	mov	r3, r5
 8004e40:	1812      	adds	r2, r2, r0
 8004e42:	eb41 0303 	adc.w	r3, r1, r3
 8004e46:	f04f 0000 	mov.w	r0, #0
 8004e4a:	f04f 0100 	mov.w	r1, #0
 8004e4e:	00d9      	lsls	r1, r3, #3
 8004e50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e54:	00d0      	lsls	r0, r2, #3
 8004e56:	4602      	mov	r2, r0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8004e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004e62:	4610      	mov	r0, r2
 8004e64:	4619      	mov	r1, r3
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bdb0      	pop	{r4, r5, r7, pc}

08004e6c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af02      	add	r7, sp, #8
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
 8004e78:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004e7a:	2205      	movs	r2, #5
 8004e7c:	492b      	ldr	r1, [pc, #172]	; (8004f2c <SYSVIEW_AddTask+0xc0>)
 8004e7e:	68b8      	ldr	r0, [r7, #8]
 8004e80:	f002 f880 	bl	8006f84 <memcmp>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d04b      	beq.n	8004f22 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004e8a:	4b29      	ldr	r3, [pc, #164]	; (8004f30 <SYSVIEW_AddTask+0xc4>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b07      	cmp	r3, #7
 8004e90:	d903      	bls.n	8004e9a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004e92:	4828      	ldr	r0, [pc, #160]	; (8004f34 <SYSVIEW_AddTask+0xc8>)
 8004e94:	f001 ffc8 	bl	8006e28 <SEGGER_SYSVIEW_Warn>
    return;
 8004e98:	e044      	b.n	8004f24 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004e9a:	4b25      	ldr	r3, [pc, #148]	; (8004f30 <SYSVIEW_AddTask+0xc4>)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	4926      	ldr	r1, [pc, #152]	; (8004f38 <SYSVIEW_AddTask+0xcc>)
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	440b      	add	r3, r1
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004eae:	4b20      	ldr	r3, [pc, #128]	; (8004f30 <SYSVIEW_AddTask+0xc4>)
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	4921      	ldr	r1, [pc, #132]	; (8004f38 <SYSVIEW_AddTask+0xcc>)
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	440b      	add	r3, r1
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004ec4:	4b1a      	ldr	r3, [pc, #104]	; (8004f30 <SYSVIEW_AddTask+0xc4>)
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	491b      	ldr	r1, [pc, #108]	; (8004f38 <SYSVIEW_AddTask+0xcc>)
 8004eca:	4613      	mov	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	440b      	add	r3, r1
 8004ed4:	3308      	adds	r3, #8
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004eda:	4b15      	ldr	r3, [pc, #84]	; (8004f30 <SYSVIEW_AddTask+0xc4>)
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	4916      	ldr	r1, [pc, #88]	; (8004f38 <SYSVIEW_AddTask+0xcc>)
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	330c      	adds	r3, #12
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004ef0:	4b0f      	ldr	r3, [pc, #60]	; (8004f30 <SYSVIEW_AddTask+0xc4>)
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	4910      	ldr	r1, [pc, #64]	; (8004f38 <SYSVIEW_AddTask+0xcc>)
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	440b      	add	r3, r1
 8004f00:	3310      	adds	r3, #16
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004f06:	4b0a      	ldr	r3, [pc, #40]	; (8004f30 <SYSVIEW_AddTask+0xc4>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	4a08      	ldr	r2, [pc, #32]	; (8004f30 <SYSVIEW_AddTask+0xc4>)
 8004f0e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	68b9      	ldr	r1, [r7, #8]
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 f80e 	bl	8004f3c <SYSVIEW_SendTaskInfo>
 8004f20:	e000      	b.n	8004f24 <SYSVIEW_AddTask+0xb8>
    return;
 8004f22:	bf00      	nop

}
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	080079dc 	.word	0x080079dc
 8004f30:	2000ba70 	.word	0x2000ba70
 8004f34:	080079e4 	.word	0x080079e4
 8004f38:	2000b9d0 	.word	0x2000b9d0

08004f3c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08a      	sub	sp, #40	; 0x28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004f4a:	f107 0314 	add.w	r3, r7, #20
 8004f4e:	2214      	movs	r2, #20
 8004f50:	2100      	movs	r1, #0
 8004f52:	4618      	mov	r0, r3
 8004f54:	f002 f832 	bl	8006fbc <memset>
  TaskInfo.TaskID     = TaskID;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004f6c:	f107 0314 	add.w	r3, r7, #20
 8004f70:	4618      	mov	r0, r3
 8004f72:	f001 fbbf 	bl	80066f4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004f76:	bf00      	nop
 8004f78:	3728      	adds	r7, #40	; 0x28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
	...

08004f80 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004f86:	4b24      	ldr	r3, [pc, #144]	; (8005018 <_DoInit+0x98>)
 8004f88:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2203      	movs	r2, #3
 8004f8e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2203      	movs	r2, #3
 8004f94:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a20      	ldr	r2, [pc, #128]	; (800501c <_DoInit+0x9c>)
 8004f9a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a20      	ldr	r2, [pc, #128]	; (8005020 <_DoInit+0xa0>)
 8004fa0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fa8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a17      	ldr	r2, [pc, #92]	; (800501c <_DoInit+0x9c>)
 8004fc0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a17      	ldr	r2, [pc, #92]	; (8005024 <_DoInit+0xa4>)
 8004fc6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2210      	movs	r2, #16
 8004fcc:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3307      	adds	r3, #7
 8004fe4:	4a10      	ldr	r2, [pc, #64]	; (8005028 <_DoInit+0xa8>)
 8004fe6:	6810      	ldr	r0, [r2, #0]
 8004fe8:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004fea:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a0e      	ldr	r2, [pc, #56]	; (800502c <_DoInit+0xac>)
 8004ff2:	6810      	ldr	r0, [r2, #0]
 8004ff4:	6018      	str	r0, [r3, #0]
 8004ff6:	8891      	ldrh	r1, [r2, #4]
 8004ff8:	7992      	ldrb	r2, [r2, #6]
 8004ffa:	8099      	strh	r1, [r3, #4]
 8004ffc:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004ffe:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2220      	movs	r2, #32
 8005006:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005008:	f3bf 8f5f 	dmb	sy
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	2000d08c 	.word	0x2000d08c
 800501c:	08007a34 	.word	0x08007a34
 8005020:	2000ba74 	.word	0x2000ba74
 8005024:	2000be74 	.word	0x2000be74
 8005028:	08007a40 	.word	0x08007a40
 800502c:	08007a44 	.word	0x08007a44

08005030 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005030:	b580      	push	{r7, lr}
 8005032:	b08a      	sub	sp, #40	; 0x28
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800503c:	2300      	movs	r3, #0
 800503e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	429a      	cmp	r2, r3
 8005052:	d905      	bls.n	8005060 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	3b01      	subs	r3, #1
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
 800505e:	e007      	b.n	8005070 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	69b9      	ldr	r1, [r7, #24]
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	1acb      	subs	r3, r1, r3
 800506a:	4413      	add	r3, r2
 800506c:	3b01      	subs	r3, #1
 800506e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800507a:	4293      	cmp	r3, r2
 800507c:	bf28      	it	cs
 800507e:	4613      	movcs	r3, r2
 8005080:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4293      	cmp	r3, r2
 8005088:	bf28      	it	cs
 800508a:	4613      	movcs	r3, r2
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	4413      	add	r3, r2
 8005096:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509a:	68b9      	ldr	r1, [r7, #8]
 800509c:	6978      	ldr	r0, [r7, #20]
 800509e:	f001 ff7f 	bl	8006fa0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80050a2:	6a3a      	ldr	r2, [r7, #32]
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	4413      	add	r3, r2
 80050a8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	4413      	add	r3, r2
 80050b0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80050ba:	69fa      	ldr	r2, [r7, #28]
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	4413      	add	r3, r2
 80050c0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	69fa      	ldr	r2, [r7, #28]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d101      	bne.n	80050d0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80050cc:	2300      	movs	r3, #0
 80050ce:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80050d0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	69fa      	ldr	r2, [r7, #28]
 80050d8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1b2      	bne.n	8005046 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80050e0:	6a3b      	ldr	r3, [r7, #32]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3728      	adds	r7, #40	; 0x28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b088      	sub	sp, #32
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	60f8      	str	r0, [r7, #12]
 80050f2:	60b9      	str	r1, [r7, #8]
 80050f4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	429a      	cmp	r2, r3
 800510c:	d911      	bls.n	8005132 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	4413      	add	r3, r2
 8005116:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	68b9      	ldr	r1, [r7, #8]
 800511c:	6938      	ldr	r0, [r7, #16]
 800511e:	f001 ff3f 	bl	8006fa0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005122:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005126:	69fa      	ldr	r2, [r7, #28]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	441a      	add	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005130:	e01f      	b.n	8005172 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	4413      	add	r3, r2
 800513e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	68b9      	ldr	r1, [r7, #8]
 8005144:	6938      	ldr	r0, [r7, #16]
 8005146:	f001 ff2b 	bl	8006fa0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	4413      	add	r3, r2
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	4619      	mov	r1, r3
 8005162:	6938      	ldr	r0, [r7, #16]
 8005164:	f001 ff1c 	bl	8006fa0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005168:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	60da      	str	r2, [r3, #12]
}
 8005172:	bf00      	nop
 8005174:	3720      	adds	r7, #32
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800517a:	b480      	push	{r7}
 800517c:	b087      	sub	sp, #28
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	429a      	cmp	r2, r3
 8005194:	d808      	bhi.n	80051a8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	689a      	ldr	r2, [r3, #8]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	1ad2      	subs	r2, r2, r3
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	4413      	add	r3, r2
 80051a2:	3b01      	subs	r3, #1
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	e004      	b.n	80051b2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	3b01      	subs	r3, #1
 80051b0:	617b      	str	r3, [r7, #20]
  }
  return r;
 80051b2:	697b      	ldr	r3, [r7, #20]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	371c      	adds	r7, #28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08c      	sub	sp, #48	; 0x30
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80051cc:	4b3e      	ldr	r3, [pc, #248]	; (80052c8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80051ce:	623b      	str	r3, [r7, #32]
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80051da:	f7ff fed1 	bl	8004f80 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	4613      	mov	r3, r2
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	4413      	add	r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	4a37      	ldr	r2, [pc, #220]	; (80052c8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80051ec:	4413      	add	r3, r2
 80051ee:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005200:	2300      	movs	r3, #0
 8005202:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	429a      	cmp	r2, r3
 800520a:	d92b      	bls.n	8005264 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4293      	cmp	r3, r2
 800521c:	bf28      	it	cs
 800521e:	4613      	movcs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005228:	4413      	add	r3, r2
 800522a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	6939      	ldr	r1, [r7, #16]
 8005230:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005232:	f001 feb5 	bl	8006fa0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	4413      	add	r3, r2
 800523c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800523e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	4413      	add	r3, r2
 8005244:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800524e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	4413      	add	r3, r2
 8005254:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800525c:	429a      	cmp	r2, r3
 800525e:	d101      	bne.n	8005264 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005260:	2300      	movs	r3, #0
 8005262:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4293      	cmp	r3, r2
 8005272:	bf28      	it	cs
 8005274:	4613      	movcs	r3, r2
 8005276:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d019      	beq.n	80052b2 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005284:	4413      	add	r3, r2
 8005286:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	6939      	ldr	r1, [r7, #16]
 800528c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800528e:	f001 fe87 	bl	8006fa0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	4413      	add	r3, r2
 8005298:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800529a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	4413      	add	r3, r2
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80052aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	4413      	add	r3, r2
 80052b0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80052b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052bc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80052be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3730      	adds	r7, #48	; 0x30
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	2000d08c 	.word	0x2000d08c

080052cc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08c      	sub	sp, #48	; 0x30
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80052d8:	4b3e      	ldr	r3, [pc, #248]	; (80053d4 <SEGGER_RTT_ReadNoLock+0x108>)
 80052da:	623b      	str	r3, [r7, #32]
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <SEGGER_RTT_ReadNoLock+0x1e>
 80052e6:	f7ff fe4b 	bl	8004f80 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4613      	mov	r3, r2
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	4413      	add	r3, r2
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	3360      	adds	r3, #96	; 0x60
 80052f6:	4a37      	ldr	r2, [pc, #220]	; (80053d4 <SEGGER_RTT_ReadNoLock+0x108>)
 80052f8:	4413      	add	r3, r2
 80052fa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800530c:	2300      	movs	r3, #0
 800530e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	429a      	cmp	r2, r3
 8005316:	d92b      	bls.n	8005370 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4293      	cmp	r3, r2
 8005328:	bf28      	it	cs
 800532a:	4613      	movcs	r3, r2
 800532c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005334:	4413      	add	r3, r2
 8005336:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	6939      	ldr	r1, [r7, #16]
 800533c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800533e:	f001 fe2f 	bl	8006fa0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005342:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	4413      	add	r3, r2
 8005348:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800534a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	4413      	add	r3, r2
 8005350:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800535a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	4413      	add	r3, r2
 8005360:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005368:	429a      	cmp	r2, r3
 800536a:	d101      	bne.n	8005370 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800536c:	2300      	movs	r3, #0
 800536e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4293      	cmp	r3, r2
 800537e:	bf28      	it	cs
 8005380:	4613      	movcs	r3, r2
 8005382:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d019      	beq.n	80053be <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	4413      	add	r3, r2
 8005392:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	6939      	ldr	r1, [r7, #16]
 8005398:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800539a:	f001 fe01 	bl	8006fa0 <memcpy>
    NumBytesRead += NumBytesRem;
 800539e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	4413      	add	r3, r2
 80053a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80053a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	4413      	add	r3, r2
 80053ac:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80053b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	4413      	add	r3, r2
 80053bc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80053be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d002      	beq.n	80053ca <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053c8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80053ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3730      	adds	r7, #48	; 0x30
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	2000d08c 	.word	0x2000d08c

080053d8 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80053d8:	b580      	push	{r7, lr}
 80053da:	b088      	sub	sp, #32
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	4613      	mov	r3, r2
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	4413      	add	r3, r2
 80053f0:	00db      	lsls	r3, r3, #3
 80053f2:	3360      	adds	r3, #96	; 0x60
 80053f4:	4a1f      	ldr	r2, [pc, #124]	; (8005474 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80053f6:	4413      	add	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d029      	beq.n	8005456 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005402:	2b02      	cmp	r3, #2
 8005404:	d82e      	bhi.n	8005464 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800540a:	2b01      	cmp	r3, #1
 800540c:	d013      	beq.n	8005436 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800540e:	e029      	b.n	8005464 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005410:	6978      	ldr	r0, [r7, #20]
 8005412:	f7ff feb2 	bl	800517a <_GetAvailWriteSpace>
 8005416:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	429a      	cmp	r2, r3
 800541e:	d202      	bcs.n	8005426 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005420:	2300      	movs	r3, #0
 8005422:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005424:	e021      	b.n	800546a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	69b9      	ldr	r1, [r7, #24]
 800542e:	6978      	ldr	r0, [r7, #20]
 8005430:	f7ff fe5b 	bl	80050ea <_WriteNoCheck>
    break;
 8005434:	e019      	b.n	800546a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005436:	6978      	ldr	r0, [r7, #20]
 8005438:	f7ff fe9f 	bl	800517a <_GetAvailWriteSpace>
 800543c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	4293      	cmp	r3, r2
 8005444:	bf28      	it	cs
 8005446:	4613      	movcs	r3, r2
 8005448:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800544a:	69fa      	ldr	r2, [r7, #28]
 800544c:	69b9      	ldr	r1, [r7, #24]
 800544e:	6978      	ldr	r0, [r7, #20]
 8005450:	f7ff fe4b 	bl	80050ea <_WriteNoCheck>
    break;
 8005454:	e009      	b.n	800546a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	69b9      	ldr	r1, [r7, #24]
 800545a:	6978      	ldr	r0, [r7, #20]
 800545c:	f7ff fde8 	bl	8005030 <_WriteBlocking>
 8005460:	61f8      	str	r0, [r7, #28]
    break;
 8005462:	e002      	b.n	800546a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005464:	2300      	movs	r3, #0
 8005466:	61fb      	str	r3, [r7, #28]
    break;
 8005468:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800546a:	69fb      	ldr	r3, [r7, #28]
}
 800546c:	4618      	mov	r0, r3
 800546e:	3720      	adds	r7, #32
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	2000d08c 	.word	0x2000d08c

08005478 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005478:	b580      	push	{r7, lr}
 800547a:	b088      	sub	sp, #32
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005484:	4b0e      	ldr	r3, [pc, #56]	; (80054c0 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005486:	61fb      	str	r3, [r7, #28]
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005492:	f7ff fd75 	bl	8004f80 <_DoInit>
  SEGGER_RTT_LOCK();
 8005496:	f3ef 8311 	mrs	r3, BASEPRI
 800549a:	f04f 0120 	mov.w	r1, #32
 800549e:	f381 8811 	msr	BASEPRI, r1
 80054a2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	68b9      	ldr	r1, [r7, #8]
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f7ff ff95 	bl	80053d8 <SEGGER_RTT_WriteDownBufferNoLock>
 80054ae:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80054b6:	697b      	ldr	r3, [r7, #20]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3720      	adds	r7, #32
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	2000d08c 	.word	0x2000d08c

080054c4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b088      	sub	sp, #32
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
 80054d0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80054d2:	4b3d      	ldr	r3, [pc, #244]	; (80055c8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80054d4:	61bb      	str	r3, [r7, #24]
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80054e0:	f7ff fd4e 	bl	8004f80 <_DoInit>
  SEGGER_RTT_LOCK();
 80054e4:	f3ef 8311 	mrs	r3, BASEPRI
 80054e8:	f04f 0120 	mov.w	r1, #32
 80054ec:	f381 8811 	msr	BASEPRI, r1
 80054f0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80054f2:	4b35      	ldr	r3, [pc, #212]	; (80055c8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80054f4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80054f6:	2300      	movs	r3, #0
 80054f8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80054fa:	6939      	ldr	r1, [r7, #16]
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	4613      	mov	r3, r2
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	4413      	add	r3, r2
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	440b      	add	r3, r1
 800550a:	3304      	adds	r3, #4
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d008      	beq.n	8005524 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	3301      	adds	r3, #1
 8005516:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	69fa      	ldr	r2, [r7, #28]
 800551e:	429a      	cmp	r2, r3
 8005520:	dbeb      	blt.n	80054fa <SEGGER_RTT_AllocUpBuffer+0x36>
 8005522:	e000      	b.n	8005526 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005524:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	69fa      	ldr	r2, [r7, #28]
 800552c:	429a      	cmp	r2, r3
 800552e:	da3f      	bge.n	80055b0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005530:	6939      	ldr	r1, [r7, #16]
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	4613      	mov	r3, r2
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	4413      	add	r3, r2
 800553c:	00db      	lsls	r3, r3, #3
 800553e:	440b      	add	r3, r1
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005544:	6939      	ldr	r1, [r7, #16]
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	1c5a      	adds	r2, r3, #1
 800554a:	4613      	mov	r3, r2
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	4413      	add	r3, r2
 8005550:	00db      	lsls	r3, r3, #3
 8005552:	440b      	add	r3, r1
 8005554:	3304      	adds	r3, #4
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800555a:	6939      	ldr	r1, [r7, #16]
 800555c:	69fa      	ldr	r2, [r7, #28]
 800555e:	4613      	mov	r3, r2
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	4413      	add	r3, r2
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	440b      	add	r3, r1
 8005568:	3320      	adds	r3, #32
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800556e:	6939      	ldr	r1, [r7, #16]
 8005570:	69fa      	ldr	r2, [r7, #28]
 8005572:	4613      	mov	r3, r2
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	4413      	add	r3, r2
 8005578:	00db      	lsls	r3, r3, #3
 800557a:	440b      	add	r3, r1
 800557c:	3328      	adds	r3, #40	; 0x28
 800557e:	2200      	movs	r2, #0
 8005580:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005582:	6939      	ldr	r1, [r7, #16]
 8005584:	69fa      	ldr	r2, [r7, #28]
 8005586:	4613      	mov	r3, r2
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	4413      	add	r3, r2
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	440b      	add	r3, r1
 8005590:	3324      	adds	r3, #36	; 0x24
 8005592:	2200      	movs	r2, #0
 8005594:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005596:	6939      	ldr	r1, [r7, #16]
 8005598:	69fa      	ldr	r2, [r7, #28]
 800559a:	4613      	mov	r3, r2
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	4413      	add	r3, r2
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	440b      	add	r3, r1
 80055a4:	332c      	adds	r3, #44	; 0x2c
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80055aa:	f3bf 8f5f 	dmb	sy
 80055ae:	e002      	b.n	80055b6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80055b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055b4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80055bc:	69fb      	ldr	r3, [r7, #28]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3720      	adds	r7, #32
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	2000d08c 	.word	0x2000d08c

080055cc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08a      	sub	sp, #40	; 0x28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
 80055d8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80055da:	4b21      	ldr	r3, [pc, #132]	; (8005660 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80055dc:	623b      	str	r3, [r7, #32]
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <SEGGER_RTT_ConfigDownBuffer+0x20>
 80055e8:	f7ff fcca 	bl	8004f80 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80055ec:	4b1c      	ldr	r3, [pc, #112]	; (8005660 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80055ee:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d82c      	bhi.n	8005650 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80055f6:	f3ef 8311 	mrs	r3, BASEPRI
 80055fa:	f04f 0120 	mov.w	r1, #32
 80055fe:	f381 8811 	msr	BASEPRI, r1
 8005602:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	4613      	mov	r3, r2
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	4413      	add	r3, r2
 800560c:	00db      	lsls	r3, r3, #3
 800560e:	3360      	adds	r3, #96	; 0x60
 8005610:	69fa      	ldr	r2, [r7, #28]
 8005612:	4413      	add	r3, r2
 8005614:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00e      	beq.n	800563a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2200      	movs	r2, #0
 8005632:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2200      	movs	r2, #0
 8005638:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800563e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005640:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800564a:	2300      	movs	r3, #0
 800564c:	627b      	str	r3, [r7, #36]	; 0x24
 800564e:	e002      	b.n	8005656 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005658:	4618      	mov	r0, r3
 800565a:	3728      	adds	r7, #40	; 0x28
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	2000d08c 	.word	0x2000d08c

08005664 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005670:	2300      	movs	r3, #0
 8005672:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00f      	beq.n	800569a <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800567a:	e002      	b.n	8005682 <_EncodeStr+0x1e>
      Len++;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	3301      	adds	r3, #1
 8005680:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	4413      	add	r3, r2
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1f6      	bne.n	800567c <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	429a      	cmp	r2, r3
 8005694:	d901      	bls.n	800569a <_EncodeStr+0x36>
      Len = Limit;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	2bfe      	cmp	r3, #254	; 0xfe
 800569e:	d806      	bhi.n	80056ae <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	1c5a      	adds	r2, r3, #1
 80056a4:	60fa      	str	r2, [r7, #12]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	b2d2      	uxtb	r2, r2
 80056aa:	701a      	strb	r2, [r3, #0]
 80056ac:	e011      	b.n	80056d2 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	1c5a      	adds	r2, r3, #1
 80056b2:	60fa      	str	r2, [r7, #12]
 80056b4:	22ff      	movs	r2, #255	; 0xff
 80056b6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	60fa      	str	r2, [r7, #12]
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	b2d2      	uxtb	r2, r2
 80056c2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	0a19      	lsrs	r1, r3, #8
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	60fa      	str	r2, [r7, #12]
 80056ce:	b2ca      	uxtb	r2, r1
 80056d0:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80056d2:	2300      	movs	r3, #0
 80056d4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80056d6:	e00a      	b.n	80056ee <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	1c53      	adds	r3, r2, #1
 80056dc:	60bb      	str	r3, [r7, #8]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	1c59      	adds	r1, r3, #1
 80056e2:	60f9      	str	r1, [r7, #12]
 80056e4:	7812      	ldrb	r2, [r2, #0]
 80056e6:	701a      	strb	r2, [r3, #0]
    n++;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	3301      	adds	r3, #1
 80056ec:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d3f0      	bcc.n	80056d8 <_EncodeStr+0x74>
  }
  return pPayload;
 80056f6:	68fb      	ldr	r3, [r7, #12]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	3304      	adds	r3, #4
}
 8005710:	4618      	mov	r0, r3
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005722:	4b36      	ldr	r3, [pc, #216]	; (80057fc <_HandleIncomingPacket+0xe0>)
 8005724:	7e1b      	ldrb	r3, [r3, #24]
 8005726:	4618      	mov	r0, r3
 8005728:	1cfb      	adds	r3, r7, #3
 800572a:	2201      	movs	r2, #1
 800572c:	4619      	mov	r1, r3
 800572e:	f7ff fdcd 	bl	80052cc <SEGGER_RTT_ReadNoLock>
 8005732:	4603      	mov	r3, r0
 8005734:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	dd54      	ble.n	80057e6 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800573c:	78fb      	ldrb	r3, [r7, #3]
 800573e:	2b80      	cmp	r3, #128	; 0x80
 8005740:	d032      	beq.n	80057a8 <_HandleIncomingPacket+0x8c>
 8005742:	2b80      	cmp	r3, #128	; 0x80
 8005744:	dc42      	bgt.n	80057cc <_HandleIncomingPacket+0xb0>
 8005746:	2b07      	cmp	r3, #7
 8005748:	dc16      	bgt.n	8005778 <_HandleIncomingPacket+0x5c>
 800574a:	2b00      	cmp	r3, #0
 800574c:	dd3e      	ble.n	80057cc <_HandleIncomingPacket+0xb0>
 800574e:	3b01      	subs	r3, #1
 8005750:	2b06      	cmp	r3, #6
 8005752:	d83b      	bhi.n	80057cc <_HandleIncomingPacket+0xb0>
 8005754:	a201      	add	r2, pc, #4	; (adr r2, 800575c <_HandleIncomingPacket+0x40>)
 8005756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575a:	bf00      	nop
 800575c:	0800577f 	.word	0x0800577f
 8005760:	08005785 	.word	0x08005785
 8005764:	0800578b 	.word	0x0800578b
 8005768:	08005791 	.word	0x08005791
 800576c:	08005797 	.word	0x08005797
 8005770:	0800579d 	.word	0x0800579d
 8005774:	080057a3 	.word	0x080057a3
 8005778:	2b7f      	cmp	r3, #127	; 0x7f
 800577a:	d036      	beq.n	80057ea <_HandleIncomingPacket+0xce>
 800577c:	e026      	b.n	80057cc <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800577e:	f000 fe3d 	bl	80063fc <SEGGER_SYSVIEW_Start>
      break;
 8005782:	e037      	b.n	80057f4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005784:	f000 fef6 	bl	8006574 <SEGGER_SYSVIEW_Stop>
      break;
 8005788:	e034      	b.n	80057f4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800578a:	f001 f8cf 	bl	800692c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800578e:	e031      	b.n	80057f4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005790:	f001 f894 	bl	80068bc <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005794:	e02e      	b.n	80057f4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005796:	f000 ff13 	bl	80065c0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800579a:	e02b      	b.n	80057f4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800579c:	f001 faf2 	bl	8006d84 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80057a0:	e028      	b.n	80057f4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80057a2:	f001 fad1 	bl	8006d48 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80057a6:	e025      	b.n	80057f4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80057a8:	4b14      	ldr	r3, [pc, #80]	; (80057fc <_HandleIncomingPacket+0xe0>)
 80057aa:	7e1b      	ldrb	r3, [r3, #24]
 80057ac:	4618      	mov	r0, r3
 80057ae:	1cfb      	adds	r3, r7, #3
 80057b0:	2201      	movs	r2, #1
 80057b2:	4619      	mov	r1, r3
 80057b4:	f7ff fd8a 	bl	80052cc <SEGGER_RTT_ReadNoLock>
 80057b8:	4603      	mov	r3, r0
 80057ba:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	dd15      	ble.n	80057ee <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80057c2:	78fb      	ldrb	r3, [r7, #3]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f001 fa3f 	bl	8006c48 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80057ca:	e010      	b.n	80057ee <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80057cc:	78fb      	ldrb	r3, [r7, #3]
 80057ce:	b25b      	sxtb	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	da0e      	bge.n	80057f2 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80057d4:	4b09      	ldr	r3, [pc, #36]	; (80057fc <_HandleIncomingPacket+0xe0>)
 80057d6:	7e1b      	ldrb	r3, [r3, #24]
 80057d8:	4618      	mov	r0, r3
 80057da:	1cfb      	adds	r3, r7, #3
 80057dc:	2201      	movs	r2, #1
 80057de:	4619      	mov	r1, r3
 80057e0:	f7ff fd74 	bl	80052cc <SEGGER_RTT_ReadNoLock>
      }
      break;
 80057e4:	e005      	b.n	80057f2 <_HandleIncomingPacket+0xd6>
    }
  }
 80057e6:	bf00      	nop
 80057e8:	e004      	b.n	80057f4 <_HandleIncomingPacket+0xd8>
      break;
 80057ea:	bf00      	nop
 80057ec:	e002      	b.n	80057f4 <_HandleIncomingPacket+0xd8>
      break;
 80057ee:	bf00      	nop
 80057f0:	e000      	b.n	80057f4 <_HandleIncomingPacket+0xd8>
      break;
 80057f2:	bf00      	nop
}
 80057f4:	bf00      	nop
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	2000ce8c 	.word	0x2000ce8c

08005800 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005800:	b580      	push	{r7, lr}
 8005802:	b08c      	sub	sp, #48	; 0x30
 8005804:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005806:	2301      	movs	r3, #1
 8005808:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800580a:	1d3b      	adds	r3, r7, #4
 800580c:	3301      	adds	r3, #1
 800580e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005814:	4b32      	ldr	r3, [pc, #200]	; (80058e0 <_TrySendOverflowPacket+0xe0>)
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	62bb      	str	r3, [r7, #40]	; 0x28
 800581a:	e00b      	b.n	8005834 <_TrySendOverflowPacket+0x34>
 800581c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581e:	b2da      	uxtb	r2, r3
 8005820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005822:	1c59      	adds	r1, r3, #1
 8005824:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005826:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	701a      	strb	r2, [r3, #0]
 800582e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005830:	09db      	lsrs	r3, r3, #7
 8005832:	62bb      	str	r3, [r7, #40]	; 0x28
 8005834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005836:	2b7f      	cmp	r3, #127	; 0x7f
 8005838:	d8f0      	bhi.n	800581c <_TrySendOverflowPacket+0x1c>
 800583a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583c:	1c5a      	adds	r2, r3, #1
 800583e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005842:	b2d2      	uxtb	r2, r2
 8005844:	701a      	strb	r2, [r3, #0]
 8005846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005848:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800584a:	4b26      	ldr	r3, [pc, #152]	; (80058e4 <_TrySendOverflowPacket+0xe4>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005850:	4b23      	ldr	r3, [pc, #140]	; (80058e0 <_TrySendOverflowPacket+0xe0>)
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	627b      	str	r3, [r7, #36]	; 0x24
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	623b      	str	r3, [r7, #32]
 8005862:	e00b      	b.n	800587c <_TrySendOverflowPacket+0x7c>
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	b2da      	uxtb	r2, r3
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	1c59      	adds	r1, r3, #1
 800586c:	6279      	str	r1, [r7, #36]	; 0x24
 800586e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	701a      	strb	r2, [r3, #0]
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	09db      	lsrs	r3, r3, #7
 800587a:	623b      	str	r3, [r7, #32]
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	2b7f      	cmp	r3, #127	; 0x7f
 8005880:	d8f0      	bhi.n	8005864 <_TrySendOverflowPacket+0x64>
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	627a      	str	r2, [r7, #36]	; 0x24
 8005888:	6a3a      	ldr	r2, [r7, #32]
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	701a      	strb	r2, [r3, #0]
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005892:	4b13      	ldr	r3, [pc, #76]	; (80058e0 <_TrySendOverflowPacket+0xe0>)
 8005894:	785b      	ldrb	r3, [r3, #1]
 8005896:	4618      	mov	r0, r3
 8005898:	1d3b      	adds	r3, r7, #4
 800589a:	69fa      	ldr	r2, [r7, #28]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	461a      	mov	r2, r3
 80058a0:	1d3b      	adds	r3, r7, #4
 80058a2:	4619      	mov	r1, r3
 80058a4:	f7fa fcb4 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80058a8:	4603      	mov	r3, r0
 80058aa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80058ac:	f7fb ff1e 	bl	80016ec <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d009      	beq.n	80058ca <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80058b6:	4a0a      	ldr	r2, [pc, #40]	; (80058e0 <_TrySendOverflowPacket+0xe0>)
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80058bc:	4b08      	ldr	r3, [pc, #32]	; (80058e0 <_TrySendOverflowPacket+0xe0>)
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	4b06      	ldr	r3, [pc, #24]	; (80058e0 <_TrySendOverflowPacket+0xe0>)
 80058c6:	701a      	strb	r2, [r3, #0]
 80058c8:	e004      	b.n	80058d4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80058ca:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <_TrySendOverflowPacket+0xe0>)
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	3301      	adds	r3, #1
 80058d0:	4a03      	ldr	r2, [pc, #12]	; (80058e0 <_TrySendOverflowPacket+0xe0>)
 80058d2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80058d4:	693b      	ldr	r3, [r7, #16]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3730      	adds	r7, #48	; 0x30
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	2000ce8c 	.word	0x2000ce8c
 80058e4:	e0001004 	.word	0xe0001004

080058e8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08a      	sub	sp, #40	; 0x28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80058f4:	4b6d      	ldr	r3, [pc, #436]	; (8005aac <_SendPacket+0x1c4>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d010      	beq.n	800591e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80058fc:	4b6b      	ldr	r3, [pc, #428]	; (8005aac <_SendPacket+0x1c4>)
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 80a5 	beq.w	8005a50 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005906:	4b69      	ldr	r3, [pc, #420]	; (8005aac <_SendPacket+0x1c4>)
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b02      	cmp	r3, #2
 800590c:	d109      	bne.n	8005922 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800590e:	f7ff ff77 	bl	8005800 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005912:	4b66      	ldr	r3, [pc, #408]	; (8005aac <_SendPacket+0x1c4>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2b01      	cmp	r3, #1
 8005918:	f040 809c 	bne.w	8005a54 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 800591c:	e001      	b.n	8005922 <_SendPacket+0x3a>
    goto Send;
 800591e:	bf00      	nop
 8005920:	e000      	b.n	8005924 <_SendPacket+0x3c>
Send:
 8005922:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b1f      	cmp	r3, #31
 8005928:	d809      	bhi.n	800593e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800592a:	4b60      	ldr	r3, [pc, #384]	; (8005aac <_SendPacket+0x1c4>)
 800592c:	69da      	ldr	r2, [r3, #28]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	fa22 f303 	lsr.w	r3, r2, r3
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	2b00      	cmp	r3, #0
 800593a:	f040 808d 	bne.w	8005a58 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2b17      	cmp	r3, #23
 8005942:	d807      	bhi.n	8005954 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	3b01      	subs	r3, #1
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	b2da      	uxtb	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	701a      	strb	r2, [r3, #0]
 8005952:	e03d      	b.n	80059d0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	2b7f      	cmp	r3, #127	; 0x7f
 8005960:	d912      	bls.n	8005988 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	09da      	lsrs	r2, r3, #7
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	3b01      	subs	r3, #1
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	b2d2      	uxtb	r2, r2
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	b2db      	uxtb	r3, r3
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	3a01      	subs	r2, #1
 800597a:	60fa      	str	r2, [r7, #12]
 800597c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005980:	b2da      	uxtb	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	701a      	strb	r2, [r3, #0]
 8005986:	e006      	b.n	8005996 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	3b01      	subs	r3, #1
 800598c:	60fb      	str	r3, [r7, #12]
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	b2da      	uxtb	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b7f      	cmp	r3, #127	; 0x7f
 800599a:	d912      	bls.n	80059c2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	09da      	lsrs	r2, r3, #7
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	3b01      	subs	r3, #1
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	3a01      	subs	r2, #1
 80059b4:	60fa      	str	r2, [r7, #12]
 80059b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	e006      	b.n	80059d0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	3b01      	subs	r3, #1
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80059d0:	4b37      	ldr	r3, [pc, #220]	; (8005ab0 <_SendPacket+0x1c8>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80059d6:	4b35      	ldr	r3, [pc, #212]	; (8005aac <_SendPacket+0x1c4>)
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	627b      	str	r3, [r7, #36]	; 0x24
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	623b      	str	r3, [r7, #32]
 80059e8:	e00b      	b.n	8005a02 <_SendPacket+0x11a>
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	b2da      	uxtb	r2, r3
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	1c59      	adds	r1, r3, #1
 80059f2:	6279      	str	r1, [r7, #36]	; 0x24
 80059f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059f8:	b2d2      	uxtb	r2, r2
 80059fa:	701a      	strb	r2, [r3, #0]
 80059fc:	6a3b      	ldr	r3, [r7, #32]
 80059fe:	09db      	lsrs	r3, r3, #7
 8005a00:	623b      	str	r3, [r7, #32]
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	2b7f      	cmp	r3, #127	; 0x7f
 8005a06:	d8f0      	bhi.n	80059ea <_SendPacket+0x102>
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	627a      	str	r2, [r7, #36]	; 0x24
 8005a0e:	6a3a      	ldr	r2, [r7, #32]
 8005a10:	b2d2      	uxtb	r2, r2
 8005a12:	701a      	strb	r2, [r3, #0]
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005a18:	4b24      	ldr	r3, [pc, #144]	; (8005aac <_SendPacket+0x1c4>)
 8005a1a:	785b      	ldrb	r3, [r3, #1]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	461a      	mov	r2, r3
 8005a26:	68f9      	ldr	r1, [r7, #12]
 8005a28:	f7fa fbf2 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005a30:	f7fb fe5c 	bl	80016ec <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005a3a:	4a1c      	ldr	r2, [pc, #112]	; (8005aac <_SendPacket+0x1c4>)
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	60d3      	str	r3, [r2, #12]
 8005a40:	e00b      	b.n	8005a5a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005a42:	4b1a      	ldr	r3, [pc, #104]	; (8005aac <_SendPacket+0x1c4>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	3301      	adds	r3, #1
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	4b18      	ldr	r3, [pc, #96]	; (8005aac <_SendPacket+0x1c4>)
 8005a4c:	701a      	strb	r2, [r3, #0]
 8005a4e:	e004      	b.n	8005a5a <_SendPacket+0x172>
    goto SendDone;
 8005a50:	bf00      	nop
 8005a52:	e002      	b.n	8005a5a <_SendPacket+0x172>
      goto SendDone;
 8005a54:	bf00      	nop
 8005a56:	e000      	b.n	8005a5a <_SendPacket+0x172>
      goto SendDone;
 8005a58:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005a5a:	4b14      	ldr	r3, [pc, #80]	; (8005aac <_SendPacket+0x1c4>)
 8005a5c:	7e1b      	ldrb	r3, [r3, #24]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4a14      	ldr	r2, [pc, #80]	; (8005ab4 <_SendPacket+0x1cc>)
 8005a62:	460b      	mov	r3, r1
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	440b      	add	r3, r1
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	4413      	add	r3, r2
 8005a6c:	336c      	adds	r3, #108	; 0x6c
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	4b0e      	ldr	r3, [pc, #56]	; (8005aac <_SendPacket+0x1c4>)
 8005a72:	7e1b      	ldrb	r3, [r3, #24]
 8005a74:	4618      	mov	r0, r3
 8005a76:	490f      	ldr	r1, [pc, #60]	; (8005ab4 <_SendPacket+0x1cc>)
 8005a78:	4603      	mov	r3, r0
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	4403      	add	r3, r0
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	440b      	add	r3, r1
 8005a82:	3370      	adds	r3, #112	; 0x70
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d00b      	beq.n	8005aa2 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005a8a:	4b08      	ldr	r3, [pc, #32]	; (8005aac <_SendPacket+0x1c4>)
 8005a8c:	789b      	ldrb	r3, [r3, #2]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d107      	bne.n	8005aa2 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005a92:	4b06      	ldr	r3, [pc, #24]	; (8005aac <_SendPacket+0x1c4>)
 8005a94:	2201      	movs	r2, #1
 8005a96:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005a98:	f7ff fe40 	bl	800571c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005a9c:	4b03      	ldr	r3, [pc, #12]	; (8005aac <_SendPacket+0x1c4>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005aa2:	bf00      	nop
 8005aa4:	3728      	adds	r7, #40	; 0x28
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	2000ce8c 	.word	0x2000ce8c
 8005ab0:	e0001004 	.word	0xe0001004
 8005ab4:	2000d08c 	.word	0x2000d08c

08005ab8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08a      	sub	sp, #40	; 0x28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	3301      	adds	r3, #1
 8005ace:	2b80      	cmp	r3, #128	; 0x80
 8005ad0:	d80a      	bhi.n	8005ae8 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	1c59      	adds	r1, r3, #1
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	6051      	str	r1, [r2, #4]
 8005adc:	78fa      	ldrb	r2, [r7, #3]
 8005ade:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	1c5a      	adds	r2, r3, #1
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	2b80      	cmp	r3, #128	; 0x80
 8005aee:	d15a      	bne.n	8005ba6 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	691a      	ldr	r2, [r3, #16]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	b2d2      	uxtb	r2, r2
 8005afa:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	623b      	str	r3, [r7, #32]
 8005b10:	e00b      	b.n	8005b2a <_StoreChar+0x72>
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	1c59      	adds	r1, r3, #1
 8005b1a:	6279      	str	r1, [r7, #36]	; 0x24
 8005b1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b20:	b2d2      	uxtb	r2, r2
 8005b22:	701a      	strb	r2, [r3, #0]
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	09db      	lsrs	r3, r3, #7
 8005b28:	623b      	str	r3, [r7, #32]
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b2e:	d8f0      	bhi.n	8005b12 <_StoreChar+0x5a>
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	1c5a      	adds	r2, r3, #1
 8005b34:	627a      	str	r2, [r7, #36]	; 0x24
 8005b36:	6a3a      	ldr	r2, [r7, #32]
 8005b38:	b2d2      	uxtb	r2, r2
 8005b3a:	701a      	strb	r2, [r3, #0]
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	61fb      	str	r3, [r7, #28]
 8005b44:	2300      	movs	r3, #0
 8005b46:	61bb      	str	r3, [r7, #24]
 8005b48:	e00b      	b.n	8005b62 <_StoreChar+0xaa>
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	1c59      	adds	r1, r3, #1
 8005b52:	61f9      	str	r1, [r7, #28]
 8005b54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b58:	b2d2      	uxtb	r2, r2
 8005b5a:	701a      	strb	r2, [r3, #0]
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	09db      	lsrs	r3, r3, #7
 8005b60:	61bb      	str	r3, [r7, #24]
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	2b7f      	cmp	r3, #127	; 0x7f
 8005b66:	d8f0      	bhi.n	8005b4a <_StoreChar+0x92>
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	61fa      	str	r2, [r7, #28]
 8005b6e:	69ba      	ldr	r2, [r7, #24]
 8005b70:	b2d2      	uxtb	r2, r2
 8005b72:	701a      	strb	r2, [r3, #0]
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	221a      	movs	r2, #26
 8005b7e:	6939      	ldr	r1, [r7, #16]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7ff feb1 	bl	80058e8 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7ff fdba 	bl	8005704 <_PreparePacket>
 8005b90:	4602      	mov	r2, r0
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	611a      	str	r2, [r3, #16]
  }
}
 8005ba6:	bf00      	nop
 8005ba8:	3728      	adds	r7, #40	; 0x28
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08a      	sub	sp, #40	; 0x28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
 8005bbc:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005bca:	e007      	b.n	8005bdc <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005bcc:	6a3a      	ldr	r2, [r7, #32]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd4:	623b      	str	r3, [r7, #32]
    Width++;
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005bdc:	6a3a      	ldr	r2, [r7, #32]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d2f3      	bcs.n	8005bcc <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d901      	bls.n	8005bf0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d11f      	bne.n	8005c3a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d01c      	beq.n	8005c3a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d005      	beq.n	8005c16 <_PrintUnsigned+0x66>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d102      	bne.n	8005c16 <_PrintUnsigned+0x66>
        c = '0';
 8005c10:	2330      	movs	r3, #48	; 0x30
 8005c12:	76fb      	strb	r3, [r7, #27]
 8005c14:	e001      	b.n	8005c1a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005c16:	2320      	movs	r3, #32
 8005c18:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c1a:	e007      	b.n	8005c2c <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005c22:	7efb      	ldrb	r3, [r7, #27]
 8005c24:	4619      	mov	r1, r3
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f7ff ff46 	bl	8005ab8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <_PrintUnsigned+0x8a>
 8005c32:	69fa      	ldr	r2, [r7, #28]
 8005c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d3f0      	bcc.n	8005c1c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d903      	bls.n	8005c48 <_PrintUnsigned+0x98>
      NumDigits--;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	3b01      	subs	r3, #1
 8005c44:	603b      	str	r3, [r7, #0]
 8005c46:	e009      	b.n	8005c5c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c50:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d200      	bcs.n	8005c5c <_PrintUnsigned+0xac>
        break;
 8005c5a:	e005      	b.n	8005c68 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	fb02 f303 	mul.w	r3, r2, r3
 8005c64:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005c66:	e7e8      	b.n	8005c3a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c70:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c76:	fb02 f303 	mul.w	r3, r2, r3
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005c80:	4a15      	ldr	r2, [pc, #84]	; (8005cd8 <_PrintUnsigned+0x128>)
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	4413      	add	r3, r2
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	4619      	mov	r1, r3
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f7ff ff14 	bl	8005ab8 <_StoreChar>
    Digit /= Base;
 8005c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c98:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1e3      	bne.n	8005c68 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d011      	beq.n	8005cce <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00e      	beq.n	8005cce <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005cb0:	e006      	b.n	8005cc0 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005cb8:	2120      	movs	r1, #32
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f7ff fefc 	bl	8005ab8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <_PrintUnsigned+0x11e>
 8005cc6:	69fa      	ldr	r2, [r7, #28]
 8005cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d3f1      	bcc.n	8005cb2 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005cce:	bf00      	nop
 8005cd0:	3728      	adds	r7, #40	; 0x28
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	08007a84 	.word	0x08007a84

08005cdc <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b088      	sub	sp, #32
 8005ce0:	af02      	add	r7, sp, #8
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
 8005ce8:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	bfb8      	it	lt
 8005cf0:	425b      	neglt	r3, r3
 8005cf2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005cf8:	e007      	b.n	8005d0a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	fb92 f3f3 	sdiv	r3, r2, r3
 8005d02:	613b      	str	r3, [r7, #16]
    Width++;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	3301      	adds	r3, #1
 8005d08:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	daf3      	bge.n	8005cfa <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d901      	bls.n	8005d1e <_PrintInt+0x42>
    Width = NumDigits;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005d1e:	6a3b      	ldr	r3, [r7, #32]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00a      	beq.n	8005d3a <_PrintInt+0x5e>
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	db04      	blt.n	8005d34 <_PrintInt+0x58>
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	f003 0304 	and.w	r3, r3, #4
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d002      	beq.n	8005d3a <_PrintInt+0x5e>
    FieldWidth--;
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d002      	beq.n	8005d4a <_PrintInt+0x6e>
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d016      	beq.n	8005d78 <_PrintInt+0x9c>
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d111      	bne.n	8005d78 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00e      	beq.n	8005d78 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005d5a:	e006      	b.n	8005d6a <_PrintInt+0x8e>
        FieldWidth--;
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005d62:	2120      	movs	r1, #32
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f7ff fea7 	bl	8005ab8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d003      	beq.n	8005d78 <_PrintInt+0x9c>
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d3f1      	bcc.n	8005d5c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	da07      	bge.n	8005d8e <_PrintInt+0xb2>
    v = -v;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	425b      	negs	r3, r3
 8005d82:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005d84:	212d      	movs	r1, #45	; 0x2d
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f7ff fe96 	bl	8005ab8 <_StoreChar>
 8005d8c:	e008      	b.n	8005da0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	f003 0304 	and.w	r3, r3, #4
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005d98:	212b      	movs	r1, #43	; 0x2b
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f7ff fe8c 	bl	8005ab8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d019      	beq.n	8005dde <_PrintInt+0x102>
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d114      	bne.n	8005dde <_PrintInt+0x102>
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d111      	bne.n	8005dde <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00e      	beq.n	8005dde <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005dc0:	e006      	b.n	8005dd0 <_PrintInt+0xf4>
        FieldWidth--;
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005dc8:	2130      	movs	r1, #48	; 0x30
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f7ff fe74 	bl	8005ab8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005dd0:	6a3b      	ldr	r3, [r7, #32]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <_PrintInt+0x102>
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d3f1      	bcc.n	8005dc2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005dde:	68b9      	ldr	r1, [r7, #8]
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	9301      	str	r3, [sp, #4]
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f7ff fedf 	bl	8005bb0 <_PrintUnsigned>
}
 8005df2:	bf00      	nop
 8005df4:	3718      	adds	r7, #24
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
	...

08005dfc <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b098      	sub	sp, #96	; 0x60
 8005e00:	af02      	add	r7, sp, #8
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e08:	f3ef 8311 	mrs	r3, BASEPRI
 8005e0c:	f04f 0120 	mov.w	r1, #32
 8005e10:	f381 8811 	msr	BASEPRI, r1
 8005e14:	633b      	str	r3, [r7, #48]	; 0x30
 8005e16:	48b7      	ldr	r0, [pc, #732]	; (80060f4 <_VPrintTarget+0x2f8>)
 8005e18:	f7ff fc74 	bl	8005704 <_PreparePacket>
 8005e1c:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005e1e:	4bb5      	ldr	r3, [pc, #724]	; (80060f4 <_VPrintTarget+0x2f8>)
 8005e20:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005e22:	2300      	movs	r3, #0
 8005e24:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e28:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005e42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f000 8183 	beq.w	8006152 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005e4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e50:	2b25      	cmp	r3, #37	; 0x25
 8005e52:	f040 8170 	bne.w	8006136 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005e56:	2300      	movs	r3, #0
 8005e58:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005e66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e6a:	3b23      	subs	r3, #35	; 0x23
 8005e6c:	2b0d      	cmp	r3, #13
 8005e6e:	d83f      	bhi.n	8005ef0 <_VPrintTarget+0xf4>
 8005e70:	a201      	add	r2, pc, #4	; (adr r2, 8005e78 <_VPrintTarget+0x7c>)
 8005e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e76:	bf00      	nop
 8005e78:	08005ee1 	.word	0x08005ee1
 8005e7c:	08005ef1 	.word	0x08005ef1
 8005e80:	08005ef1 	.word	0x08005ef1
 8005e84:	08005ef1 	.word	0x08005ef1
 8005e88:	08005ef1 	.word	0x08005ef1
 8005e8c:	08005ef1 	.word	0x08005ef1
 8005e90:	08005ef1 	.word	0x08005ef1
 8005e94:	08005ef1 	.word	0x08005ef1
 8005e98:	08005ed1 	.word	0x08005ed1
 8005e9c:	08005ef1 	.word	0x08005ef1
 8005ea0:	08005eb1 	.word	0x08005eb1
 8005ea4:	08005ef1 	.word	0x08005ef1
 8005ea8:	08005ef1 	.word	0x08005ef1
 8005eac:	08005ec1 	.word	0x08005ec1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eb2:	f043 0301 	orr.w	r3, r3, #1
 8005eb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	e01a      	b.n	8005ef6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ec2:	f043 0302 	orr.w	r3, r3, #2
 8005ec6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	e012      	b.n	8005ef6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ed2:	f043 0304 	orr.w	r3, r3, #4
 8005ed6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	3301      	adds	r3, #1
 8005edc:	60fb      	str	r3, [r7, #12]
 8005ede:	e00a      	b.n	8005ef6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ee2:	f043 0308 	orr.w	r3, r3, #8
 8005ee6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	3301      	adds	r3, #1
 8005eec:	60fb      	str	r3, [r7, #12]
 8005eee:	e002      	b.n	8005ef6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ef4:	bf00      	nop
        }
      } while (v);
 8005ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1b0      	bne.n	8005e5e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005efc:	2300      	movs	r3, #0
 8005efe:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005f08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f0c:	2b2f      	cmp	r3, #47	; 0x2f
 8005f0e:	d912      	bls.n	8005f36 <_VPrintTarget+0x13a>
 8005f10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f14:	2b39      	cmp	r3, #57	; 0x39
 8005f16:	d80e      	bhi.n	8005f36 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005f1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f20:	4613      	mov	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	005b      	lsls	r3, r3, #1
 8005f28:	461a      	mov	r2, r3
 8005f2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f2e:	4413      	add	r3, r2
 8005f30:	3b30      	subs	r3, #48	; 0x30
 8005f32:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005f34:	e7e4      	b.n	8005f00 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005f36:	2300      	movs	r3, #0
 8005f38:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005f42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f46:	2b2e      	cmp	r3, #46	; 0x2e
 8005f48:	d11d      	bne.n	8005f86 <_VPrintTarget+0x18a>
        sFormat++;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005f58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f5c:	2b2f      	cmp	r3, #47	; 0x2f
 8005f5e:	d912      	bls.n	8005f86 <_VPrintTarget+0x18a>
 8005f60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f64:	2b39      	cmp	r3, #57	; 0x39
 8005f66:	d80e      	bhi.n	8005f86 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005f6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f70:	4613      	mov	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	461a      	mov	r2, r3
 8005f7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f7e:	4413      	add	r3, r2
 8005f80:	3b30      	subs	r3, #48	; 0x30
 8005f82:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005f84:	e7e4      	b.n	8005f50 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005f8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f92:	2b6c      	cmp	r3, #108	; 0x6c
 8005f94:	d003      	beq.n	8005f9e <_VPrintTarget+0x1a2>
 8005f96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f9a:	2b68      	cmp	r3, #104	; 0x68
 8005f9c:	d107      	bne.n	8005fae <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005fac:	e7ef      	b.n	8005f8e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005fae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fb2:	2b25      	cmp	r3, #37	; 0x25
 8005fb4:	f000 80b3 	beq.w	800611e <_VPrintTarget+0x322>
 8005fb8:	2b25      	cmp	r3, #37	; 0x25
 8005fba:	f2c0 80b7 	blt.w	800612c <_VPrintTarget+0x330>
 8005fbe:	2b78      	cmp	r3, #120	; 0x78
 8005fc0:	f300 80b4 	bgt.w	800612c <_VPrintTarget+0x330>
 8005fc4:	2b58      	cmp	r3, #88	; 0x58
 8005fc6:	f2c0 80b1 	blt.w	800612c <_VPrintTarget+0x330>
 8005fca:	3b58      	subs	r3, #88	; 0x58
 8005fcc:	2b20      	cmp	r3, #32
 8005fce:	f200 80ad 	bhi.w	800612c <_VPrintTarget+0x330>
 8005fd2:	a201      	add	r2, pc, #4	; (adr r2, 8005fd8 <_VPrintTarget+0x1dc>)
 8005fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd8:	080060cf 	.word	0x080060cf
 8005fdc:	0800612d 	.word	0x0800612d
 8005fe0:	0800612d 	.word	0x0800612d
 8005fe4:	0800612d 	.word	0x0800612d
 8005fe8:	0800612d 	.word	0x0800612d
 8005fec:	0800612d 	.word	0x0800612d
 8005ff0:	0800612d 	.word	0x0800612d
 8005ff4:	0800612d 	.word	0x0800612d
 8005ff8:	0800612d 	.word	0x0800612d
 8005ffc:	0800612d 	.word	0x0800612d
 8006000:	0800612d 	.word	0x0800612d
 8006004:	0800605d 	.word	0x0800605d
 8006008:	08006083 	.word	0x08006083
 800600c:	0800612d 	.word	0x0800612d
 8006010:	0800612d 	.word	0x0800612d
 8006014:	0800612d 	.word	0x0800612d
 8006018:	0800612d 	.word	0x0800612d
 800601c:	0800612d 	.word	0x0800612d
 8006020:	0800612d 	.word	0x0800612d
 8006024:	0800612d 	.word	0x0800612d
 8006028:	0800612d 	.word	0x0800612d
 800602c:	0800612d 	.word	0x0800612d
 8006030:	0800612d 	.word	0x0800612d
 8006034:	0800612d 	.word	0x0800612d
 8006038:	080060f9 	.word	0x080060f9
 800603c:	0800612d 	.word	0x0800612d
 8006040:	0800612d 	.word	0x0800612d
 8006044:	0800612d 	.word	0x0800612d
 8006048:	0800612d 	.word	0x0800612d
 800604c:	080060a9 	.word	0x080060a9
 8006050:	0800612d 	.word	0x0800612d
 8006054:	0800612d 	.word	0x0800612d
 8006058:	080060cf 	.word	0x080060cf
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	1d19      	adds	r1, r3, #4
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	6011      	str	r1, [r2, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800606a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800606c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8006070:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006074:	f107 0314 	add.w	r3, r7, #20
 8006078:	4611      	mov	r1, r2
 800607a:	4618      	mov	r0, r3
 800607c:	f7ff fd1c 	bl	8005ab8 <_StoreChar>
        break;
 8006080:	e055      	b.n	800612e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	1d19      	adds	r1, r3, #4
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	6011      	str	r1, [r2, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006090:	f107 0014 	add.w	r0, r7, #20
 8006094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006096:	9301      	str	r3, [sp, #4]
 8006098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800609e:	220a      	movs	r2, #10
 80060a0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80060a2:	f7ff fe1b 	bl	8005cdc <_PrintInt>
        break;
 80060a6:	e042      	b.n	800612e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	1d19      	adds	r1, r3, #4
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	6011      	str	r1, [r2, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80060b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80060b8:	f107 0014 	add.w	r0, r7, #20
 80060bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060be:	9301      	str	r3, [sp, #4]
 80060c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060c6:	220a      	movs	r2, #10
 80060c8:	f7ff fd72 	bl	8005bb0 <_PrintUnsigned>
        break;
 80060cc:	e02f      	b.n	800612e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	1d19      	adds	r1, r3, #4
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	6011      	str	r1, [r2, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80060dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80060de:	f107 0014 	add.w	r0, r7, #20
 80060e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060e4:	9301      	str	r3, [sp, #4]
 80060e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ec:	2210      	movs	r2, #16
 80060ee:	f7ff fd5f 	bl	8005bb0 <_PrintUnsigned>
        break;
 80060f2:	e01c      	b.n	800612e <_VPrintTarget+0x332>
 80060f4:	2000cebc 	.word	0x2000cebc
      case 'p':
        v = va_arg(*pParamList, int);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	1d19      	adds	r1, r3, #4
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	6011      	str	r1, [r2, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006106:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006108:	f107 0014 	add.w	r0, r7, #20
 800610c:	2300      	movs	r3, #0
 800610e:	9301      	str	r3, [sp, #4]
 8006110:	2308      	movs	r3, #8
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	2308      	movs	r3, #8
 8006116:	2210      	movs	r2, #16
 8006118:	f7ff fd4a 	bl	8005bb0 <_PrintUnsigned>
        break;
 800611c:	e007      	b.n	800612e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800611e:	f107 0314 	add.w	r3, r7, #20
 8006122:	2125      	movs	r1, #37	; 0x25
 8006124:	4618      	mov	r0, r3
 8006126:	f7ff fcc7 	bl	8005ab8 <_StoreChar>
        break;
 800612a:	e000      	b.n	800612e <_VPrintTarget+0x332>
      default:
        break;
 800612c:	bf00      	nop
      }
      sFormat++;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	3301      	adds	r3, #1
 8006132:	60fb      	str	r3, [r7, #12]
 8006134:	e007      	b.n	8006146 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8006136:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800613a:	f107 0314 	add.w	r3, r7, #20
 800613e:	4611      	mov	r1, r2
 8006140:	4618      	mov	r0, r3
 8006142:	f7ff fcb9 	bl	8005ab8 <_StoreChar>
    }
  } while (*sFormat);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	f47f ae72 	bne.w	8005e34 <_VPrintTarget+0x38>
 8006150:	e000      	b.n	8006154 <_VPrintTarget+0x358>
      break;
 8006152:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006156:	2b00      	cmp	r3, #0
 8006158:	d041      	beq.n	80061de <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800615a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	b2d2      	uxtb	r2, r2
 8006160:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	643b      	str	r3, [r7, #64]	; 0x40
 8006166:	6a3b      	ldr	r3, [r7, #32]
 8006168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800616a:	e00b      	b.n	8006184 <_VPrintTarget+0x388>
 800616c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800616e:	b2da      	uxtb	r2, r3
 8006170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006172:	1c59      	adds	r1, r3, #1
 8006174:	6439      	str	r1, [r7, #64]	; 0x40
 8006176:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800617a:	b2d2      	uxtb	r2, r2
 800617c:	701a      	strb	r2, [r3, #0]
 800617e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006180:	09db      	lsrs	r3, r3, #7
 8006182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006186:	2b7f      	cmp	r3, #127	; 0x7f
 8006188:	d8f0      	bhi.n	800616c <_VPrintTarget+0x370>
 800618a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800618c:	1c5a      	adds	r2, r3, #1
 800618e:	643a      	str	r2, [r7, #64]	; 0x40
 8006190:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006192:	b2d2      	uxtb	r2, r2
 8006194:	701a      	strb	r2, [r3, #0]
 8006196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006198:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	63bb      	str	r3, [r7, #56]	; 0x38
 800619e:	2300      	movs	r3, #0
 80061a0:	637b      	str	r3, [r7, #52]	; 0x34
 80061a2:	e00b      	b.n	80061bc <_VPrintTarget+0x3c0>
 80061a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a6:	b2da      	uxtb	r2, r3
 80061a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061aa:	1c59      	adds	r1, r3, #1
 80061ac:	63b9      	str	r1, [r7, #56]	; 0x38
 80061ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061b2:	b2d2      	uxtb	r2, r2
 80061b4:	701a      	strb	r2, [r3, #0]
 80061b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b8:	09db      	lsrs	r3, r3, #7
 80061ba:	637b      	str	r3, [r7, #52]	; 0x34
 80061bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061be:	2b7f      	cmp	r3, #127	; 0x7f
 80061c0:	d8f0      	bhi.n	80061a4 <_VPrintTarget+0x3a8>
 80061c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	63ba      	str	r2, [r7, #56]	; 0x38
 80061c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061ca:	b2d2      	uxtb	r2, r2
 80061cc:	701a      	strb	r2, [r3, #0]
 80061ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d0:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	69b9      	ldr	r1, [r7, #24]
 80061d6:	221a      	movs	r2, #26
 80061d8:	4618      	mov	r0, r3
 80061da:	f7ff fb85 	bl	80058e8 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80061de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e0:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80061e4:	bf00      	nop
 80061e6:	3758      	adds	r7, #88	; 0x58
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af02      	add	r7, sp, #8
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
 80061f8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80061fa:	2300      	movs	r3, #0
 80061fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006200:	4917      	ldr	r1, [pc, #92]	; (8006260 <SEGGER_SYSVIEW_Init+0x74>)
 8006202:	4818      	ldr	r0, [pc, #96]	; (8006264 <SEGGER_SYSVIEW_Init+0x78>)
 8006204:	f7ff f95e 	bl	80054c4 <SEGGER_RTT_AllocUpBuffer>
 8006208:	4603      	mov	r3, r0
 800620a:	b2da      	uxtb	r2, r3
 800620c:	4b16      	ldr	r3, [pc, #88]	; (8006268 <SEGGER_SYSVIEW_Init+0x7c>)
 800620e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006210:	4b15      	ldr	r3, [pc, #84]	; (8006268 <SEGGER_SYSVIEW_Init+0x7c>)
 8006212:	785a      	ldrb	r2, [r3, #1]
 8006214:	4b14      	ldr	r3, [pc, #80]	; (8006268 <SEGGER_SYSVIEW_Init+0x7c>)
 8006216:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006218:	4b13      	ldr	r3, [pc, #76]	; (8006268 <SEGGER_SYSVIEW_Init+0x7c>)
 800621a:	7e1b      	ldrb	r3, [r3, #24]
 800621c:	4618      	mov	r0, r3
 800621e:	2300      	movs	r3, #0
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	2308      	movs	r3, #8
 8006224:	4a11      	ldr	r2, [pc, #68]	; (800626c <SEGGER_SYSVIEW_Init+0x80>)
 8006226:	490f      	ldr	r1, [pc, #60]	; (8006264 <SEGGER_SYSVIEW_Init+0x78>)
 8006228:	f7ff f9d0 	bl	80055cc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800622c:	4b0e      	ldr	r3, [pc, #56]	; (8006268 <SEGGER_SYSVIEW_Init+0x7c>)
 800622e:	2200      	movs	r2, #0
 8006230:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006232:	4b0f      	ldr	r3, [pc, #60]	; (8006270 <SEGGER_SYSVIEW_Init+0x84>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a0c      	ldr	r2, [pc, #48]	; (8006268 <SEGGER_SYSVIEW_Init+0x7c>)
 8006238:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800623a:	4a0b      	ldr	r2, [pc, #44]	; (8006268 <SEGGER_SYSVIEW_Init+0x7c>)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006240:	4a09      	ldr	r2, [pc, #36]	; (8006268 <SEGGER_SYSVIEW_Init+0x7c>)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006246:	4a08      	ldr	r2, [pc, #32]	; (8006268 <SEGGER_SYSVIEW_Init+0x7c>)
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800624c:	4a06      	ldr	r2, [pc, #24]	; (8006268 <SEGGER_SYSVIEW_Init+0x7c>)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006252:	4b05      	ldr	r3, [pc, #20]	; (8006268 <SEGGER_SYSVIEW_Init+0x7c>)
 8006254:	2200      	movs	r2, #0
 8006256:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)

}
 8006258:	bf00      	nop
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	2000be84 	.word	0x2000be84
 8006264:	08007a4c 	.word	0x08007a4c
 8006268:	2000ce8c 	.word	0x2000ce8c
 800626c:	2000ce84 	.word	0x2000ce84
 8006270:	e0001004 	.word	0xe0001004

08006274 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800627c:	4a04      	ldr	r2, [pc, #16]	; (8006290 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6113      	str	r3, [r2, #16]
}
 8006282:	bf00      	nop
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	2000ce8c 	.word	0x2000ce8c

08006294 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800629c:	f3ef 8311 	mrs	r3, BASEPRI
 80062a0:	f04f 0120 	mov.w	r1, #32
 80062a4:	f381 8811 	msr	BASEPRI, r1
 80062a8:	60fb      	str	r3, [r7, #12]
 80062aa:	4808      	ldr	r0, [pc, #32]	; (80062cc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80062ac:	f7ff fa2a 	bl	8005704 <_PreparePacket>
 80062b0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	68b9      	ldr	r1, [r7, #8]
 80062b6:	68b8      	ldr	r0, [r7, #8]
 80062b8:	f7ff fb16 	bl	80058e8 <_SendPacket>
  RECORD_END();
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f383 8811 	msr	BASEPRI, r3
}
 80062c2:	bf00      	nop
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	2000cebc 	.word	0x2000cebc

080062d0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b088      	sub	sp, #32
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80062da:	f3ef 8311 	mrs	r3, BASEPRI
 80062de:	f04f 0120 	mov.w	r1, #32
 80062e2:	f381 8811 	msr	BASEPRI, r1
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	4816      	ldr	r0, [pc, #88]	; (8006344 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80062ea:	f7ff fa0b 	bl	8005704 <_PreparePacket>
 80062ee:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	61fb      	str	r3, [r7, #28]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	61bb      	str	r3, [r7, #24]
 80062fc:	e00b      	b.n	8006316 <SEGGER_SYSVIEW_RecordU32+0x46>
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	b2da      	uxtb	r2, r3
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	1c59      	adds	r1, r3, #1
 8006306:	61f9      	str	r1, [r7, #28]
 8006308:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800630c:	b2d2      	uxtb	r2, r2
 800630e:	701a      	strb	r2, [r3, #0]
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	09db      	lsrs	r3, r3, #7
 8006314:	61bb      	str	r3, [r7, #24]
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	2b7f      	cmp	r3, #127	; 0x7f
 800631a:	d8f0      	bhi.n	80062fe <SEGGER_SYSVIEW_RecordU32+0x2e>
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	61fa      	str	r2, [r7, #28]
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	b2d2      	uxtb	r2, r2
 8006326:	701a      	strb	r2, [r3, #0]
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	68f9      	ldr	r1, [r7, #12]
 8006330:	6938      	ldr	r0, [r7, #16]
 8006332:	f7ff fad9 	bl	80058e8 <_SendPacket>
  RECORD_END();
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f383 8811 	msr	BASEPRI, r3
}
 800633c:	bf00      	nop
 800633e:	3720      	adds	r7, #32
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	2000cebc 	.word	0x2000cebc

08006348 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006348:	b580      	push	{r7, lr}
 800634a:	b08c      	sub	sp, #48	; 0x30
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006354:	f3ef 8311 	mrs	r3, BASEPRI
 8006358:	f04f 0120 	mov.w	r1, #32
 800635c:	f381 8811 	msr	BASEPRI, r1
 8006360:	61fb      	str	r3, [r7, #28]
 8006362:	4825      	ldr	r0, [pc, #148]	; (80063f8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006364:	f7ff f9ce 	bl	8005704 <_PreparePacket>
 8006368:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	62bb      	str	r3, [r7, #40]	; 0x28
 8006376:	e00b      	b.n	8006390 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637a:	b2da      	uxtb	r2, r3
 800637c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637e:	1c59      	adds	r1, r3, #1
 8006380:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006382:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006386:	b2d2      	uxtb	r2, r2
 8006388:	701a      	strb	r2, [r3, #0]
 800638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638c:	09db      	lsrs	r3, r3, #7
 800638e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	2b7f      	cmp	r3, #127	; 0x7f
 8006394:	d8f0      	bhi.n	8006378 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800639c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800639e:	b2d2      	uxtb	r2, r2
 80063a0:	701a      	strb	r2, [r3, #0]
 80063a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	623b      	str	r3, [r7, #32]
 80063ae:	e00b      	b.n	80063c8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	b2da      	uxtb	r2, r3
 80063b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b6:	1c59      	adds	r1, r3, #1
 80063b8:	6279      	str	r1, [r7, #36]	; 0x24
 80063ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063be:	b2d2      	uxtb	r2, r2
 80063c0:	701a      	strb	r2, [r3, #0]
 80063c2:	6a3b      	ldr	r3, [r7, #32]
 80063c4:	09db      	lsrs	r3, r3, #7
 80063c6:	623b      	str	r3, [r7, #32]
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	2b7f      	cmp	r3, #127	; 0x7f
 80063cc:	d8f0      	bhi.n	80063b0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	1c5a      	adds	r2, r3, #1
 80063d2:	627a      	str	r2, [r7, #36]	; 0x24
 80063d4:	6a3a      	ldr	r2, [r7, #32]
 80063d6:	b2d2      	uxtb	r2, r2
 80063d8:	701a      	strb	r2, [r3, #0]
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	6979      	ldr	r1, [r7, #20]
 80063e2:	69b8      	ldr	r0, [r7, #24]
 80063e4:	f7ff fa80 	bl	80058e8 <_SendPacket>
  RECORD_END();
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	f383 8811 	msr	BASEPRI, r3
}
 80063ee:	bf00      	nop
 80063f0:	3730      	adds	r7, #48	; 0x30
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	2000cebc 	.word	0x2000cebc

080063fc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b08c      	sub	sp, #48	; 0x30
 8006400:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006402:	4b59      	ldr	r3, [pc, #356]	; (8006568 <SEGGER_SYSVIEW_Start+0x16c>)
 8006404:	2201      	movs	r2, #1
 8006406:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006408:	f3ef 8311 	mrs	r3, BASEPRI
 800640c:	f04f 0120 	mov.w	r1, #32
 8006410:	f381 8811 	msr	BASEPRI, r1
 8006414:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006416:	4b54      	ldr	r3, [pc, #336]	; (8006568 <SEGGER_SYSVIEW_Start+0x16c>)
 8006418:	785b      	ldrb	r3, [r3, #1]
 800641a:	220a      	movs	r2, #10
 800641c:	4953      	ldr	r1, [pc, #332]	; (800656c <SEGGER_SYSVIEW_Start+0x170>)
 800641e:	4618      	mov	r0, r3
 8006420:	f7f9 fef6 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800642a:	f7fb f95f 	bl	80016ec <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800642e:	200a      	movs	r0, #10
 8006430:	f7ff ff30 	bl	8006294 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006434:	f3ef 8311 	mrs	r3, BASEPRI
 8006438:	f04f 0120 	mov.w	r1, #32
 800643c:	f381 8811 	msr	BASEPRI, r1
 8006440:	60bb      	str	r3, [r7, #8]
 8006442:	484b      	ldr	r0, [pc, #300]	; (8006570 <SEGGER_SYSVIEW_Start+0x174>)
 8006444:	f7ff f95e 	bl	8005704 <_PreparePacket>
 8006448:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006452:	4b45      	ldr	r3, [pc, #276]	; (8006568 <SEGGER_SYSVIEW_Start+0x16c>)
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	62bb      	str	r3, [r7, #40]	; 0x28
 8006458:	e00b      	b.n	8006472 <SEGGER_SYSVIEW_Start+0x76>
 800645a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645c:	b2da      	uxtb	r2, r3
 800645e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006460:	1c59      	adds	r1, r3, #1
 8006462:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006464:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006468:	b2d2      	uxtb	r2, r2
 800646a:	701a      	strb	r2, [r3, #0]
 800646c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646e:	09db      	lsrs	r3, r3, #7
 8006470:	62bb      	str	r3, [r7, #40]	; 0x28
 8006472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006474:	2b7f      	cmp	r3, #127	; 0x7f
 8006476:	d8f0      	bhi.n	800645a <SEGGER_SYSVIEW_Start+0x5e>
 8006478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800647e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006480:	b2d2      	uxtb	r2, r2
 8006482:	701a      	strb	r2, [r3, #0]
 8006484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006486:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	627b      	str	r3, [r7, #36]	; 0x24
 800648c:	4b36      	ldr	r3, [pc, #216]	; (8006568 <SEGGER_SYSVIEW_Start+0x16c>)
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	623b      	str	r3, [r7, #32]
 8006492:	e00b      	b.n	80064ac <SEGGER_SYSVIEW_Start+0xb0>
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	b2da      	uxtb	r2, r3
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	1c59      	adds	r1, r3, #1
 800649c:	6279      	str	r1, [r7, #36]	; 0x24
 800649e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064a2:	b2d2      	uxtb	r2, r2
 80064a4:	701a      	strb	r2, [r3, #0]
 80064a6:	6a3b      	ldr	r3, [r7, #32]
 80064a8:	09db      	lsrs	r3, r3, #7
 80064aa:	623b      	str	r3, [r7, #32]
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	2b7f      	cmp	r3, #127	; 0x7f
 80064b0:	d8f0      	bhi.n	8006494 <SEGGER_SYSVIEW_Start+0x98>
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	627a      	str	r2, [r7, #36]	; 0x24
 80064b8:	6a3a      	ldr	r2, [r7, #32]
 80064ba:	b2d2      	uxtb	r2, r2
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	61fb      	str	r3, [r7, #28]
 80064c6:	4b28      	ldr	r3, [pc, #160]	; (8006568 <SEGGER_SYSVIEW_Start+0x16c>)
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	61bb      	str	r3, [r7, #24]
 80064cc:	e00b      	b.n	80064e6 <SEGGER_SYSVIEW_Start+0xea>
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	b2da      	uxtb	r2, r3
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	1c59      	adds	r1, r3, #1
 80064d6:	61f9      	str	r1, [r7, #28]
 80064d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064dc:	b2d2      	uxtb	r2, r2
 80064de:	701a      	strb	r2, [r3, #0]
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	09db      	lsrs	r3, r3, #7
 80064e4:	61bb      	str	r3, [r7, #24]
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	2b7f      	cmp	r3, #127	; 0x7f
 80064ea:	d8f0      	bhi.n	80064ce <SEGGER_SYSVIEW_Start+0xd2>
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	1c5a      	adds	r2, r3, #1
 80064f0:	61fa      	str	r2, [r7, #28]
 80064f2:	69ba      	ldr	r2, [r7, #24]
 80064f4:	b2d2      	uxtb	r2, r2
 80064f6:	701a      	strb	r2, [r3, #0]
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	617b      	str	r3, [r7, #20]
 8006500:	2300      	movs	r3, #0
 8006502:	613b      	str	r3, [r7, #16]
 8006504:	e00b      	b.n	800651e <SEGGER_SYSVIEW_Start+0x122>
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	b2da      	uxtb	r2, r3
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	1c59      	adds	r1, r3, #1
 800650e:	6179      	str	r1, [r7, #20]
 8006510:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006514:	b2d2      	uxtb	r2, r2
 8006516:	701a      	strb	r2, [r3, #0]
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	09db      	lsrs	r3, r3, #7
 800651c:	613b      	str	r3, [r7, #16]
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	2b7f      	cmp	r3, #127	; 0x7f
 8006522:	d8f0      	bhi.n	8006506 <SEGGER_SYSVIEW_Start+0x10a>
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	617a      	str	r2, [r7, #20]
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	b2d2      	uxtb	r2, r2
 800652e:	701a      	strb	r2, [r3, #0]
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006534:	2218      	movs	r2, #24
 8006536:	6839      	ldr	r1, [r7, #0]
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f7ff f9d5 	bl	80058e8 <_SendPacket>
      RECORD_END();
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006544:	4b08      	ldr	r3, [pc, #32]	; (8006568 <SEGGER_SYSVIEW_Start+0x16c>)
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800654c:	4b06      	ldr	r3, [pc, #24]	; (8006568 <SEGGER_SYSVIEW_Start+0x16c>)
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006552:	f000 f9eb 	bl	800692c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006556:	f000 f9b1 	bl	80068bc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800655a:	f000 fc13 	bl	8006d84 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800655e:	bf00      	nop
 8006560:	3730      	adds	r7, #48	; 0x30
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	2000ce8c 	.word	0x2000ce8c
 800656c:	08007a78 	.word	0x08007a78
 8006570:	2000cebc 	.word	0x2000cebc

08006574 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800657a:	f3ef 8311 	mrs	r3, BASEPRI
 800657e:	f04f 0120 	mov.w	r1, #32
 8006582:	f381 8811 	msr	BASEPRI, r1
 8006586:	607b      	str	r3, [r7, #4]
 8006588:	480b      	ldr	r0, [pc, #44]	; (80065b8 <SEGGER_SYSVIEW_Stop+0x44>)
 800658a:	f7ff f8bb 	bl	8005704 <_PreparePacket>
 800658e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006590:	4b0a      	ldr	r3, [pc, #40]	; (80065bc <SEGGER_SYSVIEW_Stop+0x48>)
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d007      	beq.n	80065a8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006598:	220b      	movs	r2, #11
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	6838      	ldr	r0, [r7, #0]
 800659e:	f7ff f9a3 	bl	80058e8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80065a2:	4b06      	ldr	r3, [pc, #24]	; (80065bc <SEGGER_SYSVIEW_Stop+0x48>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f383 8811 	msr	BASEPRI, r3
}
 80065ae:	bf00      	nop
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	2000cebc 	.word	0x2000cebc
 80065bc:	2000ce8c 	.word	0x2000ce8c

080065c0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b08c      	sub	sp, #48	; 0x30
 80065c4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80065c6:	f3ef 8311 	mrs	r3, BASEPRI
 80065ca:	f04f 0120 	mov.w	r1, #32
 80065ce:	f381 8811 	msr	BASEPRI, r1
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	4845      	ldr	r0, [pc, #276]	; (80066ec <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80065d6:	f7ff f895 	bl	8005704 <_PreparePacket>
 80065da:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065e4:	4b42      	ldr	r3, [pc, #264]	; (80066f0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80065ea:	e00b      	b.n	8006604 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80065ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f2:	1c59      	adds	r1, r3, #1
 80065f4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80065f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065fa:	b2d2      	uxtb	r2, r2
 80065fc:	701a      	strb	r2, [r3, #0]
 80065fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006600:	09db      	lsrs	r3, r3, #7
 8006602:	62bb      	str	r3, [r7, #40]	; 0x28
 8006604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006606:	2b7f      	cmp	r3, #127	; 0x7f
 8006608:	d8f0      	bhi.n	80065ec <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800660a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006612:	b2d2      	uxtb	r2, r2
 8006614:	701a      	strb	r2, [r3, #0]
 8006616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006618:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	627b      	str	r3, [r7, #36]	; 0x24
 800661e:	4b34      	ldr	r3, [pc, #208]	; (80066f0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	623b      	str	r3, [r7, #32]
 8006624:	e00b      	b.n	800663e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006626:	6a3b      	ldr	r3, [r7, #32]
 8006628:	b2da      	uxtb	r2, r3
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	1c59      	adds	r1, r3, #1
 800662e:	6279      	str	r1, [r7, #36]	; 0x24
 8006630:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006634:	b2d2      	uxtb	r2, r2
 8006636:	701a      	strb	r2, [r3, #0]
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	09db      	lsrs	r3, r3, #7
 800663c:	623b      	str	r3, [r7, #32]
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	2b7f      	cmp	r3, #127	; 0x7f
 8006642:	d8f0      	bhi.n	8006626 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	627a      	str	r2, [r7, #36]	; 0x24
 800664a:	6a3a      	ldr	r2, [r7, #32]
 800664c:	b2d2      	uxtb	r2, r2
 800664e:	701a      	strb	r2, [r3, #0]
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	61fb      	str	r3, [r7, #28]
 8006658:	4b25      	ldr	r3, [pc, #148]	; (80066f0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	61bb      	str	r3, [r7, #24]
 800665e:	e00b      	b.n	8006678 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	b2da      	uxtb	r2, r3
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	1c59      	adds	r1, r3, #1
 8006668:	61f9      	str	r1, [r7, #28]
 800666a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800666e:	b2d2      	uxtb	r2, r2
 8006670:	701a      	strb	r2, [r3, #0]
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	09db      	lsrs	r3, r3, #7
 8006676:	61bb      	str	r3, [r7, #24]
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	2b7f      	cmp	r3, #127	; 0x7f
 800667c:	d8f0      	bhi.n	8006660 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	61fa      	str	r2, [r7, #28]
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	b2d2      	uxtb	r2, r2
 8006688:	701a      	strb	r2, [r3, #0]
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	617b      	str	r3, [r7, #20]
 8006692:	2300      	movs	r3, #0
 8006694:	613b      	str	r3, [r7, #16]
 8006696:	e00b      	b.n	80066b0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	b2da      	uxtb	r2, r3
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	1c59      	adds	r1, r3, #1
 80066a0:	6179      	str	r1, [r7, #20]
 80066a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	701a      	strb	r2, [r3, #0]
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	09db      	lsrs	r3, r3, #7
 80066ae:	613b      	str	r3, [r7, #16]
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	2b7f      	cmp	r3, #127	; 0x7f
 80066b4:	d8f0      	bhi.n	8006698 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	1c5a      	adds	r2, r3, #1
 80066ba:	617a      	str	r2, [r7, #20]
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	b2d2      	uxtb	r2, r2
 80066c0:	701a      	strb	r2, [r3, #0]
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80066c6:	2218      	movs	r2, #24
 80066c8:	6879      	ldr	r1, [r7, #4]
 80066ca:	68b8      	ldr	r0, [r7, #8]
 80066cc:	f7ff f90c 	bl	80058e8 <_SendPacket>
  RECORD_END();
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80066d6:	4b06      	ldr	r3, [pc, #24]	; (80066f0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80066d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80066de:	4b04      	ldr	r3, [pc, #16]	; (80066f0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80066e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e2:	4798      	blx	r3
  }
}
 80066e4:	bf00      	nop
 80066e6:	3730      	adds	r7, #48	; 0x30
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	2000cebc 	.word	0x2000cebc
 80066f0:	2000ce8c 	.word	0x2000ce8c

080066f4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b092      	sub	sp, #72	; 0x48
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80066fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006700:	f04f 0120 	mov.w	r1, #32
 8006704:	f381 8811 	msr	BASEPRI, r1
 8006708:	617b      	str	r3, [r7, #20]
 800670a:	486a      	ldr	r0, [pc, #424]	; (80068b4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800670c:	f7fe fffa 	bl	8005704 <_PreparePacket>
 8006710:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	647b      	str	r3, [r7, #68]	; 0x44
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	4b66      	ldr	r3, [pc, #408]	; (80068b8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	643b      	str	r3, [r7, #64]	; 0x40
 8006726:	e00b      	b.n	8006740 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800672a:	b2da      	uxtb	r2, r3
 800672c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800672e:	1c59      	adds	r1, r3, #1
 8006730:	6479      	str	r1, [r7, #68]	; 0x44
 8006732:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006736:	b2d2      	uxtb	r2, r2
 8006738:	701a      	strb	r2, [r3, #0]
 800673a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800673c:	09db      	lsrs	r3, r3, #7
 800673e:	643b      	str	r3, [r7, #64]	; 0x40
 8006740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006742:	2b7f      	cmp	r3, #127	; 0x7f
 8006744:	d8f0      	bhi.n	8006728 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	647a      	str	r2, [r7, #68]	; 0x44
 800674c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800674e:	b2d2      	uxtb	r2, r2
 8006750:	701a      	strb	r2, [r3, #0]
 8006752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006754:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	63fb      	str	r3, [r7, #60]	; 0x3c
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006760:	e00b      	b.n	800677a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006764:	b2da      	uxtb	r2, r3
 8006766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006768:	1c59      	adds	r1, r3, #1
 800676a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800676c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006770:	b2d2      	uxtb	r2, r2
 8006772:	701a      	strb	r2, [r3, #0]
 8006774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006776:	09db      	lsrs	r3, r3, #7
 8006778:	63bb      	str	r3, [r7, #56]	; 0x38
 800677a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677c:	2b7f      	cmp	r3, #127	; 0x7f
 800677e:	d8f0      	bhi.n	8006762 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006782:	1c5a      	adds	r2, r3, #1
 8006784:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006786:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006788:	b2d2      	uxtb	r2, r2
 800678a:	701a      	strb	r2, [r3, #0]
 800678c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800678e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	2220      	movs	r2, #32
 8006796:	4619      	mov	r1, r3
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f7fe ff63 	bl	8005664 <_EncodeStr>
 800679e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80067a0:	2209      	movs	r2, #9
 80067a2:	68f9      	ldr	r1, [r7, #12]
 80067a4:	6938      	ldr	r0, [r7, #16]
 80067a6:	f7ff f89f 	bl	80058e8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	637b      	str	r3, [r7, #52]	; 0x34
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	4b40      	ldr	r3, [pc, #256]	; (80068b8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	633b      	str	r3, [r7, #48]	; 0x30
 80067be:	e00b      	b.n	80067d8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80067c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c6:	1c59      	adds	r1, r3, #1
 80067c8:	6379      	str	r1, [r7, #52]	; 0x34
 80067ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067ce:	b2d2      	uxtb	r2, r2
 80067d0:	701a      	strb	r2, [r3, #0]
 80067d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d4:	09db      	lsrs	r3, r3, #7
 80067d6:	633b      	str	r3, [r7, #48]	; 0x30
 80067d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067da:	2b7f      	cmp	r3, #127	; 0x7f
 80067dc:	d8f0      	bhi.n	80067c0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80067de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	637a      	str	r2, [r7, #52]	; 0x34
 80067e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067e6:	b2d2      	uxtb	r2, r2
 80067e8:	701a      	strb	r2, [r3, #0]
 80067ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80067f8:	e00b      	b.n	8006812 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80067fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006800:	1c59      	adds	r1, r3, #1
 8006802:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006804:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006808:	b2d2      	uxtb	r2, r2
 800680a:	701a      	strb	r2, [r3, #0]
 800680c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680e:	09db      	lsrs	r3, r3, #7
 8006810:	62bb      	str	r3, [r7, #40]	; 0x28
 8006812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006814:	2b7f      	cmp	r3, #127	; 0x7f
 8006816:	d8f0      	bhi.n	80067fa <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800681e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006820:	b2d2      	uxtb	r2, r2
 8006822:	701a      	strb	r2, [r3, #0]
 8006824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006826:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	627b      	str	r3, [r7, #36]	; 0x24
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	623b      	str	r3, [r7, #32]
 8006832:	e00b      	b.n	800684c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006834:	6a3b      	ldr	r3, [r7, #32]
 8006836:	b2da      	uxtb	r2, r3
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	1c59      	adds	r1, r3, #1
 800683c:	6279      	str	r1, [r7, #36]	; 0x24
 800683e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006842:	b2d2      	uxtb	r2, r2
 8006844:	701a      	strb	r2, [r3, #0]
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	09db      	lsrs	r3, r3, #7
 800684a:	623b      	str	r3, [r7, #32]
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	2b7f      	cmp	r3, #127	; 0x7f
 8006850:	d8f0      	bhi.n	8006834 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006854:	1c5a      	adds	r2, r3, #1
 8006856:	627a      	str	r2, [r7, #36]	; 0x24
 8006858:	6a3a      	ldr	r2, [r7, #32]
 800685a:	b2d2      	uxtb	r2, r2
 800685c:	701a      	strb	r2, [r3, #0]
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	61fb      	str	r3, [r7, #28]
 8006866:	2300      	movs	r3, #0
 8006868:	61bb      	str	r3, [r7, #24]
 800686a:	e00b      	b.n	8006884 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	b2da      	uxtb	r2, r3
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	1c59      	adds	r1, r3, #1
 8006874:	61f9      	str	r1, [r7, #28]
 8006876:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800687a:	b2d2      	uxtb	r2, r2
 800687c:	701a      	strb	r2, [r3, #0]
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	09db      	lsrs	r3, r3, #7
 8006882:	61bb      	str	r3, [r7, #24]
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	2b7f      	cmp	r3, #127	; 0x7f
 8006888:	d8f0      	bhi.n	800686c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	1c5a      	adds	r2, r3, #1
 800688e:	61fa      	str	r2, [r7, #28]
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	b2d2      	uxtb	r2, r2
 8006894:	701a      	strb	r2, [r3, #0]
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800689a:	2215      	movs	r2, #21
 800689c:	68f9      	ldr	r1, [r7, #12]
 800689e:	6938      	ldr	r0, [r7, #16]
 80068a0:	f7ff f822 	bl	80058e8 <_SendPacket>
  RECORD_END();
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f383 8811 	msr	BASEPRI, r3
}
 80068aa:	bf00      	nop
 80068ac:	3748      	adds	r7, #72	; 0x48
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	2000cebc 	.word	0x2000cebc
 80068b8:	2000ce8c 	.word	0x2000ce8c

080068bc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80068bc:	b580      	push	{r7, lr}
 80068be:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80068c0:	4b07      	ldr	r3, [pc, #28]	; (80068e0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d008      	beq.n	80068da <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80068c8:	4b05      	ldr	r3, [pc, #20]	; (80068e0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80068d2:	4b03      	ldr	r3, [pc, #12]	; (80068e0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	4798      	blx	r3
  }
}
 80068da:	bf00      	nop
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	2000ce8c 	.word	0x2000ce8c

080068e4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b086      	sub	sp, #24
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80068ec:	f3ef 8311 	mrs	r3, BASEPRI
 80068f0:	f04f 0120 	mov.w	r1, #32
 80068f4:	f381 8811 	msr	BASEPRI, r1
 80068f8:	617b      	str	r3, [r7, #20]
 80068fa:	480b      	ldr	r0, [pc, #44]	; (8006928 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80068fc:	f7fe ff02 	bl	8005704 <_PreparePacket>
 8006900:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006902:	2280      	movs	r2, #128	; 0x80
 8006904:	6879      	ldr	r1, [r7, #4]
 8006906:	6938      	ldr	r0, [r7, #16]
 8006908:	f7fe feac 	bl	8005664 <_EncodeStr>
 800690c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800690e:	220e      	movs	r2, #14
 8006910:	68f9      	ldr	r1, [r7, #12]
 8006912:	6938      	ldr	r0, [r7, #16]
 8006914:	f7fe ffe8 	bl	80058e8 <_SendPacket>
  RECORD_END();
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f383 8811 	msr	BASEPRI, r3
}
 800691e:	bf00      	nop
 8006920:	3718      	adds	r7, #24
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	2000cebc 	.word	0x2000cebc

0800692c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800692c:	b590      	push	{r4, r7, lr}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006932:	4b15      	ldr	r3, [pc, #84]	; (8006988 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d01a      	beq.n	8006970 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800693a:	4b13      	ldr	r3, [pc, #76]	; (8006988 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d015      	beq.n	8006970 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006944:	4b10      	ldr	r3, [pc, #64]	; (8006988 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006946:	6a1b      	ldr	r3, [r3, #32]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4798      	blx	r3
 800694c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006950:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006952:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006956:	f04f 0200 	mov.w	r2, #0
 800695a:	f04f 0300 	mov.w	r3, #0
 800695e:	000a      	movs	r2, r1
 8006960:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006962:	4613      	mov	r3, r2
 8006964:	461a      	mov	r2, r3
 8006966:	4621      	mov	r1, r4
 8006968:	200d      	movs	r0, #13
 800696a:	f7ff fced 	bl	8006348 <SEGGER_SYSVIEW_RecordU32x2>
 800696e:	e006      	b.n	800697e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006970:	4b06      	ldr	r3, [pc, #24]	; (800698c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4619      	mov	r1, r3
 8006976:	200c      	movs	r0, #12
 8006978:	f7ff fcaa 	bl	80062d0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800697c:	bf00      	nop
 800697e:	bf00      	nop
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	bd90      	pop	{r4, r7, pc}
 8006986:	bf00      	nop
 8006988:	2000ce8c 	.word	0x2000ce8c
 800698c:	e0001004 	.word	0xe0001004

08006990 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006996:	f3ef 8311 	mrs	r3, BASEPRI
 800699a:	f04f 0120 	mov.w	r1, #32
 800699e:	f381 8811 	msr	BASEPRI, r1
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	4819      	ldr	r0, [pc, #100]	; (8006a0c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80069a6:	f7fe fead 	bl	8005704 <_PreparePacket>
 80069aa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80069b0:	4b17      	ldr	r3, [pc, #92]	; (8006a10 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069b8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	617b      	str	r3, [r7, #20]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	613b      	str	r3, [r7, #16]
 80069c2:	e00b      	b.n	80069dc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	1c59      	adds	r1, r3, #1
 80069cc:	6179      	str	r1, [r7, #20]
 80069ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069d2:	b2d2      	uxtb	r2, r2
 80069d4:	701a      	strb	r2, [r3, #0]
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	09db      	lsrs	r3, r3, #7
 80069da:	613b      	str	r3, [r7, #16]
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	2b7f      	cmp	r3, #127	; 0x7f
 80069e0:	d8f0      	bhi.n	80069c4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	1c5a      	adds	r2, r3, #1
 80069e6:	617a      	str	r2, [r7, #20]
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	b2d2      	uxtb	r2, r2
 80069ec:	701a      	strb	r2, [r3, #0]
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80069f2:	2202      	movs	r2, #2
 80069f4:	6879      	ldr	r1, [r7, #4]
 80069f6:	68b8      	ldr	r0, [r7, #8]
 80069f8:	f7fe ff76 	bl	80058e8 <_SendPacket>
  RECORD_END();
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f383 8811 	msr	BASEPRI, r3
}
 8006a02:	bf00      	nop
 8006a04:	3718      	adds	r7, #24
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	2000cebc 	.word	0x2000cebc
 8006a10:	e000ed04 	.word	0xe000ed04

08006a14 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a1a:	f3ef 8311 	mrs	r3, BASEPRI
 8006a1e:	f04f 0120 	mov.w	r1, #32
 8006a22:	f381 8811 	msr	BASEPRI, r1
 8006a26:	607b      	str	r3, [r7, #4]
 8006a28:	4807      	ldr	r0, [pc, #28]	; (8006a48 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006a2a:	f7fe fe6b 	bl	8005704 <_PreparePacket>
 8006a2e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006a30:	2203      	movs	r2, #3
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6838      	ldr	r0, [r7, #0]
 8006a36:	f7fe ff57 	bl	80058e8 <_SendPacket>
  RECORD_END();
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f383 8811 	msr	BASEPRI, r3
}
 8006a40:	bf00      	nop
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	2000cebc 	.word	0x2000cebc

08006a4c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a52:	f3ef 8311 	mrs	r3, BASEPRI
 8006a56:	f04f 0120 	mov.w	r1, #32
 8006a5a:	f381 8811 	msr	BASEPRI, r1
 8006a5e:	607b      	str	r3, [r7, #4]
 8006a60:	4807      	ldr	r0, [pc, #28]	; (8006a80 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006a62:	f7fe fe4f 	bl	8005704 <_PreparePacket>
 8006a66:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006a68:	2212      	movs	r2, #18
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	6838      	ldr	r0, [r7, #0]
 8006a6e:	f7fe ff3b 	bl	80058e8 <_SendPacket>
  RECORD_END();
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f383 8811 	msr	BASEPRI, r3
}
 8006a78:	bf00      	nop
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	2000cebc 	.word	0x2000cebc

08006a84 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a8a:	f3ef 8311 	mrs	r3, BASEPRI
 8006a8e:	f04f 0120 	mov.w	r1, #32
 8006a92:	f381 8811 	msr	BASEPRI, r1
 8006a96:	607b      	str	r3, [r7, #4]
 8006a98:	4807      	ldr	r0, [pc, #28]	; (8006ab8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006a9a:	f7fe fe33 	bl	8005704 <_PreparePacket>
 8006a9e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006aa0:	2211      	movs	r2, #17
 8006aa2:	6839      	ldr	r1, [r7, #0]
 8006aa4:	6838      	ldr	r0, [r7, #0]
 8006aa6:	f7fe ff1f 	bl	80058e8 <_SendPacket>
  RECORD_END();
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f383 8811 	msr	BASEPRI, r3
}
 8006ab0:	bf00      	nop
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	2000cebc 	.word	0x2000cebc

08006abc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b088      	sub	sp, #32
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ac4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ac8:	f04f 0120 	mov.w	r1, #32
 8006acc:	f381 8811 	msr	BASEPRI, r1
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	4819      	ldr	r0, [pc, #100]	; (8006b38 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006ad4:	f7fe fe16 	bl	8005704 <_PreparePacket>
 8006ad8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ade:	4b17      	ldr	r3, [pc, #92]	; (8006b3c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	61fb      	str	r3, [r7, #28]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	61bb      	str	r3, [r7, #24]
 8006af0:	e00b      	b.n	8006b0a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	b2da      	uxtb	r2, r3
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	1c59      	adds	r1, r3, #1
 8006afa:	61f9      	str	r1, [r7, #28]
 8006afc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b00:	b2d2      	uxtb	r2, r2
 8006b02:	701a      	strb	r2, [r3, #0]
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	09db      	lsrs	r3, r3, #7
 8006b08:	61bb      	str	r3, [r7, #24]
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b0e:	d8f0      	bhi.n	8006af2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	1c5a      	adds	r2, r3, #1
 8006b14:	61fa      	str	r2, [r7, #28]
 8006b16:	69ba      	ldr	r2, [r7, #24]
 8006b18:	b2d2      	uxtb	r2, r2
 8006b1a:	701a      	strb	r2, [r3, #0]
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006b20:	2208      	movs	r2, #8
 8006b22:	68f9      	ldr	r1, [r7, #12]
 8006b24:	6938      	ldr	r0, [r7, #16]
 8006b26:	f7fe fedf 	bl	80058e8 <_SendPacket>
  RECORD_END();
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f383 8811 	msr	BASEPRI, r3
}
 8006b30:	bf00      	nop
 8006b32:	3720      	adds	r7, #32
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	2000cebc 	.word	0x2000cebc
 8006b3c:	2000ce8c 	.word	0x2000ce8c

08006b40 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b088      	sub	sp, #32
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b48:	f3ef 8311 	mrs	r3, BASEPRI
 8006b4c:	f04f 0120 	mov.w	r1, #32
 8006b50:	f381 8811 	msr	BASEPRI, r1
 8006b54:	617b      	str	r3, [r7, #20]
 8006b56:	4819      	ldr	r0, [pc, #100]	; (8006bbc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006b58:	f7fe fdd4 	bl	8005704 <_PreparePacket>
 8006b5c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b62:	4b17      	ldr	r3, [pc, #92]	; (8006bc0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	61fb      	str	r3, [r7, #28]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	61bb      	str	r3, [r7, #24]
 8006b74:	e00b      	b.n	8006b8e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	1c59      	adds	r1, r3, #1
 8006b7e:	61f9      	str	r1, [r7, #28]
 8006b80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b84:	b2d2      	uxtb	r2, r2
 8006b86:	701a      	strb	r2, [r3, #0]
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	09db      	lsrs	r3, r3, #7
 8006b8c:	61bb      	str	r3, [r7, #24]
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	2b7f      	cmp	r3, #127	; 0x7f
 8006b92:	d8f0      	bhi.n	8006b76 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	1c5a      	adds	r2, r3, #1
 8006b98:	61fa      	str	r2, [r7, #28]
 8006b9a:	69ba      	ldr	r2, [r7, #24]
 8006b9c:	b2d2      	uxtb	r2, r2
 8006b9e:	701a      	strb	r2, [r3, #0]
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006ba4:	2204      	movs	r2, #4
 8006ba6:	68f9      	ldr	r1, [r7, #12]
 8006ba8:	6938      	ldr	r0, [r7, #16]
 8006baa:	f7fe fe9d 	bl	80058e8 <_SendPacket>
  RECORD_END();
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f383 8811 	msr	BASEPRI, r3
}
 8006bb4:	bf00      	nop
 8006bb6:	3720      	adds	r7, #32
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	2000cebc 	.word	0x2000cebc
 8006bc0:	2000ce8c 	.word	0x2000ce8c

08006bc4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b088      	sub	sp, #32
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006bcc:	f3ef 8311 	mrs	r3, BASEPRI
 8006bd0:	f04f 0120 	mov.w	r1, #32
 8006bd4:	f381 8811 	msr	BASEPRI, r1
 8006bd8:	617b      	str	r3, [r7, #20]
 8006bda:	4819      	ldr	r0, [pc, #100]	; (8006c40 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006bdc:	f7fe fd92 	bl	8005704 <_PreparePacket>
 8006be0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006be6:	4b17      	ldr	r3, [pc, #92]	; (8006c44 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	61fb      	str	r3, [r7, #28]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	61bb      	str	r3, [r7, #24]
 8006bf8:	e00b      	b.n	8006c12 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	1c59      	adds	r1, r3, #1
 8006c02:	61f9      	str	r1, [r7, #28]
 8006c04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c08:	b2d2      	uxtb	r2, r2
 8006c0a:	701a      	strb	r2, [r3, #0]
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	09db      	lsrs	r3, r3, #7
 8006c10:	61bb      	str	r3, [r7, #24]
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	2b7f      	cmp	r3, #127	; 0x7f
 8006c16:	d8f0      	bhi.n	8006bfa <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	61fa      	str	r2, [r7, #28]
 8006c1e:	69ba      	ldr	r2, [r7, #24]
 8006c20:	b2d2      	uxtb	r2, r2
 8006c22:	701a      	strb	r2, [r3, #0]
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006c28:	2206      	movs	r2, #6
 8006c2a:	68f9      	ldr	r1, [r7, #12]
 8006c2c:	6938      	ldr	r0, [r7, #16]
 8006c2e:	f7fe fe5b 	bl	80058e8 <_SendPacket>
  RECORD_END();
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	f383 8811 	msr	BASEPRI, r3
}
 8006c38:	bf00      	nop
 8006c3a:	3720      	adds	r7, #32
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	2000cebc 	.word	0x2000cebc
 8006c44:	2000ce8c 	.word	0x2000ce8c

08006c48 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b08c      	sub	sp, #48	; 0x30
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	4603      	mov	r3, r0
 8006c50:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006c52:	4b3b      	ldr	r3, [pc, #236]	; (8006d40 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d06d      	beq.n	8006d36 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006c5a:	4b39      	ldr	r3, [pc, #228]	; (8006d40 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006c60:	2300      	movs	r3, #0
 8006c62:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c64:	e008      	b.n	8006c78 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d007      	beq.n	8006c82 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c74:	3301      	adds	r3, #1
 8006c76:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c78:	79fb      	ldrb	r3, [r7, #7]
 8006c7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d3f2      	bcc.n	8006c66 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006c80:	e000      	b.n	8006c84 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006c82:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d055      	beq.n	8006d36 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c8a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c8e:	f04f 0120 	mov.w	r1, #32
 8006c92:	f381 8811 	msr	BASEPRI, r1
 8006c96:	617b      	str	r3, [r7, #20]
 8006c98:	482a      	ldr	r0, [pc, #168]	; (8006d44 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006c9a:	f7fe fd33 	bl	8005704 <_PreparePacket>
 8006c9e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ca8:	79fb      	ldrb	r3, [r7, #7]
 8006caa:	623b      	str	r3, [r7, #32]
 8006cac:	e00b      	b.n	8006cc6 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	1c59      	adds	r1, r3, #1
 8006cb6:	6279      	str	r1, [r7, #36]	; 0x24
 8006cb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cbc:	b2d2      	uxtb	r2, r2
 8006cbe:	701a      	strb	r2, [r3, #0]
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	09db      	lsrs	r3, r3, #7
 8006cc4:	623b      	str	r3, [r7, #32]
 8006cc6:	6a3b      	ldr	r3, [r7, #32]
 8006cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8006cca:	d8f0      	bhi.n	8006cae <SEGGER_SYSVIEW_SendModule+0x66>
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	1c5a      	adds	r2, r3, #1
 8006cd0:	627a      	str	r2, [r7, #36]	; 0x24
 8006cd2:	6a3a      	ldr	r2, [r7, #32]
 8006cd4:	b2d2      	uxtb	r2, r2
 8006cd6:	701a      	strb	r2, [r3, #0]
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	61fb      	str	r3, [r7, #28]
 8006ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	61bb      	str	r3, [r7, #24]
 8006ce6:	e00b      	b.n	8006d00 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	b2da      	uxtb	r2, r3
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	1c59      	adds	r1, r3, #1
 8006cf0:	61f9      	str	r1, [r7, #28]
 8006cf2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cf6:	b2d2      	uxtb	r2, r2
 8006cf8:	701a      	strb	r2, [r3, #0]
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	09db      	lsrs	r3, r3, #7
 8006cfe:	61bb      	str	r3, [r7, #24]
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	2b7f      	cmp	r3, #127	; 0x7f
 8006d04:	d8f0      	bhi.n	8006ce8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	1c5a      	adds	r2, r3, #1
 8006d0a:	61fa      	str	r2, [r7, #28]
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	b2d2      	uxtb	r2, r2
 8006d10:	701a      	strb	r2, [r3, #0]
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2280      	movs	r2, #128	; 0x80
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	f7fe fca0 	bl	8005664 <_EncodeStr>
 8006d24:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006d26:	2216      	movs	r2, #22
 8006d28:	68f9      	ldr	r1, [r7, #12]
 8006d2a:	6938      	ldr	r0, [r7, #16]
 8006d2c:	f7fe fddc 	bl	80058e8 <_SendPacket>
      RECORD_END();
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006d36:	bf00      	nop
 8006d38:	3730      	adds	r7, #48	; 0x30
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	2000ceb4 	.word	0x2000ceb4
 8006d44:	2000cebc 	.word	0x2000cebc

08006d48 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006d4e:	4b0c      	ldr	r3, [pc, #48]	; (8006d80 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00f      	beq.n	8006d76 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006d56:	4b0a      	ldr	r3, [pc, #40]	; (8006d80 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1f2      	bne.n	8006d5c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006d76:	bf00      	nop
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	2000ceb4 	.word	0x2000ceb4

08006d84 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006d8a:	f3ef 8311 	mrs	r3, BASEPRI
 8006d8e:	f04f 0120 	mov.w	r1, #32
 8006d92:	f381 8811 	msr	BASEPRI, r1
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	4817      	ldr	r0, [pc, #92]	; (8006df8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006d9a:	f7fe fcb3 	bl	8005704 <_PreparePacket>
 8006d9e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	617b      	str	r3, [r7, #20]
 8006da8:	4b14      	ldr	r3, [pc, #80]	; (8006dfc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	613b      	str	r3, [r7, #16]
 8006dae:	e00b      	b.n	8006dc8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	1c59      	adds	r1, r3, #1
 8006db8:	6179      	str	r1, [r7, #20]
 8006dba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dbe:	b2d2      	uxtb	r2, r2
 8006dc0:	701a      	strb	r2, [r3, #0]
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	09db      	lsrs	r3, r3, #7
 8006dc6:	613b      	str	r3, [r7, #16]
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	2b7f      	cmp	r3, #127	; 0x7f
 8006dcc:	d8f0      	bhi.n	8006db0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	617a      	str	r2, [r7, #20]
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	b2d2      	uxtb	r2, r2
 8006dd8:	701a      	strb	r2, [r3, #0]
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006dde:	221b      	movs	r2, #27
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	68b8      	ldr	r0, [r7, #8]
 8006de4:	f7fe fd80 	bl	80058e8 <_SendPacket>
  RECORD_END();
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f383 8811 	msr	BASEPRI, r3
}
 8006dee:	bf00      	nop
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	2000cebc 	.word	0x2000cebc
 8006dfc:	2000ceb8 	.word	0x2000ceb8

08006e00 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006e00:	b40f      	push	{r0, r1, r2, r3}
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b082      	sub	sp, #8
 8006e06:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006e08:	f107 0314 	add.w	r3, r7, #20
 8006e0c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006e0e:	1d3b      	adds	r3, r7, #4
 8006e10:	461a      	mov	r2, r3
 8006e12:	2100      	movs	r1, #0
 8006e14:	6938      	ldr	r0, [r7, #16]
 8006e16:	f7fe fff1 	bl	8005dfc <_VPrintTarget>
  va_end(ParamList);
}
 8006e1a:	bf00      	nop
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e24:	b004      	add	sp, #16
 8006e26:	4770      	bx	lr

08006e28 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b08a      	sub	sp, #40	; 0x28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e30:	f3ef 8311 	mrs	r3, BASEPRI
 8006e34:	f04f 0120 	mov.w	r1, #32
 8006e38:	f381 8811 	msr	BASEPRI, r1
 8006e3c:	617b      	str	r3, [r7, #20]
 8006e3e:	4827      	ldr	r0, [pc, #156]	; (8006edc <SEGGER_SYSVIEW_Warn+0xb4>)
 8006e40:	f7fe fc60 	bl	8005704 <_PreparePacket>
 8006e44:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e46:	2280      	movs	r2, #128	; 0x80
 8006e48:	6879      	ldr	r1, [r7, #4]
 8006e4a:	6938      	ldr	r0, [r7, #16]
 8006e4c:	f7fe fc0a 	bl	8005664 <_EncodeStr>
 8006e50:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	627b      	str	r3, [r7, #36]	; 0x24
 8006e56:	2301      	movs	r3, #1
 8006e58:	623b      	str	r3, [r7, #32]
 8006e5a:	e00b      	b.n	8006e74 <SEGGER_SYSVIEW_Warn+0x4c>
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	1c59      	adds	r1, r3, #1
 8006e64:	6279      	str	r1, [r7, #36]	; 0x24
 8006e66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e6a:	b2d2      	uxtb	r2, r2
 8006e6c:	701a      	strb	r2, [r3, #0]
 8006e6e:	6a3b      	ldr	r3, [r7, #32]
 8006e70:	09db      	lsrs	r3, r3, #7
 8006e72:	623b      	str	r3, [r7, #32]
 8006e74:	6a3b      	ldr	r3, [r7, #32]
 8006e76:	2b7f      	cmp	r3, #127	; 0x7f
 8006e78:	d8f0      	bhi.n	8006e5c <SEGGER_SYSVIEW_Warn+0x34>
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	1c5a      	adds	r2, r3, #1
 8006e7e:	627a      	str	r2, [r7, #36]	; 0x24
 8006e80:	6a3a      	ldr	r2, [r7, #32]
 8006e82:	b2d2      	uxtb	r2, r2
 8006e84:	701a      	strb	r2, [r3, #0]
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	61fb      	str	r3, [r7, #28]
 8006e8e:	2300      	movs	r3, #0
 8006e90:	61bb      	str	r3, [r7, #24]
 8006e92:	e00b      	b.n	8006eac <SEGGER_SYSVIEW_Warn+0x84>
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	1c59      	adds	r1, r3, #1
 8006e9c:	61f9      	str	r1, [r7, #28]
 8006e9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ea2:	b2d2      	uxtb	r2, r2
 8006ea4:	701a      	strb	r2, [r3, #0]
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	09db      	lsrs	r3, r3, #7
 8006eaa:	61bb      	str	r3, [r7, #24]
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	2b7f      	cmp	r3, #127	; 0x7f
 8006eb0:	d8f0      	bhi.n	8006e94 <SEGGER_SYSVIEW_Warn+0x6c>
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	1c5a      	adds	r2, r3, #1
 8006eb6:	61fa      	str	r2, [r7, #28]
 8006eb8:	69ba      	ldr	r2, [r7, #24]
 8006eba:	b2d2      	uxtb	r2, r2
 8006ebc:	701a      	strb	r2, [r3, #0]
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006ec2:	221a      	movs	r2, #26
 8006ec4:	68f9      	ldr	r1, [r7, #12]
 8006ec6:	6938      	ldr	r0, [r7, #16]
 8006ec8:	f7fe fd0e 	bl	80058e8 <_SendPacket>
  RECORD_END();
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	f383 8811 	msr	BASEPRI, r3
}
 8006ed2:	bf00      	nop
 8006ed4:	3728      	adds	r7, #40	; 0x28
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	2000cebc 	.word	0x2000cebc

08006ee0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006ee4:	4b13      	ldr	r3, [pc, #76]	; (8006f34 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006ee6:	7e1b      	ldrb	r3, [r3, #24]
 8006ee8:	4619      	mov	r1, r3
 8006eea:	4a13      	ldr	r2, [pc, #76]	; (8006f38 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006eec:	460b      	mov	r3, r1
 8006eee:	005b      	lsls	r3, r3, #1
 8006ef0:	440b      	add	r3, r1
 8006ef2:	00db      	lsls	r3, r3, #3
 8006ef4:	4413      	add	r3, r2
 8006ef6:	336c      	adds	r3, #108	; 0x6c
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	4b0e      	ldr	r3, [pc, #56]	; (8006f34 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006efc:	7e1b      	ldrb	r3, [r3, #24]
 8006efe:	4618      	mov	r0, r3
 8006f00:	490d      	ldr	r1, [pc, #52]	; (8006f38 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006f02:	4603      	mov	r3, r0
 8006f04:	005b      	lsls	r3, r3, #1
 8006f06:	4403      	add	r3, r0
 8006f08:	00db      	lsls	r3, r3, #3
 8006f0a:	440b      	add	r3, r1
 8006f0c:	3370      	adds	r3, #112	; 0x70
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d00b      	beq.n	8006f2c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006f14:	4b07      	ldr	r3, [pc, #28]	; (8006f34 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f16:	789b      	ldrb	r3, [r3, #2]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d107      	bne.n	8006f2c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006f1c:	4b05      	ldr	r3, [pc, #20]	; (8006f34 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f1e:	2201      	movs	r2, #1
 8006f20:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006f22:	f7fe fbfb 	bl	800571c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006f26:	4b03      	ldr	r3, [pc, #12]	; (8006f34 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006f2c:	4b01      	ldr	r3, [pc, #4]	; (8006f34 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f2e:	781b      	ldrb	r3, [r3, #0]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	2000ce8c 	.word	0x2000ce8c
 8006f38:	2000d08c 	.word	0x2000d08c

08006f3c <__libc_init_array>:
 8006f3c:	b570      	push	{r4, r5, r6, lr}
 8006f3e:	4d0d      	ldr	r5, [pc, #52]	; (8006f74 <__libc_init_array+0x38>)
 8006f40:	4c0d      	ldr	r4, [pc, #52]	; (8006f78 <__libc_init_array+0x3c>)
 8006f42:	1b64      	subs	r4, r4, r5
 8006f44:	10a4      	asrs	r4, r4, #2
 8006f46:	2600      	movs	r6, #0
 8006f48:	42a6      	cmp	r6, r4
 8006f4a:	d109      	bne.n	8006f60 <__libc_init_array+0x24>
 8006f4c:	4d0b      	ldr	r5, [pc, #44]	; (8006f7c <__libc_init_array+0x40>)
 8006f4e:	4c0c      	ldr	r4, [pc, #48]	; (8006f80 <__libc_init_array+0x44>)
 8006f50:	f000 fc7e 	bl	8007850 <_init>
 8006f54:	1b64      	subs	r4, r4, r5
 8006f56:	10a4      	asrs	r4, r4, #2
 8006f58:	2600      	movs	r6, #0
 8006f5a:	42a6      	cmp	r6, r4
 8006f5c:	d105      	bne.n	8006f6a <__libc_init_array+0x2e>
 8006f5e:	bd70      	pop	{r4, r5, r6, pc}
 8006f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f64:	4798      	blx	r3
 8006f66:	3601      	adds	r6, #1
 8006f68:	e7ee      	b.n	8006f48 <__libc_init_array+0xc>
 8006f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f6e:	4798      	blx	r3
 8006f70:	3601      	adds	r6, #1
 8006f72:	e7f2      	b.n	8006f5a <__libc_init_array+0x1e>
 8006f74:	08007b30 	.word	0x08007b30
 8006f78:	08007b30 	.word	0x08007b30
 8006f7c:	08007b30 	.word	0x08007b30
 8006f80:	08007b34 	.word	0x08007b34

08006f84 <memcmp>:
 8006f84:	b530      	push	{r4, r5, lr}
 8006f86:	3901      	subs	r1, #1
 8006f88:	2400      	movs	r4, #0
 8006f8a:	42a2      	cmp	r2, r4
 8006f8c:	d101      	bne.n	8006f92 <memcmp+0xe>
 8006f8e:	2000      	movs	r0, #0
 8006f90:	e005      	b.n	8006f9e <memcmp+0x1a>
 8006f92:	5d03      	ldrb	r3, [r0, r4]
 8006f94:	3401      	adds	r4, #1
 8006f96:	5d0d      	ldrb	r5, [r1, r4]
 8006f98:	42ab      	cmp	r3, r5
 8006f9a:	d0f6      	beq.n	8006f8a <memcmp+0x6>
 8006f9c:	1b58      	subs	r0, r3, r5
 8006f9e:	bd30      	pop	{r4, r5, pc}

08006fa0 <memcpy>:
 8006fa0:	440a      	add	r2, r1
 8006fa2:	4291      	cmp	r1, r2
 8006fa4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006fa8:	d100      	bne.n	8006fac <memcpy+0xc>
 8006faa:	4770      	bx	lr
 8006fac:	b510      	push	{r4, lr}
 8006fae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fb6:	4291      	cmp	r1, r2
 8006fb8:	d1f9      	bne.n	8006fae <memcpy+0xe>
 8006fba:	bd10      	pop	{r4, pc}

08006fbc <memset>:
 8006fbc:	4402      	add	r2, r0
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d100      	bne.n	8006fc6 <memset+0xa>
 8006fc4:	4770      	bx	lr
 8006fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8006fca:	e7f9      	b.n	8006fc0 <memset+0x4>

08006fcc <sniprintf>:
 8006fcc:	b40c      	push	{r2, r3}
 8006fce:	b530      	push	{r4, r5, lr}
 8006fd0:	4b17      	ldr	r3, [pc, #92]	; (8007030 <sniprintf+0x64>)
 8006fd2:	1e0c      	subs	r4, r1, #0
 8006fd4:	681d      	ldr	r5, [r3, #0]
 8006fd6:	b09d      	sub	sp, #116	; 0x74
 8006fd8:	da08      	bge.n	8006fec <sniprintf+0x20>
 8006fda:	238b      	movs	r3, #139	; 0x8b
 8006fdc:	602b      	str	r3, [r5, #0]
 8006fde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fe2:	b01d      	add	sp, #116	; 0x74
 8006fe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fe8:	b002      	add	sp, #8
 8006fea:	4770      	bx	lr
 8006fec:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006ff0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006ff4:	bf14      	ite	ne
 8006ff6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006ffa:	4623      	moveq	r3, r4
 8006ffc:	9304      	str	r3, [sp, #16]
 8006ffe:	9307      	str	r3, [sp, #28]
 8007000:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007004:	9002      	str	r0, [sp, #8]
 8007006:	9006      	str	r0, [sp, #24]
 8007008:	f8ad 3016 	strh.w	r3, [sp, #22]
 800700c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800700e:	ab21      	add	r3, sp, #132	; 0x84
 8007010:	a902      	add	r1, sp, #8
 8007012:	4628      	mov	r0, r5
 8007014:	9301      	str	r3, [sp, #4]
 8007016:	f000 f8c5 	bl	80071a4 <_svfiprintf_r>
 800701a:	1c43      	adds	r3, r0, #1
 800701c:	bfbc      	itt	lt
 800701e:	238b      	movlt	r3, #139	; 0x8b
 8007020:	602b      	strlt	r3, [r5, #0]
 8007022:	2c00      	cmp	r4, #0
 8007024:	d0dd      	beq.n	8006fe2 <sniprintf+0x16>
 8007026:	9b02      	ldr	r3, [sp, #8]
 8007028:	2200      	movs	r2, #0
 800702a:	701a      	strb	r2, [r3, #0]
 800702c:	e7d9      	b.n	8006fe2 <sniprintf+0x16>
 800702e:	bf00      	nop
 8007030:	2000001c 	.word	0x2000001c

08007034 <__retarget_lock_acquire_recursive>:
 8007034:	4770      	bx	lr

08007036 <__retarget_lock_release_recursive>:
 8007036:	4770      	bx	lr

08007038 <_malloc_r>:
 8007038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800703a:	1ccd      	adds	r5, r1, #3
 800703c:	f025 0503 	bic.w	r5, r5, #3
 8007040:	3508      	adds	r5, #8
 8007042:	2d0c      	cmp	r5, #12
 8007044:	bf38      	it	cc
 8007046:	250c      	movcc	r5, #12
 8007048:	2d00      	cmp	r5, #0
 800704a:	4606      	mov	r6, r0
 800704c:	db01      	blt.n	8007052 <_malloc_r+0x1a>
 800704e:	42a9      	cmp	r1, r5
 8007050:	d903      	bls.n	800705a <_malloc_r+0x22>
 8007052:	230c      	movs	r3, #12
 8007054:	6033      	str	r3, [r6, #0]
 8007056:	2000      	movs	r0, #0
 8007058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800705a:	f000 fb61 	bl	8007720 <__malloc_lock>
 800705e:	4921      	ldr	r1, [pc, #132]	; (80070e4 <_malloc_r+0xac>)
 8007060:	680a      	ldr	r2, [r1, #0]
 8007062:	4614      	mov	r4, r2
 8007064:	b99c      	cbnz	r4, 800708e <_malloc_r+0x56>
 8007066:	4f20      	ldr	r7, [pc, #128]	; (80070e8 <_malloc_r+0xb0>)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	b923      	cbnz	r3, 8007076 <_malloc_r+0x3e>
 800706c:	4621      	mov	r1, r4
 800706e:	4630      	mov	r0, r6
 8007070:	f000 fb2c 	bl	80076cc <_sbrk_r>
 8007074:	6038      	str	r0, [r7, #0]
 8007076:	4629      	mov	r1, r5
 8007078:	4630      	mov	r0, r6
 800707a:	f000 fb27 	bl	80076cc <_sbrk_r>
 800707e:	1c43      	adds	r3, r0, #1
 8007080:	d123      	bne.n	80070ca <_malloc_r+0x92>
 8007082:	230c      	movs	r3, #12
 8007084:	6033      	str	r3, [r6, #0]
 8007086:	4630      	mov	r0, r6
 8007088:	f000 fb50 	bl	800772c <__malloc_unlock>
 800708c:	e7e3      	b.n	8007056 <_malloc_r+0x1e>
 800708e:	6823      	ldr	r3, [r4, #0]
 8007090:	1b5b      	subs	r3, r3, r5
 8007092:	d417      	bmi.n	80070c4 <_malloc_r+0x8c>
 8007094:	2b0b      	cmp	r3, #11
 8007096:	d903      	bls.n	80070a0 <_malloc_r+0x68>
 8007098:	6023      	str	r3, [r4, #0]
 800709a:	441c      	add	r4, r3
 800709c:	6025      	str	r5, [r4, #0]
 800709e:	e004      	b.n	80070aa <_malloc_r+0x72>
 80070a0:	6863      	ldr	r3, [r4, #4]
 80070a2:	42a2      	cmp	r2, r4
 80070a4:	bf0c      	ite	eq
 80070a6:	600b      	streq	r3, [r1, #0]
 80070a8:	6053      	strne	r3, [r2, #4]
 80070aa:	4630      	mov	r0, r6
 80070ac:	f000 fb3e 	bl	800772c <__malloc_unlock>
 80070b0:	f104 000b 	add.w	r0, r4, #11
 80070b4:	1d23      	adds	r3, r4, #4
 80070b6:	f020 0007 	bic.w	r0, r0, #7
 80070ba:	1ac2      	subs	r2, r0, r3
 80070bc:	d0cc      	beq.n	8007058 <_malloc_r+0x20>
 80070be:	1a1b      	subs	r3, r3, r0
 80070c0:	50a3      	str	r3, [r4, r2]
 80070c2:	e7c9      	b.n	8007058 <_malloc_r+0x20>
 80070c4:	4622      	mov	r2, r4
 80070c6:	6864      	ldr	r4, [r4, #4]
 80070c8:	e7cc      	b.n	8007064 <_malloc_r+0x2c>
 80070ca:	1cc4      	adds	r4, r0, #3
 80070cc:	f024 0403 	bic.w	r4, r4, #3
 80070d0:	42a0      	cmp	r0, r4
 80070d2:	d0e3      	beq.n	800709c <_malloc_r+0x64>
 80070d4:	1a21      	subs	r1, r4, r0
 80070d6:	4630      	mov	r0, r6
 80070d8:	f000 faf8 	bl	80076cc <_sbrk_r>
 80070dc:	3001      	adds	r0, #1
 80070de:	d1dd      	bne.n	800709c <_malloc_r+0x64>
 80070e0:	e7cf      	b.n	8007082 <_malloc_r+0x4a>
 80070e2:	bf00      	nop
 80070e4:	2000cfa0 	.word	0x2000cfa0
 80070e8:	2000cfa4 	.word	0x2000cfa4

080070ec <__ssputs_r>:
 80070ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070f0:	688e      	ldr	r6, [r1, #8]
 80070f2:	429e      	cmp	r6, r3
 80070f4:	4682      	mov	sl, r0
 80070f6:	460c      	mov	r4, r1
 80070f8:	4690      	mov	r8, r2
 80070fa:	461f      	mov	r7, r3
 80070fc:	d838      	bhi.n	8007170 <__ssputs_r+0x84>
 80070fe:	898a      	ldrh	r2, [r1, #12]
 8007100:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007104:	d032      	beq.n	800716c <__ssputs_r+0x80>
 8007106:	6825      	ldr	r5, [r4, #0]
 8007108:	6909      	ldr	r1, [r1, #16]
 800710a:	eba5 0901 	sub.w	r9, r5, r1
 800710e:	6965      	ldr	r5, [r4, #20]
 8007110:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007114:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007118:	3301      	adds	r3, #1
 800711a:	444b      	add	r3, r9
 800711c:	106d      	asrs	r5, r5, #1
 800711e:	429d      	cmp	r5, r3
 8007120:	bf38      	it	cc
 8007122:	461d      	movcc	r5, r3
 8007124:	0553      	lsls	r3, r2, #21
 8007126:	d531      	bpl.n	800718c <__ssputs_r+0xa0>
 8007128:	4629      	mov	r1, r5
 800712a:	f7ff ff85 	bl	8007038 <_malloc_r>
 800712e:	4606      	mov	r6, r0
 8007130:	b950      	cbnz	r0, 8007148 <__ssputs_r+0x5c>
 8007132:	230c      	movs	r3, #12
 8007134:	f8ca 3000 	str.w	r3, [sl]
 8007138:	89a3      	ldrh	r3, [r4, #12]
 800713a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800713e:	81a3      	strh	r3, [r4, #12]
 8007140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007148:	6921      	ldr	r1, [r4, #16]
 800714a:	464a      	mov	r2, r9
 800714c:	f7ff ff28 	bl	8006fa0 <memcpy>
 8007150:	89a3      	ldrh	r3, [r4, #12]
 8007152:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800715a:	81a3      	strh	r3, [r4, #12]
 800715c:	6126      	str	r6, [r4, #16]
 800715e:	6165      	str	r5, [r4, #20]
 8007160:	444e      	add	r6, r9
 8007162:	eba5 0509 	sub.w	r5, r5, r9
 8007166:	6026      	str	r6, [r4, #0]
 8007168:	60a5      	str	r5, [r4, #8]
 800716a:	463e      	mov	r6, r7
 800716c:	42be      	cmp	r6, r7
 800716e:	d900      	bls.n	8007172 <__ssputs_r+0x86>
 8007170:	463e      	mov	r6, r7
 8007172:	4632      	mov	r2, r6
 8007174:	6820      	ldr	r0, [r4, #0]
 8007176:	4641      	mov	r1, r8
 8007178:	f000 fab8 	bl	80076ec <memmove>
 800717c:	68a3      	ldr	r3, [r4, #8]
 800717e:	6822      	ldr	r2, [r4, #0]
 8007180:	1b9b      	subs	r3, r3, r6
 8007182:	4432      	add	r2, r6
 8007184:	60a3      	str	r3, [r4, #8]
 8007186:	6022      	str	r2, [r4, #0]
 8007188:	2000      	movs	r0, #0
 800718a:	e7db      	b.n	8007144 <__ssputs_r+0x58>
 800718c:	462a      	mov	r2, r5
 800718e:	f000 fb23 	bl	80077d8 <_realloc_r>
 8007192:	4606      	mov	r6, r0
 8007194:	2800      	cmp	r0, #0
 8007196:	d1e1      	bne.n	800715c <__ssputs_r+0x70>
 8007198:	6921      	ldr	r1, [r4, #16]
 800719a:	4650      	mov	r0, sl
 800719c:	f000 facc 	bl	8007738 <_free_r>
 80071a0:	e7c7      	b.n	8007132 <__ssputs_r+0x46>
	...

080071a4 <_svfiprintf_r>:
 80071a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a8:	4698      	mov	r8, r3
 80071aa:	898b      	ldrh	r3, [r1, #12]
 80071ac:	061b      	lsls	r3, r3, #24
 80071ae:	b09d      	sub	sp, #116	; 0x74
 80071b0:	4607      	mov	r7, r0
 80071b2:	460d      	mov	r5, r1
 80071b4:	4614      	mov	r4, r2
 80071b6:	d50e      	bpl.n	80071d6 <_svfiprintf_r+0x32>
 80071b8:	690b      	ldr	r3, [r1, #16]
 80071ba:	b963      	cbnz	r3, 80071d6 <_svfiprintf_r+0x32>
 80071bc:	2140      	movs	r1, #64	; 0x40
 80071be:	f7ff ff3b 	bl	8007038 <_malloc_r>
 80071c2:	6028      	str	r0, [r5, #0]
 80071c4:	6128      	str	r0, [r5, #16]
 80071c6:	b920      	cbnz	r0, 80071d2 <_svfiprintf_r+0x2e>
 80071c8:	230c      	movs	r3, #12
 80071ca:	603b      	str	r3, [r7, #0]
 80071cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071d0:	e0d1      	b.n	8007376 <_svfiprintf_r+0x1d2>
 80071d2:	2340      	movs	r3, #64	; 0x40
 80071d4:	616b      	str	r3, [r5, #20]
 80071d6:	2300      	movs	r3, #0
 80071d8:	9309      	str	r3, [sp, #36]	; 0x24
 80071da:	2320      	movs	r3, #32
 80071dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80071e4:	2330      	movs	r3, #48	; 0x30
 80071e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007390 <_svfiprintf_r+0x1ec>
 80071ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071ee:	f04f 0901 	mov.w	r9, #1
 80071f2:	4623      	mov	r3, r4
 80071f4:	469a      	mov	sl, r3
 80071f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071fa:	b10a      	cbz	r2, 8007200 <_svfiprintf_r+0x5c>
 80071fc:	2a25      	cmp	r2, #37	; 0x25
 80071fe:	d1f9      	bne.n	80071f4 <_svfiprintf_r+0x50>
 8007200:	ebba 0b04 	subs.w	fp, sl, r4
 8007204:	d00b      	beq.n	800721e <_svfiprintf_r+0x7a>
 8007206:	465b      	mov	r3, fp
 8007208:	4622      	mov	r2, r4
 800720a:	4629      	mov	r1, r5
 800720c:	4638      	mov	r0, r7
 800720e:	f7ff ff6d 	bl	80070ec <__ssputs_r>
 8007212:	3001      	adds	r0, #1
 8007214:	f000 80aa 	beq.w	800736c <_svfiprintf_r+0x1c8>
 8007218:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800721a:	445a      	add	r2, fp
 800721c:	9209      	str	r2, [sp, #36]	; 0x24
 800721e:	f89a 3000 	ldrb.w	r3, [sl]
 8007222:	2b00      	cmp	r3, #0
 8007224:	f000 80a2 	beq.w	800736c <_svfiprintf_r+0x1c8>
 8007228:	2300      	movs	r3, #0
 800722a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800722e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007232:	f10a 0a01 	add.w	sl, sl, #1
 8007236:	9304      	str	r3, [sp, #16]
 8007238:	9307      	str	r3, [sp, #28]
 800723a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800723e:	931a      	str	r3, [sp, #104]	; 0x68
 8007240:	4654      	mov	r4, sl
 8007242:	2205      	movs	r2, #5
 8007244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007248:	4851      	ldr	r0, [pc, #324]	; (8007390 <_svfiprintf_r+0x1ec>)
 800724a:	f7f9 f831 	bl	80002b0 <memchr>
 800724e:	9a04      	ldr	r2, [sp, #16]
 8007250:	b9d8      	cbnz	r0, 800728a <_svfiprintf_r+0xe6>
 8007252:	06d0      	lsls	r0, r2, #27
 8007254:	bf44      	itt	mi
 8007256:	2320      	movmi	r3, #32
 8007258:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800725c:	0711      	lsls	r1, r2, #28
 800725e:	bf44      	itt	mi
 8007260:	232b      	movmi	r3, #43	; 0x2b
 8007262:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007266:	f89a 3000 	ldrb.w	r3, [sl]
 800726a:	2b2a      	cmp	r3, #42	; 0x2a
 800726c:	d015      	beq.n	800729a <_svfiprintf_r+0xf6>
 800726e:	9a07      	ldr	r2, [sp, #28]
 8007270:	4654      	mov	r4, sl
 8007272:	2000      	movs	r0, #0
 8007274:	f04f 0c0a 	mov.w	ip, #10
 8007278:	4621      	mov	r1, r4
 800727a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800727e:	3b30      	subs	r3, #48	; 0x30
 8007280:	2b09      	cmp	r3, #9
 8007282:	d94e      	bls.n	8007322 <_svfiprintf_r+0x17e>
 8007284:	b1b0      	cbz	r0, 80072b4 <_svfiprintf_r+0x110>
 8007286:	9207      	str	r2, [sp, #28]
 8007288:	e014      	b.n	80072b4 <_svfiprintf_r+0x110>
 800728a:	eba0 0308 	sub.w	r3, r0, r8
 800728e:	fa09 f303 	lsl.w	r3, r9, r3
 8007292:	4313      	orrs	r3, r2
 8007294:	9304      	str	r3, [sp, #16]
 8007296:	46a2      	mov	sl, r4
 8007298:	e7d2      	b.n	8007240 <_svfiprintf_r+0x9c>
 800729a:	9b03      	ldr	r3, [sp, #12]
 800729c:	1d19      	adds	r1, r3, #4
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	9103      	str	r1, [sp, #12]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	bfbb      	ittet	lt
 80072a6:	425b      	neglt	r3, r3
 80072a8:	f042 0202 	orrlt.w	r2, r2, #2
 80072ac:	9307      	strge	r3, [sp, #28]
 80072ae:	9307      	strlt	r3, [sp, #28]
 80072b0:	bfb8      	it	lt
 80072b2:	9204      	strlt	r2, [sp, #16]
 80072b4:	7823      	ldrb	r3, [r4, #0]
 80072b6:	2b2e      	cmp	r3, #46	; 0x2e
 80072b8:	d10c      	bne.n	80072d4 <_svfiprintf_r+0x130>
 80072ba:	7863      	ldrb	r3, [r4, #1]
 80072bc:	2b2a      	cmp	r3, #42	; 0x2a
 80072be:	d135      	bne.n	800732c <_svfiprintf_r+0x188>
 80072c0:	9b03      	ldr	r3, [sp, #12]
 80072c2:	1d1a      	adds	r2, r3, #4
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	9203      	str	r2, [sp, #12]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	bfb8      	it	lt
 80072cc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80072d0:	3402      	adds	r4, #2
 80072d2:	9305      	str	r3, [sp, #20]
 80072d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80073a0 <_svfiprintf_r+0x1fc>
 80072d8:	7821      	ldrb	r1, [r4, #0]
 80072da:	2203      	movs	r2, #3
 80072dc:	4650      	mov	r0, sl
 80072de:	f7f8 ffe7 	bl	80002b0 <memchr>
 80072e2:	b140      	cbz	r0, 80072f6 <_svfiprintf_r+0x152>
 80072e4:	2340      	movs	r3, #64	; 0x40
 80072e6:	eba0 000a 	sub.w	r0, r0, sl
 80072ea:	fa03 f000 	lsl.w	r0, r3, r0
 80072ee:	9b04      	ldr	r3, [sp, #16]
 80072f0:	4303      	orrs	r3, r0
 80072f2:	3401      	adds	r4, #1
 80072f4:	9304      	str	r3, [sp, #16]
 80072f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072fa:	4826      	ldr	r0, [pc, #152]	; (8007394 <_svfiprintf_r+0x1f0>)
 80072fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007300:	2206      	movs	r2, #6
 8007302:	f7f8 ffd5 	bl	80002b0 <memchr>
 8007306:	2800      	cmp	r0, #0
 8007308:	d038      	beq.n	800737c <_svfiprintf_r+0x1d8>
 800730a:	4b23      	ldr	r3, [pc, #140]	; (8007398 <_svfiprintf_r+0x1f4>)
 800730c:	bb1b      	cbnz	r3, 8007356 <_svfiprintf_r+0x1b2>
 800730e:	9b03      	ldr	r3, [sp, #12]
 8007310:	3307      	adds	r3, #7
 8007312:	f023 0307 	bic.w	r3, r3, #7
 8007316:	3308      	adds	r3, #8
 8007318:	9303      	str	r3, [sp, #12]
 800731a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800731c:	4433      	add	r3, r6
 800731e:	9309      	str	r3, [sp, #36]	; 0x24
 8007320:	e767      	b.n	80071f2 <_svfiprintf_r+0x4e>
 8007322:	fb0c 3202 	mla	r2, ip, r2, r3
 8007326:	460c      	mov	r4, r1
 8007328:	2001      	movs	r0, #1
 800732a:	e7a5      	b.n	8007278 <_svfiprintf_r+0xd4>
 800732c:	2300      	movs	r3, #0
 800732e:	3401      	adds	r4, #1
 8007330:	9305      	str	r3, [sp, #20]
 8007332:	4619      	mov	r1, r3
 8007334:	f04f 0c0a 	mov.w	ip, #10
 8007338:	4620      	mov	r0, r4
 800733a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800733e:	3a30      	subs	r2, #48	; 0x30
 8007340:	2a09      	cmp	r2, #9
 8007342:	d903      	bls.n	800734c <_svfiprintf_r+0x1a8>
 8007344:	2b00      	cmp	r3, #0
 8007346:	d0c5      	beq.n	80072d4 <_svfiprintf_r+0x130>
 8007348:	9105      	str	r1, [sp, #20]
 800734a:	e7c3      	b.n	80072d4 <_svfiprintf_r+0x130>
 800734c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007350:	4604      	mov	r4, r0
 8007352:	2301      	movs	r3, #1
 8007354:	e7f0      	b.n	8007338 <_svfiprintf_r+0x194>
 8007356:	ab03      	add	r3, sp, #12
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	462a      	mov	r2, r5
 800735c:	4b0f      	ldr	r3, [pc, #60]	; (800739c <_svfiprintf_r+0x1f8>)
 800735e:	a904      	add	r1, sp, #16
 8007360:	4638      	mov	r0, r7
 8007362:	f3af 8000 	nop.w
 8007366:	1c42      	adds	r2, r0, #1
 8007368:	4606      	mov	r6, r0
 800736a:	d1d6      	bne.n	800731a <_svfiprintf_r+0x176>
 800736c:	89ab      	ldrh	r3, [r5, #12]
 800736e:	065b      	lsls	r3, r3, #25
 8007370:	f53f af2c 	bmi.w	80071cc <_svfiprintf_r+0x28>
 8007374:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007376:	b01d      	add	sp, #116	; 0x74
 8007378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800737c:	ab03      	add	r3, sp, #12
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	462a      	mov	r2, r5
 8007382:	4b06      	ldr	r3, [pc, #24]	; (800739c <_svfiprintf_r+0x1f8>)
 8007384:	a904      	add	r1, sp, #16
 8007386:	4638      	mov	r0, r7
 8007388:	f000 f87a 	bl	8007480 <_printf_i>
 800738c:	e7eb      	b.n	8007366 <_svfiprintf_r+0x1c2>
 800738e:	bf00      	nop
 8007390:	08007af4 	.word	0x08007af4
 8007394:	08007afe 	.word	0x08007afe
 8007398:	00000000 	.word	0x00000000
 800739c:	080070ed 	.word	0x080070ed
 80073a0:	08007afa 	.word	0x08007afa

080073a4 <_printf_common>:
 80073a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073a8:	4616      	mov	r6, r2
 80073aa:	4699      	mov	r9, r3
 80073ac:	688a      	ldr	r2, [r1, #8]
 80073ae:	690b      	ldr	r3, [r1, #16]
 80073b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073b4:	4293      	cmp	r3, r2
 80073b6:	bfb8      	it	lt
 80073b8:	4613      	movlt	r3, r2
 80073ba:	6033      	str	r3, [r6, #0]
 80073bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073c0:	4607      	mov	r7, r0
 80073c2:	460c      	mov	r4, r1
 80073c4:	b10a      	cbz	r2, 80073ca <_printf_common+0x26>
 80073c6:	3301      	adds	r3, #1
 80073c8:	6033      	str	r3, [r6, #0]
 80073ca:	6823      	ldr	r3, [r4, #0]
 80073cc:	0699      	lsls	r1, r3, #26
 80073ce:	bf42      	ittt	mi
 80073d0:	6833      	ldrmi	r3, [r6, #0]
 80073d2:	3302      	addmi	r3, #2
 80073d4:	6033      	strmi	r3, [r6, #0]
 80073d6:	6825      	ldr	r5, [r4, #0]
 80073d8:	f015 0506 	ands.w	r5, r5, #6
 80073dc:	d106      	bne.n	80073ec <_printf_common+0x48>
 80073de:	f104 0a19 	add.w	sl, r4, #25
 80073e2:	68e3      	ldr	r3, [r4, #12]
 80073e4:	6832      	ldr	r2, [r6, #0]
 80073e6:	1a9b      	subs	r3, r3, r2
 80073e8:	42ab      	cmp	r3, r5
 80073ea:	dc26      	bgt.n	800743a <_printf_common+0x96>
 80073ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80073f0:	1e13      	subs	r3, r2, #0
 80073f2:	6822      	ldr	r2, [r4, #0]
 80073f4:	bf18      	it	ne
 80073f6:	2301      	movne	r3, #1
 80073f8:	0692      	lsls	r2, r2, #26
 80073fa:	d42b      	bmi.n	8007454 <_printf_common+0xb0>
 80073fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007400:	4649      	mov	r1, r9
 8007402:	4638      	mov	r0, r7
 8007404:	47c0      	blx	r8
 8007406:	3001      	adds	r0, #1
 8007408:	d01e      	beq.n	8007448 <_printf_common+0xa4>
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	68e5      	ldr	r5, [r4, #12]
 800740e:	6832      	ldr	r2, [r6, #0]
 8007410:	f003 0306 	and.w	r3, r3, #6
 8007414:	2b04      	cmp	r3, #4
 8007416:	bf08      	it	eq
 8007418:	1aad      	subeq	r5, r5, r2
 800741a:	68a3      	ldr	r3, [r4, #8]
 800741c:	6922      	ldr	r2, [r4, #16]
 800741e:	bf0c      	ite	eq
 8007420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007424:	2500      	movne	r5, #0
 8007426:	4293      	cmp	r3, r2
 8007428:	bfc4      	itt	gt
 800742a:	1a9b      	subgt	r3, r3, r2
 800742c:	18ed      	addgt	r5, r5, r3
 800742e:	2600      	movs	r6, #0
 8007430:	341a      	adds	r4, #26
 8007432:	42b5      	cmp	r5, r6
 8007434:	d11a      	bne.n	800746c <_printf_common+0xc8>
 8007436:	2000      	movs	r0, #0
 8007438:	e008      	b.n	800744c <_printf_common+0xa8>
 800743a:	2301      	movs	r3, #1
 800743c:	4652      	mov	r2, sl
 800743e:	4649      	mov	r1, r9
 8007440:	4638      	mov	r0, r7
 8007442:	47c0      	blx	r8
 8007444:	3001      	adds	r0, #1
 8007446:	d103      	bne.n	8007450 <_printf_common+0xac>
 8007448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800744c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007450:	3501      	adds	r5, #1
 8007452:	e7c6      	b.n	80073e2 <_printf_common+0x3e>
 8007454:	18e1      	adds	r1, r4, r3
 8007456:	1c5a      	adds	r2, r3, #1
 8007458:	2030      	movs	r0, #48	; 0x30
 800745a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800745e:	4422      	add	r2, r4
 8007460:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007464:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007468:	3302      	adds	r3, #2
 800746a:	e7c7      	b.n	80073fc <_printf_common+0x58>
 800746c:	2301      	movs	r3, #1
 800746e:	4622      	mov	r2, r4
 8007470:	4649      	mov	r1, r9
 8007472:	4638      	mov	r0, r7
 8007474:	47c0      	blx	r8
 8007476:	3001      	adds	r0, #1
 8007478:	d0e6      	beq.n	8007448 <_printf_common+0xa4>
 800747a:	3601      	adds	r6, #1
 800747c:	e7d9      	b.n	8007432 <_printf_common+0x8e>
	...

08007480 <_printf_i>:
 8007480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007484:	460c      	mov	r4, r1
 8007486:	4691      	mov	r9, r2
 8007488:	7e27      	ldrb	r7, [r4, #24]
 800748a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800748c:	2f78      	cmp	r7, #120	; 0x78
 800748e:	4680      	mov	r8, r0
 8007490:	469a      	mov	sl, r3
 8007492:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007496:	d807      	bhi.n	80074a8 <_printf_i+0x28>
 8007498:	2f62      	cmp	r7, #98	; 0x62
 800749a:	d80a      	bhi.n	80074b2 <_printf_i+0x32>
 800749c:	2f00      	cmp	r7, #0
 800749e:	f000 80d8 	beq.w	8007652 <_printf_i+0x1d2>
 80074a2:	2f58      	cmp	r7, #88	; 0x58
 80074a4:	f000 80a3 	beq.w	80075ee <_printf_i+0x16e>
 80074a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80074ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074b0:	e03a      	b.n	8007528 <_printf_i+0xa8>
 80074b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074b6:	2b15      	cmp	r3, #21
 80074b8:	d8f6      	bhi.n	80074a8 <_printf_i+0x28>
 80074ba:	a001      	add	r0, pc, #4	; (adr r0, 80074c0 <_printf_i+0x40>)
 80074bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80074c0:	08007519 	.word	0x08007519
 80074c4:	0800752d 	.word	0x0800752d
 80074c8:	080074a9 	.word	0x080074a9
 80074cc:	080074a9 	.word	0x080074a9
 80074d0:	080074a9 	.word	0x080074a9
 80074d4:	080074a9 	.word	0x080074a9
 80074d8:	0800752d 	.word	0x0800752d
 80074dc:	080074a9 	.word	0x080074a9
 80074e0:	080074a9 	.word	0x080074a9
 80074e4:	080074a9 	.word	0x080074a9
 80074e8:	080074a9 	.word	0x080074a9
 80074ec:	08007639 	.word	0x08007639
 80074f0:	0800755d 	.word	0x0800755d
 80074f4:	0800761b 	.word	0x0800761b
 80074f8:	080074a9 	.word	0x080074a9
 80074fc:	080074a9 	.word	0x080074a9
 8007500:	0800765b 	.word	0x0800765b
 8007504:	080074a9 	.word	0x080074a9
 8007508:	0800755d 	.word	0x0800755d
 800750c:	080074a9 	.word	0x080074a9
 8007510:	080074a9 	.word	0x080074a9
 8007514:	08007623 	.word	0x08007623
 8007518:	680b      	ldr	r3, [r1, #0]
 800751a:	1d1a      	adds	r2, r3, #4
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	600a      	str	r2, [r1, #0]
 8007520:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007524:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007528:	2301      	movs	r3, #1
 800752a:	e0a3      	b.n	8007674 <_printf_i+0x1f4>
 800752c:	6825      	ldr	r5, [r4, #0]
 800752e:	6808      	ldr	r0, [r1, #0]
 8007530:	062e      	lsls	r6, r5, #24
 8007532:	f100 0304 	add.w	r3, r0, #4
 8007536:	d50a      	bpl.n	800754e <_printf_i+0xce>
 8007538:	6805      	ldr	r5, [r0, #0]
 800753a:	600b      	str	r3, [r1, #0]
 800753c:	2d00      	cmp	r5, #0
 800753e:	da03      	bge.n	8007548 <_printf_i+0xc8>
 8007540:	232d      	movs	r3, #45	; 0x2d
 8007542:	426d      	negs	r5, r5
 8007544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007548:	485e      	ldr	r0, [pc, #376]	; (80076c4 <_printf_i+0x244>)
 800754a:	230a      	movs	r3, #10
 800754c:	e019      	b.n	8007582 <_printf_i+0x102>
 800754e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007552:	6805      	ldr	r5, [r0, #0]
 8007554:	600b      	str	r3, [r1, #0]
 8007556:	bf18      	it	ne
 8007558:	b22d      	sxthne	r5, r5
 800755a:	e7ef      	b.n	800753c <_printf_i+0xbc>
 800755c:	680b      	ldr	r3, [r1, #0]
 800755e:	6825      	ldr	r5, [r4, #0]
 8007560:	1d18      	adds	r0, r3, #4
 8007562:	6008      	str	r0, [r1, #0]
 8007564:	0628      	lsls	r0, r5, #24
 8007566:	d501      	bpl.n	800756c <_printf_i+0xec>
 8007568:	681d      	ldr	r5, [r3, #0]
 800756a:	e002      	b.n	8007572 <_printf_i+0xf2>
 800756c:	0669      	lsls	r1, r5, #25
 800756e:	d5fb      	bpl.n	8007568 <_printf_i+0xe8>
 8007570:	881d      	ldrh	r5, [r3, #0]
 8007572:	4854      	ldr	r0, [pc, #336]	; (80076c4 <_printf_i+0x244>)
 8007574:	2f6f      	cmp	r7, #111	; 0x6f
 8007576:	bf0c      	ite	eq
 8007578:	2308      	moveq	r3, #8
 800757a:	230a      	movne	r3, #10
 800757c:	2100      	movs	r1, #0
 800757e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007582:	6866      	ldr	r6, [r4, #4]
 8007584:	60a6      	str	r6, [r4, #8]
 8007586:	2e00      	cmp	r6, #0
 8007588:	bfa2      	ittt	ge
 800758a:	6821      	ldrge	r1, [r4, #0]
 800758c:	f021 0104 	bicge.w	r1, r1, #4
 8007590:	6021      	strge	r1, [r4, #0]
 8007592:	b90d      	cbnz	r5, 8007598 <_printf_i+0x118>
 8007594:	2e00      	cmp	r6, #0
 8007596:	d04d      	beq.n	8007634 <_printf_i+0x1b4>
 8007598:	4616      	mov	r6, r2
 800759a:	fbb5 f1f3 	udiv	r1, r5, r3
 800759e:	fb03 5711 	mls	r7, r3, r1, r5
 80075a2:	5dc7      	ldrb	r7, [r0, r7]
 80075a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80075a8:	462f      	mov	r7, r5
 80075aa:	42bb      	cmp	r3, r7
 80075ac:	460d      	mov	r5, r1
 80075ae:	d9f4      	bls.n	800759a <_printf_i+0x11a>
 80075b0:	2b08      	cmp	r3, #8
 80075b2:	d10b      	bne.n	80075cc <_printf_i+0x14c>
 80075b4:	6823      	ldr	r3, [r4, #0]
 80075b6:	07df      	lsls	r7, r3, #31
 80075b8:	d508      	bpl.n	80075cc <_printf_i+0x14c>
 80075ba:	6923      	ldr	r3, [r4, #16]
 80075bc:	6861      	ldr	r1, [r4, #4]
 80075be:	4299      	cmp	r1, r3
 80075c0:	bfde      	ittt	le
 80075c2:	2330      	movle	r3, #48	; 0x30
 80075c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075c8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80075cc:	1b92      	subs	r2, r2, r6
 80075ce:	6122      	str	r2, [r4, #16]
 80075d0:	f8cd a000 	str.w	sl, [sp]
 80075d4:	464b      	mov	r3, r9
 80075d6:	aa03      	add	r2, sp, #12
 80075d8:	4621      	mov	r1, r4
 80075da:	4640      	mov	r0, r8
 80075dc:	f7ff fee2 	bl	80073a4 <_printf_common>
 80075e0:	3001      	adds	r0, #1
 80075e2:	d14c      	bne.n	800767e <_printf_i+0x1fe>
 80075e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075e8:	b004      	add	sp, #16
 80075ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ee:	4835      	ldr	r0, [pc, #212]	; (80076c4 <_printf_i+0x244>)
 80075f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80075f4:	6823      	ldr	r3, [r4, #0]
 80075f6:	680e      	ldr	r6, [r1, #0]
 80075f8:	061f      	lsls	r7, r3, #24
 80075fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80075fe:	600e      	str	r6, [r1, #0]
 8007600:	d514      	bpl.n	800762c <_printf_i+0x1ac>
 8007602:	07d9      	lsls	r1, r3, #31
 8007604:	bf44      	itt	mi
 8007606:	f043 0320 	orrmi.w	r3, r3, #32
 800760a:	6023      	strmi	r3, [r4, #0]
 800760c:	b91d      	cbnz	r5, 8007616 <_printf_i+0x196>
 800760e:	6823      	ldr	r3, [r4, #0]
 8007610:	f023 0320 	bic.w	r3, r3, #32
 8007614:	6023      	str	r3, [r4, #0]
 8007616:	2310      	movs	r3, #16
 8007618:	e7b0      	b.n	800757c <_printf_i+0xfc>
 800761a:	6823      	ldr	r3, [r4, #0]
 800761c:	f043 0320 	orr.w	r3, r3, #32
 8007620:	6023      	str	r3, [r4, #0]
 8007622:	2378      	movs	r3, #120	; 0x78
 8007624:	4828      	ldr	r0, [pc, #160]	; (80076c8 <_printf_i+0x248>)
 8007626:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800762a:	e7e3      	b.n	80075f4 <_printf_i+0x174>
 800762c:	065e      	lsls	r6, r3, #25
 800762e:	bf48      	it	mi
 8007630:	b2ad      	uxthmi	r5, r5
 8007632:	e7e6      	b.n	8007602 <_printf_i+0x182>
 8007634:	4616      	mov	r6, r2
 8007636:	e7bb      	b.n	80075b0 <_printf_i+0x130>
 8007638:	680b      	ldr	r3, [r1, #0]
 800763a:	6826      	ldr	r6, [r4, #0]
 800763c:	6960      	ldr	r0, [r4, #20]
 800763e:	1d1d      	adds	r5, r3, #4
 8007640:	600d      	str	r5, [r1, #0]
 8007642:	0635      	lsls	r5, r6, #24
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	d501      	bpl.n	800764c <_printf_i+0x1cc>
 8007648:	6018      	str	r0, [r3, #0]
 800764a:	e002      	b.n	8007652 <_printf_i+0x1d2>
 800764c:	0671      	lsls	r1, r6, #25
 800764e:	d5fb      	bpl.n	8007648 <_printf_i+0x1c8>
 8007650:	8018      	strh	r0, [r3, #0]
 8007652:	2300      	movs	r3, #0
 8007654:	6123      	str	r3, [r4, #16]
 8007656:	4616      	mov	r6, r2
 8007658:	e7ba      	b.n	80075d0 <_printf_i+0x150>
 800765a:	680b      	ldr	r3, [r1, #0]
 800765c:	1d1a      	adds	r2, r3, #4
 800765e:	600a      	str	r2, [r1, #0]
 8007660:	681e      	ldr	r6, [r3, #0]
 8007662:	6862      	ldr	r2, [r4, #4]
 8007664:	2100      	movs	r1, #0
 8007666:	4630      	mov	r0, r6
 8007668:	f7f8 fe22 	bl	80002b0 <memchr>
 800766c:	b108      	cbz	r0, 8007672 <_printf_i+0x1f2>
 800766e:	1b80      	subs	r0, r0, r6
 8007670:	6060      	str	r0, [r4, #4]
 8007672:	6863      	ldr	r3, [r4, #4]
 8007674:	6123      	str	r3, [r4, #16]
 8007676:	2300      	movs	r3, #0
 8007678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800767c:	e7a8      	b.n	80075d0 <_printf_i+0x150>
 800767e:	6923      	ldr	r3, [r4, #16]
 8007680:	4632      	mov	r2, r6
 8007682:	4649      	mov	r1, r9
 8007684:	4640      	mov	r0, r8
 8007686:	47d0      	blx	sl
 8007688:	3001      	adds	r0, #1
 800768a:	d0ab      	beq.n	80075e4 <_printf_i+0x164>
 800768c:	6823      	ldr	r3, [r4, #0]
 800768e:	079b      	lsls	r3, r3, #30
 8007690:	d413      	bmi.n	80076ba <_printf_i+0x23a>
 8007692:	68e0      	ldr	r0, [r4, #12]
 8007694:	9b03      	ldr	r3, [sp, #12]
 8007696:	4298      	cmp	r0, r3
 8007698:	bfb8      	it	lt
 800769a:	4618      	movlt	r0, r3
 800769c:	e7a4      	b.n	80075e8 <_printf_i+0x168>
 800769e:	2301      	movs	r3, #1
 80076a0:	4632      	mov	r2, r6
 80076a2:	4649      	mov	r1, r9
 80076a4:	4640      	mov	r0, r8
 80076a6:	47d0      	blx	sl
 80076a8:	3001      	adds	r0, #1
 80076aa:	d09b      	beq.n	80075e4 <_printf_i+0x164>
 80076ac:	3501      	adds	r5, #1
 80076ae:	68e3      	ldr	r3, [r4, #12]
 80076b0:	9903      	ldr	r1, [sp, #12]
 80076b2:	1a5b      	subs	r3, r3, r1
 80076b4:	42ab      	cmp	r3, r5
 80076b6:	dcf2      	bgt.n	800769e <_printf_i+0x21e>
 80076b8:	e7eb      	b.n	8007692 <_printf_i+0x212>
 80076ba:	2500      	movs	r5, #0
 80076bc:	f104 0619 	add.w	r6, r4, #25
 80076c0:	e7f5      	b.n	80076ae <_printf_i+0x22e>
 80076c2:	bf00      	nop
 80076c4:	08007b05 	.word	0x08007b05
 80076c8:	08007b16 	.word	0x08007b16

080076cc <_sbrk_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	4d06      	ldr	r5, [pc, #24]	; (80076e8 <_sbrk_r+0x1c>)
 80076d0:	2300      	movs	r3, #0
 80076d2:	4604      	mov	r4, r0
 80076d4:	4608      	mov	r0, r1
 80076d6:	602b      	str	r3, [r5, #0]
 80076d8:	f000 f8ac 	bl	8007834 <_sbrk>
 80076dc:	1c43      	adds	r3, r0, #1
 80076de:	d102      	bne.n	80076e6 <_sbrk_r+0x1a>
 80076e0:	682b      	ldr	r3, [r5, #0]
 80076e2:	b103      	cbz	r3, 80076e6 <_sbrk_r+0x1a>
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	bd38      	pop	{r3, r4, r5, pc}
 80076e8:	2000d140 	.word	0x2000d140

080076ec <memmove>:
 80076ec:	4288      	cmp	r0, r1
 80076ee:	b510      	push	{r4, lr}
 80076f0:	eb01 0402 	add.w	r4, r1, r2
 80076f4:	d902      	bls.n	80076fc <memmove+0x10>
 80076f6:	4284      	cmp	r4, r0
 80076f8:	4623      	mov	r3, r4
 80076fa:	d807      	bhi.n	800770c <memmove+0x20>
 80076fc:	1e43      	subs	r3, r0, #1
 80076fe:	42a1      	cmp	r1, r4
 8007700:	d008      	beq.n	8007714 <memmove+0x28>
 8007702:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007706:	f803 2f01 	strb.w	r2, [r3, #1]!
 800770a:	e7f8      	b.n	80076fe <memmove+0x12>
 800770c:	4402      	add	r2, r0
 800770e:	4601      	mov	r1, r0
 8007710:	428a      	cmp	r2, r1
 8007712:	d100      	bne.n	8007716 <memmove+0x2a>
 8007714:	bd10      	pop	{r4, pc}
 8007716:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800771a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800771e:	e7f7      	b.n	8007710 <memmove+0x24>

08007720 <__malloc_lock>:
 8007720:	4801      	ldr	r0, [pc, #4]	; (8007728 <__malloc_lock+0x8>)
 8007722:	f7ff bc87 	b.w	8007034 <__retarget_lock_acquire_recursive>
 8007726:	bf00      	nop
 8007728:	2000d138 	.word	0x2000d138

0800772c <__malloc_unlock>:
 800772c:	4801      	ldr	r0, [pc, #4]	; (8007734 <__malloc_unlock+0x8>)
 800772e:	f7ff bc82 	b.w	8007036 <__retarget_lock_release_recursive>
 8007732:	bf00      	nop
 8007734:	2000d138 	.word	0x2000d138

08007738 <_free_r>:
 8007738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800773a:	2900      	cmp	r1, #0
 800773c:	d048      	beq.n	80077d0 <_free_r+0x98>
 800773e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007742:	9001      	str	r0, [sp, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	f1a1 0404 	sub.w	r4, r1, #4
 800774a:	bfb8      	it	lt
 800774c:	18e4      	addlt	r4, r4, r3
 800774e:	f7ff ffe7 	bl	8007720 <__malloc_lock>
 8007752:	4a20      	ldr	r2, [pc, #128]	; (80077d4 <_free_r+0x9c>)
 8007754:	9801      	ldr	r0, [sp, #4]
 8007756:	6813      	ldr	r3, [r2, #0]
 8007758:	4615      	mov	r5, r2
 800775a:	b933      	cbnz	r3, 800776a <_free_r+0x32>
 800775c:	6063      	str	r3, [r4, #4]
 800775e:	6014      	str	r4, [r2, #0]
 8007760:	b003      	add	sp, #12
 8007762:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007766:	f7ff bfe1 	b.w	800772c <__malloc_unlock>
 800776a:	42a3      	cmp	r3, r4
 800776c:	d90b      	bls.n	8007786 <_free_r+0x4e>
 800776e:	6821      	ldr	r1, [r4, #0]
 8007770:	1862      	adds	r2, r4, r1
 8007772:	4293      	cmp	r3, r2
 8007774:	bf04      	itt	eq
 8007776:	681a      	ldreq	r2, [r3, #0]
 8007778:	685b      	ldreq	r3, [r3, #4]
 800777a:	6063      	str	r3, [r4, #4]
 800777c:	bf04      	itt	eq
 800777e:	1852      	addeq	r2, r2, r1
 8007780:	6022      	streq	r2, [r4, #0]
 8007782:	602c      	str	r4, [r5, #0]
 8007784:	e7ec      	b.n	8007760 <_free_r+0x28>
 8007786:	461a      	mov	r2, r3
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	b10b      	cbz	r3, 8007790 <_free_r+0x58>
 800778c:	42a3      	cmp	r3, r4
 800778e:	d9fa      	bls.n	8007786 <_free_r+0x4e>
 8007790:	6811      	ldr	r1, [r2, #0]
 8007792:	1855      	adds	r5, r2, r1
 8007794:	42a5      	cmp	r5, r4
 8007796:	d10b      	bne.n	80077b0 <_free_r+0x78>
 8007798:	6824      	ldr	r4, [r4, #0]
 800779a:	4421      	add	r1, r4
 800779c:	1854      	adds	r4, r2, r1
 800779e:	42a3      	cmp	r3, r4
 80077a0:	6011      	str	r1, [r2, #0]
 80077a2:	d1dd      	bne.n	8007760 <_free_r+0x28>
 80077a4:	681c      	ldr	r4, [r3, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	6053      	str	r3, [r2, #4]
 80077aa:	4421      	add	r1, r4
 80077ac:	6011      	str	r1, [r2, #0]
 80077ae:	e7d7      	b.n	8007760 <_free_r+0x28>
 80077b0:	d902      	bls.n	80077b8 <_free_r+0x80>
 80077b2:	230c      	movs	r3, #12
 80077b4:	6003      	str	r3, [r0, #0]
 80077b6:	e7d3      	b.n	8007760 <_free_r+0x28>
 80077b8:	6825      	ldr	r5, [r4, #0]
 80077ba:	1961      	adds	r1, r4, r5
 80077bc:	428b      	cmp	r3, r1
 80077be:	bf04      	itt	eq
 80077c0:	6819      	ldreq	r1, [r3, #0]
 80077c2:	685b      	ldreq	r3, [r3, #4]
 80077c4:	6063      	str	r3, [r4, #4]
 80077c6:	bf04      	itt	eq
 80077c8:	1949      	addeq	r1, r1, r5
 80077ca:	6021      	streq	r1, [r4, #0]
 80077cc:	6054      	str	r4, [r2, #4]
 80077ce:	e7c7      	b.n	8007760 <_free_r+0x28>
 80077d0:	b003      	add	sp, #12
 80077d2:	bd30      	pop	{r4, r5, pc}
 80077d4:	2000cfa0 	.word	0x2000cfa0

080077d8 <_realloc_r>:
 80077d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077da:	4607      	mov	r7, r0
 80077dc:	4614      	mov	r4, r2
 80077de:	460e      	mov	r6, r1
 80077e0:	b921      	cbnz	r1, 80077ec <_realloc_r+0x14>
 80077e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80077e6:	4611      	mov	r1, r2
 80077e8:	f7ff bc26 	b.w	8007038 <_malloc_r>
 80077ec:	b922      	cbnz	r2, 80077f8 <_realloc_r+0x20>
 80077ee:	f7ff ffa3 	bl	8007738 <_free_r>
 80077f2:	4625      	mov	r5, r4
 80077f4:	4628      	mov	r0, r5
 80077f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077f8:	f000 f814 	bl	8007824 <_malloc_usable_size_r>
 80077fc:	42a0      	cmp	r0, r4
 80077fe:	d20f      	bcs.n	8007820 <_realloc_r+0x48>
 8007800:	4621      	mov	r1, r4
 8007802:	4638      	mov	r0, r7
 8007804:	f7ff fc18 	bl	8007038 <_malloc_r>
 8007808:	4605      	mov	r5, r0
 800780a:	2800      	cmp	r0, #0
 800780c:	d0f2      	beq.n	80077f4 <_realloc_r+0x1c>
 800780e:	4631      	mov	r1, r6
 8007810:	4622      	mov	r2, r4
 8007812:	f7ff fbc5 	bl	8006fa0 <memcpy>
 8007816:	4631      	mov	r1, r6
 8007818:	4638      	mov	r0, r7
 800781a:	f7ff ff8d 	bl	8007738 <_free_r>
 800781e:	e7e9      	b.n	80077f4 <_realloc_r+0x1c>
 8007820:	4635      	mov	r5, r6
 8007822:	e7e7      	b.n	80077f4 <_realloc_r+0x1c>

08007824 <_malloc_usable_size_r>:
 8007824:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007828:	1f18      	subs	r0, r3, #4
 800782a:	2b00      	cmp	r3, #0
 800782c:	bfbc      	itt	lt
 800782e:	580b      	ldrlt	r3, [r1, r0]
 8007830:	18c0      	addlt	r0, r0, r3
 8007832:	4770      	bx	lr

08007834 <_sbrk>:
 8007834:	4b04      	ldr	r3, [pc, #16]	; (8007848 <_sbrk+0x14>)
 8007836:	6819      	ldr	r1, [r3, #0]
 8007838:	4602      	mov	r2, r0
 800783a:	b909      	cbnz	r1, 8007840 <_sbrk+0xc>
 800783c:	4903      	ldr	r1, [pc, #12]	; (800784c <_sbrk+0x18>)
 800783e:	6019      	str	r1, [r3, #0]
 8007840:	6818      	ldr	r0, [r3, #0]
 8007842:	4402      	add	r2, r0
 8007844:	601a      	str	r2, [r3, #0]
 8007846:	4770      	bx	lr
 8007848:	2000cfa8 	.word	0x2000cfa8
 800784c:	2000d148 	.word	0x2000d148

08007850 <_init>:
 8007850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007852:	bf00      	nop
 8007854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007856:	bc08      	pop	{r3}
 8007858:	469e      	mov	lr, r3
 800785a:	4770      	bx	lr

0800785c <_fini>:
 800785c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785e:	bf00      	nop
 8007860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007862:	bc08      	pop	{r3}
 8007864:	469e      	mov	lr, r3
 8007866:	4770      	bx	lr
