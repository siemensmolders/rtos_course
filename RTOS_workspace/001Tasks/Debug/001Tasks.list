
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f7c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  0800614c  0800614c  0001614c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006404  08006404  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006404  08006404  00016404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800640c  0800640c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800640c  0800640c  0001640c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006410  08006410  00016410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d034  20000074  08006488  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d0a8  08006488  0002d0a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017642  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fdc  00000000  00000000  000376e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  0003a6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  0003b8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f3b0  00000000  00000000  0003c950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000618f  00000000  00000000  0004bd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00051e8f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005218  00000000  00000000  00051ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006134 	.word	0x08006134

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006134 	.word	0x08006134

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	2000cff0 	.word	0x2000cff0
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000364:	f000 b96e 	b.w	8000644 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	4604      	mov	r4, r0
 8000388:	468c      	mov	ip, r1
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8083 	bne.w	8000496 <__udivmoddi4+0x116>
 8000390:	428a      	cmp	r2, r1
 8000392:	4617      	mov	r7, r2
 8000394:	d947      	bls.n	8000426 <__udivmoddi4+0xa6>
 8000396:	fab2 f282 	clz	r2, r2
 800039a:	b142      	cbz	r2, 80003ae <__udivmoddi4+0x2e>
 800039c:	f1c2 0020 	rsb	r0, r2, #32
 80003a0:	fa24 f000 	lsr.w	r0, r4, r0
 80003a4:	4091      	lsls	r1, r2
 80003a6:	4097      	lsls	r7, r2
 80003a8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ac:	4094      	lsls	r4, r2
 80003ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fbbc f6f8 	udiv	r6, ip, r8
 80003b8:	fa1f fe87 	uxth.w	lr, r7
 80003bc:	fb08 c116 	mls	r1, r8, r6, ip
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f10e 	mul.w	r1, r6, lr
 80003c8:	4299      	cmp	r1, r3
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x60>
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003d2:	f080 8119 	bcs.w	8000608 <__udivmoddi4+0x288>
 80003d6:	4299      	cmp	r1, r3
 80003d8:	f240 8116 	bls.w	8000608 <__udivmoddi4+0x288>
 80003dc:	3e02      	subs	r6, #2
 80003de:	443b      	add	r3, r7
 80003e0:	1a5b      	subs	r3, r3, r1
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d909      	bls.n	800040c <__udivmoddi4+0x8c>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003fe:	f080 8105 	bcs.w	800060c <__udivmoddi4+0x28c>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f240 8102 	bls.w	800060c <__udivmoddi4+0x28c>
 8000408:	3802      	subs	r0, #2
 800040a:	443c      	add	r4, r7
 800040c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000410:	eba4 040e 	sub.w	r4, r4, lr
 8000414:	2600      	movs	r6, #0
 8000416:	b11d      	cbz	r5, 8000420 <__udivmoddi4+0xa0>
 8000418:	40d4      	lsrs	r4, r2
 800041a:	2300      	movs	r3, #0
 800041c:	e9c5 4300 	strd	r4, r3, [r5]
 8000420:	4631      	mov	r1, r6
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	b902      	cbnz	r2, 800042a <__udivmoddi4+0xaa>
 8000428:	deff      	udf	#255	; 0xff
 800042a:	fab2 f282 	clz	r2, r2
 800042e:	2a00      	cmp	r2, #0
 8000430:	d150      	bne.n	80004d4 <__udivmoddi4+0x154>
 8000432:	1bcb      	subs	r3, r1, r7
 8000434:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000438:	fa1f f887 	uxth.w	r8, r7
 800043c:	2601      	movs	r6, #1
 800043e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000442:	0c21      	lsrs	r1, r4, #16
 8000444:	fb0e 331c 	mls	r3, lr, ip, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb08 f30c 	mul.w	r3, r8, ip
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0xe4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0xe2>
 800045c:	428b      	cmp	r3, r1
 800045e:	f200 80e9 	bhi.w	8000634 <__udivmoddi4+0x2b4>
 8000462:	4684      	mov	ip, r0
 8000464:	1ac9      	subs	r1, r1, r3
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000470:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x10c>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x10a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80d9 	bhi.w	800063c <__udivmoddi4+0x2bc>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e7bf      	b.n	8000416 <__udivmoddi4+0x96>
 8000496:	428b      	cmp	r3, r1
 8000498:	d909      	bls.n	80004ae <__udivmoddi4+0x12e>
 800049a:	2d00      	cmp	r5, #0
 800049c:	f000 80b1 	beq.w	8000602 <__udivmoddi4+0x282>
 80004a0:	2600      	movs	r6, #0
 80004a2:	e9c5 0100 	strd	r0, r1, [r5]
 80004a6:	4630      	mov	r0, r6
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	fab3 f683 	clz	r6, r3
 80004b2:	2e00      	cmp	r6, #0
 80004b4:	d14a      	bne.n	800054c <__udivmoddi4+0x1cc>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d302      	bcc.n	80004c0 <__udivmoddi4+0x140>
 80004ba:	4282      	cmp	r2, r0
 80004bc:	f200 80b8 	bhi.w	8000630 <__udivmoddi4+0x2b0>
 80004c0:	1a84      	subs	r4, r0, r2
 80004c2:	eb61 0103 	sbc.w	r1, r1, r3
 80004c6:	2001      	movs	r0, #1
 80004c8:	468c      	mov	ip, r1
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	d0a8      	beq.n	8000420 <__udivmoddi4+0xa0>
 80004ce:	e9c5 4c00 	strd	r4, ip, [r5]
 80004d2:	e7a5      	b.n	8000420 <__udivmoddi4+0xa0>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f603 	lsr.w	r6, r0, r3
 80004dc:	4097      	lsls	r7, r2
 80004de:	fa01 f002 	lsl.w	r0, r1, r2
 80004e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e6:	40d9      	lsrs	r1, r3
 80004e8:	4330      	orrs	r0, r6
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	fbb1 f6fe 	udiv	r6, r1, lr
 80004f0:	fa1f f887 	uxth.w	r8, r7
 80004f4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004fc:	fb06 f108 	mul.w	r1, r6, r8
 8000500:	4299      	cmp	r1, r3
 8000502:	fa04 f402 	lsl.w	r4, r4, r2
 8000506:	d909      	bls.n	800051c <__udivmoddi4+0x19c>
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800050e:	f080 808d 	bcs.w	800062c <__udivmoddi4+0x2ac>
 8000512:	4299      	cmp	r1, r3
 8000514:	f240 808a 	bls.w	800062c <__udivmoddi4+0x2ac>
 8000518:	3e02      	subs	r6, #2
 800051a:	443b      	add	r3, r7
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b281      	uxth	r1, r0
 8000520:	fbb3 f0fe 	udiv	r0, r3, lr
 8000524:	fb0e 3310 	mls	r3, lr, r0, r3
 8000528:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052c:	fb00 f308 	mul.w	r3, r0, r8
 8000530:	428b      	cmp	r3, r1
 8000532:	d907      	bls.n	8000544 <__udivmoddi4+0x1c4>
 8000534:	1879      	adds	r1, r7, r1
 8000536:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800053a:	d273      	bcs.n	8000624 <__udivmoddi4+0x2a4>
 800053c:	428b      	cmp	r3, r1
 800053e:	d971      	bls.n	8000624 <__udivmoddi4+0x2a4>
 8000540:	3802      	subs	r0, #2
 8000542:	4439      	add	r1, r7
 8000544:	1acb      	subs	r3, r1, r3
 8000546:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800054a:	e778      	b.n	800043e <__udivmoddi4+0xbe>
 800054c:	f1c6 0c20 	rsb	ip, r6, #32
 8000550:	fa03 f406 	lsl.w	r4, r3, r6
 8000554:	fa22 f30c 	lsr.w	r3, r2, ip
 8000558:	431c      	orrs	r4, r3
 800055a:	fa20 f70c 	lsr.w	r7, r0, ip
 800055e:	fa01 f306 	lsl.w	r3, r1, r6
 8000562:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000566:	fa21 f10c 	lsr.w	r1, r1, ip
 800056a:	431f      	orrs	r7, r3
 800056c:	0c3b      	lsrs	r3, r7, #16
 800056e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000572:	fa1f f884 	uxth.w	r8, r4
 8000576:	fb0e 1119 	mls	r1, lr, r9, r1
 800057a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800057e:	fb09 fa08 	mul.w	sl, r9, r8
 8000582:	458a      	cmp	sl, r1
 8000584:	fa02 f206 	lsl.w	r2, r2, r6
 8000588:	fa00 f306 	lsl.w	r3, r0, r6
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x220>
 800058e:	1861      	adds	r1, r4, r1
 8000590:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000594:	d248      	bcs.n	8000628 <__udivmoddi4+0x2a8>
 8000596:	458a      	cmp	sl, r1
 8000598:	d946      	bls.n	8000628 <__udivmoddi4+0x2a8>
 800059a:	f1a9 0902 	sub.w	r9, r9, #2
 800059e:	4421      	add	r1, r4
 80005a0:	eba1 010a 	sub.w	r1, r1, sl
 80005a4:	b2bf      	uxth	r7, r7
 80005a6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005aa:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005b2:	fb00 f808 	mul.w	r8, r0, r8
 80005b6:	45b8      	cmp	r8, r7
 80005b8:	d907      	bls.n	80005ca <__udivmoddi4+0x24a>
 80005ba:	19e7      	adds	r7, r4, r7
 80005bc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80005c0:	d22e      	bcs.n	8000620 <__udivmoddi4+0x2a0>
 80005c2:	45b8      	cmp	r8, r7
 80005c4:	d92c      	bls.n	8000620 <__udivmoddi4+0x2a0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	4427      	add	r7, r4
 80005ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005ce:	eba7 0708 	sub.w	r7, r7, r8
 80005d2:	fba0 8902 	umull	r8, r9, r0, r2
 80005d6:	454f      	cmp	r7, r9
 80005d8:	46c6      	mov	lr, r8
 80005da:	4649      	mov	r1, r9
 80005dc:	d31a      	bcc.n	8000614 <__udivmoddi4+0x294>
 80005de:	d017      	beq.n	8000610 <__udivmoddi4+0x290>
 80005e0:	b15d      	cbz	r5, 80005fa <__udivmoddi4+0x27a>
 80005e2:	ebb3 020e 	subs.w	r2, r3, lr
 80005e6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ea:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ee:	40f2      	lsrs	r2, r6
 80005f0:	ea4c 0202 	orr.w	r2, ip, r2
 80005f4:	40f7      	lsrs	r7, r6
 80005f6:	e9c5 2700 	strd	r2, r7, [r5]
 80005fa:	2600      	movs	r6, #0
 80005fc:	4631      	mov	r1, r6
 80005fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000602:	462e      	mov	r6, r5
 8000604:	4628      	mov	r0, r5
 8000606:	e70b      	b.n	8000420 <__udivmoddi4+0xa0>
 8000608:	4606      	mov	r6, r0
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0x60>
 800060c:	4618      	mov	r0, r3
 800060e:	e6fd      	b.n	800040c <__udivmoddi4+0x8c>
 8000610:	4543      	cmp	r3, r8
 8000612:	d2e5      	bcs.n	80005e0 <__udivmoddi4+0x260>
 8000614:	ebb8 0e02 	subs.w	lr, r8, r2
 8000618:	eb69 0104 	sbc.w	r1, r9, r4
 800061c:	3801      	subs	r0, #1
 800061e:	e7df      	b.n	80005e0 <__udivmoddi4+0x260>
 8000620:	4608      	mov	r0, r1
 8000622:	e7d2      	b.n	80005ca <__udivmoddi4+0x24a>
 8000624:	4660      	mov	r0, ip
 8000626:	e78d      	b.n	8000544 <__udivmoddi4+0x1c4>
 8000628:	4681      	mov	r9, r0
 800062a:	e7b9      	b.n	80005a0 <__udivmoddi4+0x220>
 800062c:	4666      	mov	r6, ip
 800062e:	e775      	b.n	800051c <__udivmoddi4+0x19c>
 8000630:	4630      	mov	r0, r6
 8000632:	e74a      	b.n	80004ca <__udivmoddi4+0x14a>
 8000634:	f1ac 0c02 	sub.w	ip, ip, #2
 8000638:	4439      	add	r1, r7
 800063a:	e713      	b.n	8000464 <__udivmoddi4+0xe4>
 800063c:	3802      	subs	r0, #2
 800063e:	443c      	add	r4, r7
 8000640:	e724      	b.n	800048c <__udivmoddi4+0x10c>
 8000642:	bf00      	nop

08000644 <__aeabi_idiv0>:
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064e:	f000 feee 	bl	800142e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000652:	f000 f84f 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000656:	f000 f8b5 	bl	80007c4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_SYSVIEW_ENABLE_TIMESTAMP();
 800065a:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <main+0x80>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a1a      	ldr	r2, [pc, #104]	; (80006c8 <main+0x80>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 8000666:	f003 f91f 	bl	80038a8 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 800066a:	f004 f85b 	bl	8004724 <SEGGER_SYSVIEW_Start>
  traceSTART();

  status = xTaskCreate(task1_handler,  "Task-1",  200, "Hello world from Task-1\n", 2, &task1_handle);
 800066e:	4b17      	ldr	r3, [pc, #92]	; (80006cc <main+0x84>)
 8000670:	9301      	str	r3, [sp, #4]
 8000672:	2302      	movs	r3, #2
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <main+0x88>)
 8000678:	22c8      	movs	r2, #200	; 0xc8
 800067a:	4916      	ldr	r1, [pc, #88]	; (80006d4 <main+0x8c>)
 800067c:	4816      	ldr	r0, [pc, #88]	; (80006d8 <main+0x90>)
 800067e:	f002 f99e 	bl	80029be <xTaskCreate>
 8000682:	4603      	mov	r3, r0
 8000684:	4a15      	ldr	r2, [pc, #84]	; (80006dc <main+0x94>)
 8000686:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <main+0x94>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d003      	beq.n	8000698 <main+0x50>
 8000690:	4913      	ldr	r1, [pc, #76]	; (80006e0 <main+0x98>)
 8000692:	206b      	movs	r0, #107	; 0x6b
 8000694:	f000 fd84 	bl	80011a0 <vAssertCalled>

  status = xTaskCreate(task2_handler,  "Task-2",  200, "Hello world from Task-2\n", 2, &task2_handle);
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <main+0x9c>)
 800069a:	9301      	str	r3, [sp, #4]
 800069c:	2302      	movs	r3, #2
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <main+0xa0>)
 80006a2:	22c8      	movs	r2, #200	; 0xc8
 80006a4:	4911      	ldr	r1, [pc, #68]	; (80006ec <main+0xa4>)
 80006a6:	4812      	ldr	r0, [pc, #72]	; (80006f0 <main+0xa8>)
 80006a8:	f002 f989 	bl	80029be <xTaskCreate>
 80006ac:	4603      	mov	r3, r0
 80006ae:	4a0b      	ldr	r2, [pc, #44]	; (80006dc <main+0x94>)
 80006b0:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <main+0x94>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d003      	beq.n	80006c2 <main+0x7a>
 80006ba:	4909      	ldr	r1, [pc, #36]	; (80006e0 <main+0x98>)
 80006bc:	206e      	movs	r0, #110	; 0x6e
 80006be:	f000 fd6f 	bl	80011a0 <vAssertCalled>

  // vTaskStartScheduler();
  xPortStartScheduler();
 80006c2:	f002 fdbb 	bl	800323c <xPortStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <main+0x7e>
 80006c8:	e0001000 	.word	0xe0001000
 80006cc:	2000cf94 	.word	0x2000cf94
 80006d0:	0800614c 	.word	0x0800614c
 80006d4:	08006168 	.word	0x08006168
 80006d8:	0800114d 	.word	0x0800114d
 80006dc:	2000cf9c 	.word	0x2000cf9c
 80006e0:	08006170 	.word	0x08006170
 80006e4:	2000cf98 	.word	0x2000cf98
 80006e8:	08006184 	.word	0x08006184
 80006ec:	080061a0 	.word	0x080061a0
 80006f0:	08001175 	.word	0x08001175

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b094      	sub	sp, #80	; 0x50
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0320 	add.w	r3, r7, #32
 80006fe:	2230      	movs	r2, #48	; 0x30
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f004 fdbc 	bl	8005280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000718:	4b28      	ldr	r3, [pc, #160]	; (80007bc <SystemClock_Config+0xc8>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	4a27      	ldr	r2, [pc, #156]	; (80007bc <SystemClock_Config+0xc8>)
 800071e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000722:	6413      	str	r3, [r2, #64]	; 0x40
 8000724:	4b25      	ldr	r3, [pc, #148]	; (80007bc <SystemClock_Config+0xc8>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000730:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <SystemClock_Config+0xcc>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000738:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <SystemClock_Config+0xcc>)
 800073a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <SystemClock_Config+0xcc>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074c:	2302      	movs	r3, #2
 800074e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000750:	2301      	movs	r3, #1
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000754:	2310      	movs	r3, #16
 8000756:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000758:	2302      	movs	r3, #2
 800075a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800075c:	2300      	movs	r3, #0
 800075e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000760:	2308      	movs	r3, #8
 8000762:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000764:	23a8      	movs	r3, #168	; 0xa8
 8000766:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000768:	2302      	movs	r3, #2
 800076a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800076c:	2302      	movs	r3, #2
 800076e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 0320 	add.w	r3, r7, #32
 8000774:	4618      	mov	r0, r3
 8000776:	f001 f92f 	bl	80019d8 <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000780:	f000 fd26 	bl	80011d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	230f      	movs	r3, #15
 8000786:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000788:	2302      	movs	r3, #2
 800078a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000790:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000794:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	2105      	movs	r1, #5
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 fbbc 	bl	8001f20 <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80007ae:	f000 fd0f 	bl	80011d0 <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	3750      	adds	r7, #80	; 0x50
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b090      	sub	sp, #64	; 0x40
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007da:	4bad      	ldr	r3, [pc, #692]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4aac      	ldr	r2, [pc, #688]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 80007e0:	f043 0310 	orr.w	r3, r3, #16
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4baa      	ldr	r3, [pc, #680]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0310 	and.w	r3, r3, #16
 80007ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80007f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007f2:	4ba7      	ldr	r3, [pc, #668]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4aa6      	ldr	r2, [pc, #664]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 80007f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4ba4      	ldr	r3, [pc, #656]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
 8000808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	4ba1      	ldr	r3, [pc, #644]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4aa0      	ldr	r2, [pc, #640]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b9e      	ldr	r3, [pc, #632]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	623b      	str	r3, [r7, #32]
 8000820:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000822:	4b9b      	ldr	r3, [pc, #620]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a9a      	ldr	r2, [pc, #616]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 8000828:	f043 0308 	orr.w	r3, r3, #8
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b98      	ldr	r3, [pc, #608]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0308 	and.w	r3, r3, #8
 8000836:	61fb      	str	r3, [r7, #28]
 8000838:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	4b95      	ldr	r3, [pc, #596]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a94      	ldr	r2, [pc, #592]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b92      	ldr	r3, [pc, #584]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0304 	and.w	r3, r3, #4
 800084e:	61bb      	str	r3, [r7, #24]
 8000850:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b8f      	ldr	r3, [pc, #572]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a8e      	ldr	r2, [pc, #568]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b8c      	ldr	r3, [pc, #560]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800086a:	4b89      	ldr	r3, [pc, #548]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a88      	ldr	r2, [pc, #544]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 8000870:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b86      	ldr	r3, [pc, #536]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000882:	4b83      	ldr	r3, [pc, #524]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a82      	ldr	r2, [pc, #520]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 8000888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b80      	ldr	r3, [pc, #512]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800089a:	4b7d      	ldr	r3, [pc, #500]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a7c      	ldr	r2, [pc, #496]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 80008a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b7a      	ldr	r3, [pc, #488]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008b2:	4b77      	ldr	r3, [pc, #476]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a76      	ldr	r2, [pc, #472]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 80008b8:	f043 0320 	orr.w	r3, r3, #32
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b74      	ldr	r3, [pc, #464]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0320 	and.w	r3, r3, #32
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ca:	4b71      	ldr	r3, [pc, #452]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a70      	ldr	r2, [pc, #448]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 80008d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b6e      	ldr	r3, [pc, #440]	; (8000a90 <MX_GPIO_Init+0x2cc>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008e2:	2201      	movs	r2, #1
 80008e4:	2120      	movs	r1, #32
 80008e6:	486b      	ldr	r0, [pc, #428]	; (8000a94 <MX_GPIO_Init+0x2d0>)
 80008e8:	f001 f85c 	bl	80019a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	f241 010c 	movw	r1, #4108	; 0x100c
 80008f2:	4869      	ldr	r0, [pc, #420]	; (8000a98 <MX_GPIO_Init+0x2d4>)
 80008f4:	f001 f856 	bl	80019a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2108      	movs	r1, #8
 80008fc:	4867      	ldr	r0, [pc, #412]	; (8000a9c <MX_GPIO_Init+0x2d8>)
 80008fe:	f001 f851 	bl	80019a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000908:	4865      	ldr	r0, [pc, #404]	; (8000aa0 <MX_GPIO_Init+0x2dc>)
 800090a:	f001 f84b 	bl	80019a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	21c8      	movs	r1, #200	; 0xc8
 8000912:	4864      	ldr	r0, [pc, #400]	; (8000aa4 <MX_GPIO_Init+0x2e0>)
 8000914:	f001 f846 	bl	80019a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000918:	2310      	movs	r3, #16
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000928:	230e      	movs	r3, #14
 800092a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000930:	4619      	mov	r1, r3
 8000932:	485d      	ldr	r0, [pc, #372]	; (8000aa8 <MX_GPIO_Init+0x2e4>)
 8000934:	f000 fe8a 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000938:	2308      	movs	r3, #8
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093c:	2300      	movs	r3, #0
 800093e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000948:	4619      	mov	r1, r3
 800094a:	4857      	ldr	r0, [pc, #348]	; (8000aa8 <MX_GPIO_Init+0x2e4>)
 800094c:	f000 fe7e 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000950:	2304      	movs	r3, #4
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000960:	2309      	movs	r3, #9
 8000962:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000968:	4619      	mov	r1, r3
 800096a:	484f      	ldr	r0, [pc, #316]	; (8000aa8 <MX_GPIO_Init+0x2e4>)
 800096c:	f000 fe6e 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000970:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000982:	230b      	movs	r3, #11
 8000984:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000986:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800098a:	4619      	mov	r1, r3
 800098c:	4845      	ldr	r0, [pc, #276]	; (8000aa4 <MX_GPIO_Init+0x2e0>)
 800098e:	f000 fe5d 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000992:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	2302      	movs	r3, #2
 800099a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a0:	2303      	movs	r3, #3
 80009a2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009a4:	230c      	movs	r3, #12
 80009a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009ac:	4619      	mov	r1, r3
 80009ae:	483e      	ldr	r0, [pc, #248]	; (8000aa8 <MX_GPIO_Init+0x2e4>)
 80009b0:	f000 fe4c 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80009b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ba:	2312      	movs	r3, #18
 80009bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009be:	2301      	movs	r3, #1
 80009c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c6:	2304      	movs	r3, #4
 80009c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009ce:	4619      	mov	r1, r3
 80009d0:	4836      	ldr	r0, [pc, #216]	; (8000aac <MX_GPIO_Init+0x2e8>)
 80009d2:	f000 fe3b 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80009d6:	f643 4323 	movw	r3, #15395	; 0x3c23
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e4:	2303      	movs	r3, #3
 80009e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80009e8:	230a      	movs	r3, #10
 80009ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009f0:	4619      	mov	r1, r3
 80009f2:	482e      	ldr	r0, [pc, #184]	; (8000aac <MX_GPIO_Init+0x2e8>)
 80009f4:	f000 fe2a 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80009f8:	2310      	movs	r3, #16
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a10:	4619      	mov	r1, r3
 8000a12:	4826      	ldr	r0, [pc, #152]	; (8000aac <MX_GPIO_Init+0x2e8>)
 8000a14:	f000 fe1a 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000a28:	2308      	movs	r3, #8
 8000a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a30:	4619      	mov	r1, r3
 8000a32:	4818      	ldr	r0, [pc, #96]	; (8000a94 <MX_GPIO_Init+0x2d0>)
 8000a34:	f000 fe0a 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000a38:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a4a:	230c      	movs	r3, #12
 8000a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a52:	4619      	mov	r1, r3
 8000a54:	4816      	ldr	r0, [pc, #88]	; (8000ab0 <MX_GPIO_Init+0x2ec>)
 8000a56:	f000 fdf9 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a74:	4619      	mov	r1, r3
 8000a76:	480f      	ldr	r0, [pc, #60]	; (8000ab4 <MX_GPIO_Init+0x2f0>)
 8000a78:	f000 fde8 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000a7c:	2360      	movs	r3, #96	; 0x60
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a8c:	230d      	movs	r3, #13
 8000a8e:	e013      	b.n	8000ab8 <MX_GPIO_Init+0x2f4>
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020c00 	.word	0x40020c00
 8000a98:	40022000 	.word	0x40022000
 8000a9c:	40022800 	.word	0x40022800
 8000aa0:	40021c00 	.word	0x40021c00
 8000aa4:	40021800 	.word	0x40021800
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40020400 	.word	0x40020400
 8000ab0:	40020800 	.word	0x40020800
 8000ab4:	40020000 	.word	0x40020000
 8000ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000abe:	4619      	mov	r1, r3
 8000ac0:	48bb      	ldr	r0, [pc, #748]	; (8000db0 <MX_GPIO_Init+0x5ec>)
 8000ac2:	f000 fdc3 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000ac6:	2380      	movs	r3, #128	; 0x80
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ad6:	2307      	movs	r3, #7
 8000ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ade:	4619      	mov	r1, r3
 8000ae0:	48b4      	ldr	r0, [pc, #720]	; (8000db4 <MX_GPIO_Init+0x5f0>)
 8000ae2:	f000 fdb3 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000ae6:	2340      	movs	r3, #64	; 0x40
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af2:	2303      	movs	r3, #3
 8000af4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000af6:	230a      	movs	r3, #10
 8000af8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000afe:	4619      	mov	r1, r3
 8000b00:	48ac      	ldr	r0, [pc, #688]	; (8000db4 <MX_GPIO_Init+0x5f0>)
 8000b02:	f000 fda3 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000b06:	f248 1333 	movw	r3, #33075	; 0x8133
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b18:	230c      	movs	r3, #12
 8000b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b20:	4619      	mov	r1, r3
 8000b22:	48a5      	ldr	r0, [pc, #660]	; (8000db8 <MX_GPIO_Init+0x5f4>)
 8000b24:	f000 fd92 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000b28:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b3a:	230e      	movs	r3, #14
 8000b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000b3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b42:	4619      	mov	r1, r3
 8000b44:	489d      	ldr	r0, [pc, #628]	; (8000dbc <MX_GPIO_Init+0x5f8>)
 8000b46:	f000 fd81 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b50:	2300      	movs	r3, #0
 8000b52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4897      	ldr	r0, [pc, #604]	; (8000dbc <MX_GPIO_Init+0x5f8>)
 8000b60:	f000 fd74 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000b64:	2340      	movs	r3, #64	; 0x40
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b68:	4b95      	ldr	r3, [pc, #596]	; (8000dc0 <MX_GPIO_Init+0x5fc>)
 8000b6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b74:	4619      	mov	r1, r3
 8000b76:	4893      	ldr	r0, [pc, #588]	; (8000dc4 <MX_GPIO_Init+0x600>)
 8000b78:	f000 fd68 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000b7c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b8e:	230c      	movs	r3, #12
 8000b90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b96:	4619      	mov	r1, r3
 8000b98:	488a      	ldr	r0, [pc, #552]	; (8000dc4 <MX_GPIO_Init+0x600>)
 8000b9a:	f000 fd57 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000b9e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bb0:	230a      	movs	r3, #10
 8000bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4883      	ldr	r0, [pc, #524]	; (8000dc8 <MX_GPIO_Init+0x604>)
 8000bbc:	f000 fd46 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000bc0:	23f0      	movs	r3, #240	; 0xf0
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000bd0:	230a      	movs	r3, #10
 8000bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd8:	4619      	mov	r1, r3
 8000bda:	487c      	ldr	r0, [pc, #496]	; (8000dcc <MX_GPIO_Init+0x608>)
 8000bdc:	f000 fd36 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000be0:	23f7      	movs	r3, #247	; 0xf7
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bf0:	230e      	movs	r3, #14
 8000bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000bf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4875      	ldr	r0, [pc, #468]	; (8000dd0 <MX_GPIO_Init+0x60c>)
 8000bfc:	f000 fd26 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c12:	2309      	movs	r3, #9
 8000c14:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4866      	ldr	r0, [pc, #408]	; (8000db8 <MX_GPIO_Init+0x5f4>)
 8000c1e:	f000 fd15 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000c34:	230a      	movs	r3, #10
 8000c36:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	485e      	ldr	r0, [pc, #376]	; (8000db8 <MX_GPIO_Init+0x5f4>)
 8000c40:	f000 fd04 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c44:	2320      	movs	r3, #32
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c58:	4619      	mov	r1, r3
 8000c5a:	485a      	ldr	r0, [pc, #360]	; (8000dc4 <MX_GPIO_Init+0x600>)
 8000c5c:	f000 fcf6 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000c60:	2308      	movs	r3, #8
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c70:	230d      	movs	r3, #13
 8000c72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4852      	ldr	r0, [pc, #328]	; (8000dc4 <MX_GPIO_Init+0x600>)
 8000c7c:	f000 fce6 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000c80:	f241 030c 	movw	r3, #4108	; 0x100c
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c96:	4619      	mov	r1, r3
 8000c98:	484c      	ldr	r0, [pc, #304]	; (8000dcc <MX_GPIO_Init+0x608>)
 8000c9a:	f000 fcd7 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000c9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000cac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4848      	ldr	r0, [pc, #288]	; (8000dd4 <MX_GPIO_Init+0x610>)
 8000cb4:	f000 fcca 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000cb8:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cca:	230c      	movs	r3, #12
 8000ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4840      	ldr	r0, [pc, #256]	; (8000dd8 <MX_GPIO_Init+0x614>)
 8000cd6:	f000 fcb9 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000cda:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cec:	230e      	movs	r3, #14
 8000cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4835      	ldr	r0, [pc, #212]	; (8000dcc <MX_GPIO_Init+0x608>)
 8000cf8:	f000 fca8 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000cfc:	2308      	movs	r3, #8
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d10:	4619      	mov	r1, r3
 8000d12:	482f      	ldr	r0, [pc, #188]	; (8000dd0 <MX_GPIO_Init+0x60c>)
 8000d14:	f000 fc9a 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000d18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d2a:	230d      	movs	r3, #13
 8000d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d32:	4619      	mov	r1, r3
 8000d34:	4820      	ldr	r0, [pc, #128]	; (8000db8 <MX_GPIO_Init+0x5f4>)
 8000d36:	f000 fc89 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000d3a:	2310      	movs	r3, #16
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	481d      	ldr	r0, [pc, #116]	; (8000dc4 <MX_GPIO_Init+0x600>)
 8000d4e:	f000 fc7d 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000d52:	2304      	movs	r3, #4
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d62:	230c      	movs	r3, #12
 8000d64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000d66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4815      	ldr	r0, [pc, #84]	; (8000dc4 <MX_GPIO_Init+0x600>)
 8000d6e:	f000 fc6d 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000d72:	f248 0304 	movw	r3, #32772	; 0x8004
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d84:	4619      	mov	r1, r3
 8000d86:	4815      	ldr	r0, [pc, #84]	; (8000ddc <MX_GPIO_Init+0x618>)
 8000d88:	f000 fc60 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d9c:	2305      	movs	r3, #5
 8000d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da4:	4619      	mov	r1, r3
 8000da6:	4809      	ldr	r0, [pc, #36]	; (8000dcc <MX_GPIO_Init+0x608>)
 8000da8:	f000 fc50 	bl	800164c <HAL_GPIO_Init>
 8000dac:	e018      	b.n	8000de0 <MX_GPIO_Init+0x61c>
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40020400 	.word	0x40020400
 8000db8:	40021800 	.word	0x40021800
 8000dbc:	40022400 	.word	0x40022400
 8000dc0:	10120000 	.word	0x10120000
 8000dc4:	40020c00 	.word	0x40020c00
 8000dc8:	40020000 	.word	0x40020000
 8000dcc:	40022000 	.word	0x40022000
 8000dd0:	40022800 	.word	0x40022800
 8000dd4:	40020800 	.word	0x40020800
 8000dd8:	40021400 	.word	0x40021400
 8000ddc:	40021c00 	.word	0x40021c00

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000de0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df6:	4619      	mov	r1, r3
 8000df8:	48b6      	ldr	r0, [pc, #728]	; (80010d4 <MX_GPIO_Init+0x910>)
 8000dfa:	f000 fc27 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000dfe:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e10:	230d      	movs	r3, #13
 8000e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e18:	4619      	mov	r1, r3
 8000e1a:	48ae      	ldr	r0, [pc, #696]	; (80010d4 <MX_GPIO_Init+0x910>)
 8000e1c:	f000 fc16 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000e20:	2301      	movs	r3, #1
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e30:	2302      	movs	r3, #2
 8000e32:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e38:	4619      	mov	r1, r3
 8000e3a:	48a7      	ldr	r0, [pc, #668]	; (80010d8 <MX_GPIO_Init+0x914>)
 8000e3c:	f000 fc06 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e52:	2307      	movs	r3, #7
 8000e54:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	489f      	ldr	r0, [pc, #636]	; (80010dc <MX_GPIO_Init+0x918>)
 8000e5e:	f000 fbf5 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000e62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e74:	2301      	movs	r3, #1
 8000e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000e78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4897      	ldr	r0, [pc, #604]	; (80010dc <MX_GPIO_Init+0x918>)
 8000e80:	f000 fbe4 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000e84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e8a:	4b95      	ldr	r3, [pc, #596]	; (80010e0 <MX_GPIO_Init+0x91c>)
 8000e8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000e92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e96:	4619      	mov	r1, r3
 8000e98:	488f      	ldr	r0, [pc, #572]	; (80010d8 <MX_GPIO_Init+0x914>)
 8000e9a:	f000 fbd7 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000e9e:	23c0      	movs	r3, #192	; 0xc0
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000eae:	2308      	movs	r3, #8
 8000eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	488a      	ldr	r0, [pc, #552]	; (80010e4 <MX_GPIO_Init+0x920>)
 8000eba:	f000 fbc7 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000ebe:	2310      	movs	r3, #16
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ece:	230a      	movs	r3, #10
 8000ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	487e      	ldr	r0, [pc, #504]	; (80010d4 <MX_GPIO_Init+0x910>)
 8000eda:	f000 fbb7 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000ede:	2328      	movs	r3, #40	; 0x28
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eea:	2303      	movs	r3, #3
 8000eec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eee:	230c      	movs	r3, #12
 8000ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ef2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4876      	ldr	r0, [pc, #472]	; (80010d4 <MX_GPIO_Init+0x910>)
 8000efa:	f000 fba7 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000efe:	23c8      	movs	r3, #200	; 0xc8
 8000f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f12:	4619      	mov	r1, r3
 8000f14:	4874      	ldr	r0, [pc, #464]	; (80010e8 <MX_GPIO_Init+0x924>)
 8000f16:	f000 fb99 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000f1a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f20:	2303      	movs	r3, #3
 8000f22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	486f      	ldr	r0, [pc, #444]	; (80010ec <MX_GPIO_Init+0x928>)
 8000f30:	f000 fb8c 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000f34:	2308      	movs	r3, #8
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f40:	2303      	movs	r3, #3
 8000f42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f44:	230c      	movs	r3, #12
 8000f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000f48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4865      	ldr	r0, [pc, #404]	; (80010e4 <MX_GPIO_Init+0x920>)
 8000f50:	f000 fb7c 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000f54:	2305      	movs	r3, #5
 8000f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f60:	2303      	movs	r3, #3
 8000f62:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f64:	230a      	movs	r3, #10
 8000f66:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	485d      	ldr	r0, [pc, #372]	; (80010e4 <MX_GPIO_Init+0x920>)
 8000f70:	f000 fb6c 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f74:	2332      	movs	r3, #50	; 0x32
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f84:	230b      	movs	r3, #11
 8000f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4855      	ldr	r0, [pc, #340]	; (80010e4 <MX_GPIO_Init+0x920>)
 8000f90:	f000 fb5c 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f94:	2304      	movs	r3, #4
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000fa4:	2309      	movs	r3, #9
 8000fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fac:	4619      	mov	r1, r3
 8000fae:	4850      	ldr	r0, [pc, #320]	; (80010f0 <MX_GPIO_Init+0x92c>)
 8000fb0:	f000 fb4c 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000fb4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000fc6:	2309      	movs	r3, #9
 8000fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4848      	ldr	r0, [pc, #288]	; (80010f4 <MX_GPIO_Init+0x930>)
 8000fd2:	f000 fb3b 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	483f      	ldr	r0, [pc, #252]	; (80010e8 <MX_GPIO_Init+0x924>)
 8000fea:	f000 fb2f 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fee:	2386      	movs	r3, #134	; 0x86
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ffe:	230b      	movs	r3, #11
 8001000:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001006:	4619      	mov	r1, r3
 8001008:	4834      	ldr	r0, [pc, #208]	; (80010dc <MX_GPIO_Init+0x918>)
 800100a:	f000 fb1f 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800100e:	2301      	movs	r3, #1
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001012:	2303      	movs	r3, #3
 8001014:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800101a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800101e:	4619      	mov	r1, r3
 8001020:	482e      	ldr	r0, [pc, #184]	; (80010dc <MX_GPIO_Init+0x918>)
 8001022:	f000 fb13 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001026:	2350      	movs	r3, #80	; 0x50
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001036:	230d      	movs	r3, #13
 8001038:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800103e:	4619      	mov	r1, r3
 8001040:	4826      	ldr	r0, [pc, #152]	; (80010dc <MX_GPIO_Init+0x918>)
 8001042:	f000 fb03 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001046:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800104c:	2312      	movs	r3, #18
 800104e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001050:	2301      	movs	r3, #1
 8001052:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001058:	2304      	movs	r3, #4
 800105a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800105c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001060:	4619      	mov	r1, r3
 8001062:	481c      	ldr	r0, [pc, #112]	; (80010d4 <MX_GPIO_Init+0x910>)
 8001064:	f000 faf2 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001068:	2328      	movs	r3, #40	; 0x28
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001078:	230a      	movs	r3, #10
 800107a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001080:	4619      	mov	r1, r3
 8001082:	4816      	ldr	r0, [pc, #88]	; (80010dc <MX_GPIO_Init+0x918>)
 8001084:	f000 fae2 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001088:	2340      	movs	r3, #64	; 0x40
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001098:	2309      	movs	r3, #9
 800109a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800109c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010a0:	4619      	mov	r1, r3
 80010a2:	480c      	ldr	r0, [pc, #48]	; (80010d4 <MX_GPIO_Init+0x910>)
 80010a4:	f000 fad2 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80010a8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010ba:	2305      	movs	r3, #5
 80010bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c2:	4619      	mov	r1, r3
 80010c4:	480a      	ldr	r0, [pc, #40]	; (80010f0 <MX_GPIO_Init+0x92c>)
 80010c6:	f000 fac1 	bl	800164c <HAL_GPIO_Init>

}
 80010ca:	bf00      	nop
 80010cc:	3740      	adds	r7, #64	; 0x40
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40021c00 	.word	0x40021c00
 80010d8:	40022000 	.word	0x40022000
 80010dc:	40020000 	.word	0x40020000
 80010e0:	10120000 	.word	0x10120000
 80010e4:	40020800 	.word	0x40020800
 80010e8:	40021800 	.word	0x40021800
 80010ec:	40021400 	.word	0x40021400
 80010f0:	40020400 	.word	0x40020400
 80010f4:	40020c00 	.word	0x40020c00

080010f8 <print_cpuId>:

/* USER CODE BEGIN 4 */
#define CPUID_CUSTOM  	*((volatile uint32_t*) (0xE000E000UL + 0x0D00UL) )

void print_cpuId(void) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	printf("CPU ID: %08X \n", (unsigned int)CPUID_CUSTOM);
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <print_cpuId+0x14>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	4803      	ldr	r0, [pc, #12]	; (8001110 <print_cpuId+0x18>)
 8001104:	f004 f8c4 	bl	8005290 <iprintf>
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	e000ed00 	.word	0xe000ed00
 8001110:	080061a8 	.word	0x080061a8

08001114 <print_cpuVariant>:

void print_cpuVariant(void) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
	uint32_t cpuid_rvalue = (CPUID_CUSTOM >> 20) & 0x0000000F;
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <print_cpuVariant+0x30>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	0d1b      	lsrs	r3, r3, #20
 8001120:	f003 030f 	and.w	r3, r3, #15
 8001124:	607b      	str	r3, [r7, #4]
	uint32_t cpuid_pvalue = CPUID_CUSTOM & 0x0000000F;
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <print_cpuVariant+0x30>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	603b      	str	r3, [r7, #0]
	printf("Variant: r%lup%lu \n", cpuid_rvalue, cpuid_pvalue);
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	4804      	ldr	r0, [pc, #16]	; (8001148 <print_cpuVariant+0x34>)
 8001136:	f004 f8ab 	bl	8005290 <iprintf>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	e000ed00 	.word	0xe000ed00
 8001148:	080061b8 	.word	0x080061b8

0800114c <task1_handler>:


static void task1_handler(void* parameters)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]

	while(1){
		// printf("%s", (char *)parameters);

		print_cpuId();
 8001154:	f7ff ffd0 	bl	80010f8 <print_cpuId>
		print_cpuVariant();
 8001158:	f7ff ffdc 	bl	8001114 <print_cpuVariant>

		taskYIELD();
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <task1_handler+0x24>)
 800115e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	f3bf 8f4f 	dsb	sy
 8001168:	f3bf 8f6f 	isb	sy
		print_cpuId();
 800116c:	e7f2      	b.n	8001154 <task1_handler+0x8>
 800116e:	bf00      	nop
 8001170:	e000ed04 	.word	0xe000ed04

08001174 <task2_handler>:

	return;
}

static void task2_handler(void* parameters)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

	while(1){
		printf("%s", (char *)parameters);
 800117c:	6879      	ldr	r1, [r7, #4]
 800117e:	4806      	ldr	r0, [pc, #24]	; (8001198 <task2_handler+0x24>)
 8001180:	f004 f886 	bl	8005290 <iprintf>
		taskYIELD();
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <task2_handler+0x28>)
 8001186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	f3bf 8f4f 	dsb	sy
 8001190:	f3bf 8f6f 	isb	sy
		printf("%s", (char *)parameters);
 8001194:	e7f2      	b.n	800117c <task2_handler+0x8>
 8001196:	bf00      	nop
 8001198:	080061cc 	.word	0x080061cc
 800119c:	e000ed04 	.word	0xe000ed04

080011a0 <vAssertCalled>:

	return;
}

void vAssertCalled(  uint32_t ulLine, const char *pcFile )
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
    /* Called if an assertion passed to configASSERT() fails.  See
    http://www.freertos.org/a00110.html#configASSERT for more information. */
	for(;;);
 80011aa:	e7fe      	b.n	80011aa <vAssertCalled+0xa>

080011ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a04      	ldr	r2, [pc, #16]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d101      	bne.n	80011c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011be:	f000 f943 	bl	8001448 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40001000 	.word	0x40001000

080011d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d4:	b672      	cpsid	i
}
 80011d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <Error_Handler+0x8>
	...

080011dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <HAL_MspInit+0x44>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <HAL_MspInit+0x44>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <HAL_MspInit+0x44>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <HAL_MspInit+0x44>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	4a08      	ldr	r2, [pc, #32]	; (8001220 <HAL_MspInit+0x44>)
 8001200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001204:	6453      	str	r3, [r2, #68]	; 0x44
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_MspInit+0x44>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8001212:	f001 ffb7 	bl	8003184 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800

08001224 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08c      	sub	sp, #48	; 0x30
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001234:	2200      	movs	r2, #0
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	2036      	movs	r0, #54	; 0x36
 800123a:	f000 f9dd 	bl	80015f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800123e:	2036      	movs	r0, #54	; 0x36
 8001240:	f000 f9f6 	bl	8001630 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <HAL_InitTick+0xa0>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	4a1e      	ldr	r2, [pc, #120]	; (80012c4 <HAL_InitTick+0xa0>)
 800124a:	f043 0310 	orr.w	r3, r3, #16
 800124e:	6413      	str	r3, [r2, #64]	; 0x40
 8001250:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <HAL_InitTick+0xa0>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	f003 0310 	and.w	r3, r3, #16
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800125c:	f107 0210 	add.w	r2, r7, #16
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4611      	mov	r1, r2
 8001266:	4618      	mov	r0, r3
 8001268:	f001 f81c 	bl	80022a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800126c:	f001 f806 	bl	800227c <HAL_RCC_GetPCLK1Freq>
 8001270:	4603      	mov	r3, r0
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001278:	4a13      	ldr	r2, [pc, #76]	; (80012c8 <HAL_InitTick+0xa4>)
 800127a:	fba2 2303 	umull	r2, r3, r2, r3
 800127e:	0c9b      	lsrs	r3, r3, #18
 8001280:	3b01      	subs	r3, #1
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <HAL_InitTick+0xa8>)
 8001286:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <HAL_InitTick+0xac>)
 8001288:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <HAL_InitTick+0xa8>)
 800128c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001290:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001292:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <HAL_InitTick+0xa8>)
 8001294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001296:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <HAL_InitTick+0xa8>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <HAL_InitTick+0xa8>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80012a4:	4809      	ldr	r0, [pc, #36]	; (80012cc <HAL_InitTick+0xa8>)
 80012a6:	f001 f82f 	bl	8002308 <HAL_TIM_Base_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d104      	bne.n	80012ba <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80012b0:	4806      	ldr	r0, [pc, #24]	; (80012cc <HAL_InitTick+0xa8>)
 80012b2:	f001 f88b 	bl	80023cc <HAL_TIM_Base_Start_IT>
 80012b6:	4603      	mov	r3, r0
 80012b8:	e000      	b.n	80012bc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3730      	adds	r7, #48	; 0x30
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40023800 	.word	0x40023800
 80012c8:	431bde83 	.word	0x431bde83
 80012cc:	2000cfa0 	.word	0x2000cfa0
 80012d0:	40001000 	.word	0x40001000

080012d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <NMI_Handler+0x4>

080012da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <HardFault_Handler+0x4>

080012e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <MemManage_Handler+0x4>

080012e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <BusFault_Handler+0x4>

080012ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <UsageFault_Handler+0x4>

080012f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <TIM6_DAC_IRQHandler+0x10>)
 8001306:	f001 f8d9 	bl	80024bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2000cfa0 	.word	0x2000cfa0

08001314 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	e00a      	b.n	800133c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001326:	f3af 8000 	nop.w
 800132a:	4601      	mov	r1, r0
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	60ba      	str	r2, [r7, #8]
 8001332:	b2ca      	uxtb	r2, r1
 8001334:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	3301      	adds	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	429a      	cmp	r2, r3
 8001342:	dbf0      	blt.n	8001326 <_read+0x12>
	}

return len;
 8001344:	687b      	ldr	r3, [r7, #4]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <_close>:
	}
	return len;
}

int _close(int file)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
	return -1;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001376:	605a      	str	r2, [r3, #4]
	return 0;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <_isatty>:

int _isatty(int file)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
	return 1;
 800138e:	2301      	movs	r3, #1
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
	return 0;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <SystemInit+0x20>)
 80013be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013c2:	4a05      	ldr	r2, [pc, #20]	; (80013d8 <SystemInit+0x20>)
 80013c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001414 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013e0:	480d      	ldr	r0, [pc, #52]	; (8001418 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013e2:	490e      	ldr	r1, [pc, #56]	; (800141c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013e4:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e8:	e002      	b.n	80013f0 <LoopCopyDataInit>

080013ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ee:	3304      	adds	r3, #4

080013f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f4:	d3f9      	bcc.n	80013ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013f8:	4c0b      	ldr	r4, [pc, #44]	; (8001428 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013fc:	e001      	b.n	8001402 <LoopFillZerobss>

080013fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001400:	3204      	adds	r2, #4

08001402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001404:	d3fb      	bcc.n	80013fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001406:	f7ff ffd7 	bl	80013b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800140a:	f003 fef9 	bl	8005200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800140e:	f7ff f91b 	bl	8000648 <main>
  bx  lr    
 8001412:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001414:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800141c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001420:	08006414 	.word	0x08006414
  ldr r2, =_sbss
 8001424:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001428:	2000d0a8 	.word	0x2000d0a8

0800142c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800142c:	e7fe      	b.n	800142c <ADC_IRQHandler>

0800142e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001432:	2003      	movs	r0, #3
 8001434:	f000 f8d5 	bl	80015e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001438:	2000      	movs	r0, #0
 800143a:	f7ff fef3 	bl	8001224 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800143e:	f7ff fecd 	bl	80011dc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_IncTick+0x20>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_IncTick+0x24>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a04      	ldr	r2, [pc, #16]	; (800146c <HAL_IncTick+0x24>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000008 	.word	0x20000008
 800146c:	2000cfec 	.word	0x2000cfec

08001470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return uwTick;
 8001474:	4b03      	ldr	r3, [pc, #12]	; (8001484 <HAL_GetTick+0x14>)
 8001476:	681b      	ldr	r3, [r3, #0]
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	2000cfec 	.word	0x2000cfec

08001488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <__NVIC_SetPriorityGrouping+0x40>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a4:	4013      	ands	r3, r2
 80014a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b6:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <__NVIC_SetPriorityGrouping+0x40>)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	60d3      	str	r3, [r2, #12]
}
 80014bc:	bf00      	nop
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00
 80014cc:	05fa0000 	.word	0x05fa0000

080014d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <__NVIC_GetPriorityGrouping+0x18>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	f003 0307 	and.w	r3, r3, #7
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	db0b      	blt.n	8001516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	f003 021f 	and.w	r2, r3, #31
 8001504:	4907      	ldr	r1, [pc, #28]	; (8001524 <__NVIC_EnableIRQ+0x38>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	095b      	lsrs	r3, r3, #5
 800150c:	2001      	movs	r0, #1
 800150e:	fa00 f202 	lsl.w	r2, r0, r2
 8001512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000e100 	.word	0xe000e100

08001528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	6039      	str	r1, [r7, #0]
 8001532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	2b00      	cmp	r3, #0
 800153a:	db0a      	blt.n	8001552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	b2da      	uxtb	r2, r3
 8001540:	490c      	ldr	r1, [pc, #48]	; (8001574 <__NVIC_SetPriority+0x4c>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	0112      	lsls	r2, r2, #4
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	440b      	add	r3, r1
 800154c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001550:	e00a      	b.n	8001568 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4908      	ldr	r1, [pc, #32]	; (8001578 <__NVIC_SetPriority+0x50>)
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	3b04      	subs	r3, #4
 8001560:	0112      	lsls	r2, r2, #4
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	440b      	add	r3, r1
 8001566:	761a      	strb	r2, [r3, #24]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000e100 	.word	0xe000e100
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157c:	b480      	push	{r7}
 800157e:	b089      	sub	sp, #36	; 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f1c3 0307 	rsb	r3, r3, #7
 8001596:	2b04      	cmp	r3, #4
 8001598:	bf28      	it	cs
 800159a:	2304      	movcs	r3, #4
 800159c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3304      	adds	r3, #4
 80015a2:	2b06      	cmp	r3, #6
 80015a4:	d902      	bls.n	80015ac <NVIC_EncodePriority+0x30>
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3b03      	subs	r3, #3
 80015aa:	e000      	b.n	80015ae <NVIC_EncodePriority+0x32>
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43da      	mvns	r2, r3
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	401a      	ands	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	43d9      	mvns	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	4313      	orrs	r3, r2
         );
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3724      	adds	r7, #36	; 0x24
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff ff4c 	bl	8001488 <__NVIC_SetPriorityGrouping>
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800160a:	f7ff ff61 	bl	80014d0 <__NVIC_GetPriorityGrouping>
 800160e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	68b9      	ldr	r1, [r7, #8]
 8001614:	6978      	ldr	r0, [r7, #20]
 8001616:	f7ff ffb1 	bl	800157c <NVIC_EncodePriority>
 800161a:	4602      	mov	r2, r0
 800161c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001620:	4611      	mov	r1, r2
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff ff80 	bl	8001528 <__NVIC_SetPriority>
}
 8001628:	bf00      	nop
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff54 	bl	80014ec <__NVIC_EnableIRQ>
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	; 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001662:	2300      	movs	r3, #0
 8001664:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
 800166a:	e175      	b.n	8001958 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800166c:	2201      	movs	r2, #1
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	429a      	cmp	r2, r3
 8001686:	f040 8164 	bne.w	8001952 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d00b      	beq.n	80016aa <HAL_GPIO_Init+0x5e>
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d007      	beq.n	80016aa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800169e:	2b11      	cmp	r3, #17
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b12      	cmp	r3, #18
 80016a8:	d130      	bne.n	800170c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	2203      	movs	r2, #3
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	68da      	ldr	r2, [r3, #12]
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016e0:	2201      	movs	r2, #1
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	091b      	lsrs	r3, r3, #4
 80016f6:	f003 0201 	and.w	r2, r3, #1
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	2203      	movs	r2, #3
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d003      	beq.n	800174c <HAL_GPIO_Init+0x100>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b12      	cmp	r3, #18
 800174a:	d123      	bne.n	8001794 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	08da      	lsrs	r2, r3, #3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3208      	adds	r2, #8
 8001754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	220f      	movs	r2, #15
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	691a      	ldr	r2, [r3, #16]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	08da      	lsrs	r2, r3, #3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3208      	adds	r2, #8
 800178e:	69b9      	ldr	r1, [r7, #24]
 8001790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	2203      	movs	r2, #3
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 0203 	and.w	r2, r3, #3
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 80be 	beq.w	8001952 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d6:	4b66      	ldr	r3, [pc, #408]	; (8001970 <HAL_GPIO_Init+0x324>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	4a65      	ldr	r2, [pc, #404]	; (8001970 <HAL_GPIO_Init+0x324>)
 80017dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e0:	6453      	str	r3, [r2, #68]	; 0x44
 80017e2:	4b63      	ldr	r3, [pc, #396]	; (8001970 <HAL_GPIO_Init+0x324>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80017ee:	4a61      	ldr	r2, [pc, #388]	; (8001974 <HAL_GPIO_Init+0x328>)
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	089b      	lsrs	r3, r3, #2
 80017f4:	3302      	adds	r3, #2
 80017f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	220f      	movs	r2, #15
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a58      	ldr	r2, [pc, #352]	; (8001978 <HAL_GPIO_Init+0x32c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d037      	beq.n	800188a <HAL_GPIO_Init+0x23e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a57      	ldr	r2, [pc, #348]	; (800197c <HAL_GPIO_Init+0x330>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d031      	beq.n	8001886 <HAL_GPIO_Init+0x23a>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a56      	ldr	r2, [pc, #344]	; (8001980 <HAL_GPIO_Init+0x334>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d02b      	beq.n	8001882 <HAL_GPIO_Init+0x236>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a55      	ldr	r2, [pc, #340]	; (8001984 <HAL_GPIO_Init+0x338>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d025      	beq.n	800187e <HAL_GPIO_Init+0x232>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a54      	ldr	r2, [pc, #336]	; (8001988 <HAL_GPIO_Init+0x33c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d01f      	beq.n	800187a <HAL_GPIO_Init+0x22e>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a53      	ldr	r2, [pc, #332]	; (800198c <HAL_GPIO_Init+0x340>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d019      	beq.n	8001876 <HAL_GPIO_Init+0x22a>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a52      	ldr	r2, [pc, #328]	; (8001990 <HAL_GPIO_Init+0x344>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d013      	beq.n	8001872 <HAL_GPIO_Init+0x226>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a51      	ldr	r2, [pc, #324]	; (8001994 <HAL_GPIO_Init+0x348>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d00d      	beq.n	800186e <HAL_GPIO_Init+0x222>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a50      	ldr	r2, [pc, #320]	; (8001998 <HAL_GPIO_Init+0x34c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d007      	beq.n	800186a <HAL_GPIO_Init+0x21e>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a4f      	ldr	r2, [pc, #316]	; (800199c <HAL_GPIO_Init+0x350>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d101      	bne.n	8001866 <HAL_GPIO_Init+0x21a>
 8001862:	2309      	movs	r3, #9
 8001864:	e012      	b.n	800188c <HAL_GPIO_Init+0x240>
 8001866:	230a      	movs	r3, #10
 8001868:	e010      	b.n	800188c <HAL_GPIO_Init+0x240>
 800186a:	2308      	movs	r3, #8
 800186c:	e00e      	b.n	800188c <HAL_GPIO_Init+0x240>
 800186e:	2307      	movs	r3, #7
 8001870:	e00c      	b.n	800188c <HAL_GPIO_Init+0x240>
 8001872:	2306      	movs	r3, #6
 8001874:	e00a      	b.n	800188c <HAL_GPIO_Init+0x240>
 8001876:	2305      	movs	r3, #5
 8001878:	e008      	b.n	800188c <HAL_GPIO_Init+0x240>
 800187a:	2304      	movs	r3, #4
 800187c:	e006      	b.n	800188c <HAL_GPIO_Init+0x240>
 800187e:	2303      	movs	r3, #3
 8001880:	e004      	b.n	800188c <HAL_GPIO_Init+0x240>
 8001882:	2302      	movs	r3, #2
 8001884:	e002      	b.n	800188c <HAL_GPIO_Init+0x240>
 8001886:	2301      	movs	r3, #1
 8001888:	e000      	b.n	800188c <HAL_GPIO_Init+0x240>
 800188a:	2300      	movs	r3, #0
 800188c:	69fa      	ldr	r2, [r7, #28]
 800188e:	f002 0203 	and.w	r2, r2, #3
 8001892:	0092      	lsls	r2, r2, #2
 8001894:	4093      	lsls	r3, r2
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800189c:	4935      	ldr	r1, [pc, #212]	; (8001974 <HAL_GPIO_Init+0x328>)
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	089b      	lsrs	r3, r3, #2
 80018a2:	3302      	adds	r3, #2
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018aa:	4b3d      	ldr	r3, [pc, #244]	; (80019a0 <HAL_GPIO_Init+0x354>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4013      	ands	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018ce:	4a34      	ldr	r2, [pc, #208]	; (80019a0 <HAL_GPIO_Init+0x354>)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018d4:	4b32      	ldr	r3, [pc, #200]	; (80019a0 <HAL_GPIO_Init+0x354>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018f8:	4a29      	ldr	r2, [pc, #164]	; (80019a0 <HAL_GPIO_Init+0x354>)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018fe:	4b28      	ldr	r3, [pc, #160]	; (80019a0 <HAL_GPIO_Init+0x354>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	43db      	mvns	r3, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4013      	ands	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001922:	4a1f      	ldr	r2, [pc, #124]	; (80019a0 <HAL_GPIO_Init+0x354>)
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001928:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <HAL_GPIO_Init+0x354>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800194c:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <HAL_GPIO_Init+0x354>)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3301      	adds	r3, #1
 8001956:	61fb      	str	r3, [r7, #28]
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	2b0f      	cmp	r3, #15
 800195c:	f67f ae86 	bls.w	800166c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	3724      	adds	r7, #36	; 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800
 8001974:	40013800 	.word	0x40013800
 8001978:	40020000 	.word	0x40020000
 800197c:	40020400 	.word	0x40020400
 8001980:	40020800 	.word	0x40020800
 8001984:	40020c00 	.word	0x40020c00
 8001988:	40021000 	.word	0x40021000
 800198c:	40021400 	.word	0x40021400
 8001990:	40021800 	.word	0x40021800
 8001994:	40021c00 	.word	0x40021c00
 8001998:	40022000 	.word	0x40022000
 800199c:	40022400 	.word	0x40022400
 80019a0:	40013c00 	.word	0x40013c00

080019a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	807b      	strh	r3, [r7, #2]
 80019b0:	4613      	mov	r3, r2
 80019b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019b4:	787b      	ldrb	r3, [r7, #1]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ba:	887a      	ldrh	r2, [r7, #2]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80019c0:	e003      	b.n	80019ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80019c2:	887b      	ldrh	r3, [r7, #2]
 80019c4:	041a      	lsls	r2, r3, #16
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	619a      	str	r2, [r3, #24]
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80019e0:	2300      	movs	r3, #0
 80019e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e291      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 8087 	beq.w	8001b0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019fc:	4b96      	ldr	r3, [pc, #600]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 030c 	and.w	r3, r3, #12
 8001a04:	2b04      	cmp	r3, #4
 8001a06:	d00c      	beq.n	8001a22 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a08:	4b93      	ldr	r3, [pc, #588]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 030c 	and.w	r3, r3, #12
 8001a10:	2b08      	cmp	r3, #8
 8001a12:	d112      	bne.n	8001a3a <HAL_RCC_OscConfig+0x62>
 8001a14:	4b90      	ldr	r3, [pc, #576]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a20:	d10b      	bne.n	8001a3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a22:	4b8d      	ldr	r3, [pc, #564]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d06c      	beq.n	8001b08 <HAL_RCC_OscConfig+0x130>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d168      	bne.n	8001b08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e26b      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a42:	d106      	bne.n	8001a52 <HAL_RCC_OscConfig+0x7a>
 8001a44:	4b84      	ldr	r3, [pc, #528]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a83      	ldr	r2, [pc, #524]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	e02e      	b.n	8001ab0 <HAL_RCC_OscConfig+0xd8>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10c      	bne.n	8001a74 <HAL_RCC_OscConfig+0x9c>
 8001a5a:	4b7f      	ldr	r3, [pc, #508]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a7e      	ldr	r2, [pc, #504]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	4b7c      	ldr	r3, [pc, #496]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a7b      	ldr	r2, [pc, #492]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	e01d      	b.n	8001ab0 <HAL_RCC_OscConfig+0xd8>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a7c:	d10c      	bne.n	8001a98 <HAL_RCC_OscConfig+0xc0>
 8001a7e:	4b76      	ldr	r3, [pc, #472]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a75      	ldr	r2, [pc, #468]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	4b73      	ldr	r3, [pc, #460]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a72      	ldr	r2, [pc, #456]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	e00b      	b.n	8001ab0 <HAL_RCC_OscConfig+0xd8>
 8001a98:	4b6f      	ldr	r3, [pc, #444]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a6e      	ldr	r2, [pc, #440]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	4b6c      	ldr	r3, [pc, #432]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a6b      	ldr	r2, [pc, #428]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d013      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab8:	f7ff fcda 	bl	8001470 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac0:	f7ff fcd6 	bl	8001470 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b64      	cmp	r3, #100	; 0x64
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e21f      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad2:	4b61      	ldr	r3, [pc, #388]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0xe8>
 8001ade:	e014      	b.n	8001b0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fcc6 	bl	8001470 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae8:	f7ff fcc2 	bl	8001470 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b64      	cmp	r3, #100	; 0x64
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e20b      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afa:	4b57      	ldr	r3, [pc, #348]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x110>
 8001b06:	e000      	b.n	8001b0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d069      	beq.n	8001bea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b16:	4b50      	ldr	r3, [pc, #320]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 030c 	and.w	r3, r3, #12
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00b      	beq.n	8001b3a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b22:	4b4d      	ldr	r3, [pc, #308]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	2b08      	cmp	r3, #8
 8001b2c:	d11c      	bne.n	8001b68 <HAL_RCC_OscConfig+0x190>
 8001b2e:	4b4a      	ldr	r3, [pc, #296]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d116      	bne.n	8001b68 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3a:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d005      	beq.n	8001b52 <HAL_RCC_OscConfig+0x17a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d001      	beq.n	8001b52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e1df      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b52:	4b41      	ldr	r3, [pc, #260]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	493d      	ldr	r1, [pc, #244]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b66:	e040      	b.n	8001bea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d023      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b70:	4b39      	ldr	r3, [pc, #228]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a38      	ldr	r2, [pc, #224]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7c:	f7ff fc78 	bl	8001470 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b84:	f7ff fc74 	bl	8001470 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e1bd      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b96:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba2:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	4929      	ldr	r1, [pc, #164]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]
 8001bb6:	e018      	b.n	8001bea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb8:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a26      	ldr	r2, [pc, #152]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001bbe:	f023 0301 	bic.w	r3, r3, #1
 8001bc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fc54 	bl	8001470 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bcc:	f7ff fc50 	bl	8001470 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e199      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bde:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d038      	beq.n	8001c68 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d019      	beq.n	8001c32 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bfe:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c02:	4a15      	ldr	r2, [pc, #84]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0a:	f7ff fc31 	bl	8001470 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c12:	f7ff fc2d 	bl	8001470 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e176      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0x23a>
 8001c30:	e01a      	b.n	8001c68 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c36:	4a08      	ldr	r2, [pc, #32]	; (8001c58 <HAL_RCC_OscConfig+0x280>)
 8001c38:	f023 0301 	bic.w	r3, r3, #1
 8001c3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3e:	f7ff fc17 	bl	8001470 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c44:	e00a      	b.n	8001c5c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c46:	f7ff fc13 	bl	8001470 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d903      	bls.n	8001c5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e15c      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
 8001c58:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c5c:	4b91      	ldr	r3, [pc, #580]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1ee      	bne.n	8001c46 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80a4 	beq.w	8001dbe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c76:	4b8b      	ldr	r3, [pc, #556]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10d      	bne.n	8001c9e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c82:	4b88      	ldr	r3, [pc, #544]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a87      	ldr	r2, [pc, #540]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b85      	ldr	r3, [pc, #532]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c9e:	4b82      	ldr	r3, [pc, #520]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d118      	bne.n	8001cdc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001caa:	4b7f      	ldr	r3, [pc, #508]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a7e      	ldr	r2, [pc, #504]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb6:	f7ff fbdb 	bl	8001470 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cbe:	f7ff fbd7 	bl	8001470 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b64      	cmp	r3, #100	; 0x64
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e120      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd0:	4b75      	ldr	r3, [pc, #468]	; (8001ea8 <HAL_RCC_OscConfig+0x4d0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x31a>
 8001ce4:	4b6f      	ldr	r3, [pc, #444]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce8:	4a6e      	ldr	r2, [pc, #440]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf0:	e02d      	b.n	8001d4e <HAL_RCC_OscConfig+0x376>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x33c>
 8001cfa:	4b6a      	ldr	r3, [pc, #424]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfe:	4a69      	ldr	r2, [pc, #420]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001d00:	f023 0301 	bic.w	r3, r3, #1
 8001d04:	6713      	str	r3, [r2, #112]	; 0x70
 8001d06:	4b67      	ldr	r3, [pc, #412]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0a:	4a66      	ldr	r2, [pc, #408]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001d0c:	f023 0304 	bic.w	r3, r3, #4
 8001d10:	6713      	str	r3, [r2, #112]	; 0x70
 8001d12:	e01c      	b.n	8001d4e <HAL_RCC_OscConfig+0x376>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b05      	cmp	r3, #5
 8001d1a:	d10c      	bne.n	8001d36 <HAL_RCC_OscConfig+0x35e>
 8001d1c:	4b61      	ldr	r3, [pc, #388]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d20:	4a60      	ldr	r2, [pc, #384]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001d22:	f043 0304 	orr.w	r3, r3, #4
 8001d26:	6713      	str	r3, [r2, #112]	; 0x70
 8001d28:	4b5e      	ldr	r3, [pc, #376]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2c:	4a5d      	ldr	r2, [pc, #372]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6713      	str	r3, [r2, #112]	; 0x70
 8001d34:	e00b      	b.n	8001d4e <HAL_RCC_OscConfig+0x376>
 8001d36:	4b5b      	ldr	r3, [pc, #364]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3a:	4a5a      	ldr	r2, [pc, #360]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	6713      	str	r3, [r2, #112]	; 0x70
 8001d42:	4b58      	ldr	r3, [pc, #352]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d46:	4a57      	ldr	r2, [pc, #348]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001d48:	f023 0304 	bic.w	r3, r3, #4
 8001d4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d015      	beq.n	8001d82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d56:	f7ff fb8b 	bl	8001470 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5c:	e00a      	b.n	8001d74 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5e:	f7ff fb87 	bl	8001470 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e0ce      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d74:	4b4b      	ldr	r3, [pc, #300]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0ee      	beq.n	8001d5e <HAL_RCC_OscConfig+0x386>
 8001d80:	e014      	b.n	8001dac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d82:	f7ff fb75 	bl	8001470 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d88:	e00a      	b.n	8001da0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8a:	f7ff fb71 	bl	8001470 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e0b8      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da0:	4b40      	ldr	r3, [pc, #256]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1ee      	bne.n	8001d8a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dac:	7dfb      	ldrb	r3, [r7, #23]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d105      	bne.n	8001dbe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db2:	4b3c      	ldr	r3, [pc, #240]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	4a3b      	ldr	r2, [pc, #236]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80a4 	beq.w	8001f10 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dc8:	4b36      	ldr	r3, [pc, #216]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d06b      	beq.n	8001eac <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d149      	bne.n	8001e70 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ddc:	4b31      	ldr	r3, [pc, #196]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a30      	ldr	r2, [pc, #192]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001de2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de8:	f7ff fb42 	bl	8001470 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df0:	f7ff fb3e 	bl	8001470 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e087      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e02:	4b28      	ldr	r3, [pc, #160]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69da      	ldr	r2, [r3, #28]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	019b      	lsls	r3, r3, #6
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e24:	085b      	lsrs	r3, r3, #1
 8001e26:	3b01      	subs	r3, #1
 8001e28:	041b      	lsls	r3, r3, #16
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e30:	061b      	lsls	r3, r3, #24
 8001e32:	4313      	orrs	r3, r2
 8001e34:	4a1b      	ldr	r2, [pc, #108]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001e36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e3a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e3c:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a18      	ldr	r2, [pc, #96]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7ff fb12 	bl	8001470 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e50:	f7ff fb0e 	bl	8001470 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e057      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x478>
 8001e6e:	e04f      	b.n	8001f10 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0b      	ldr	r2, [pc, #44]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001e76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7ff faf8 	bl	8001470 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e84:	f7ff faf4 	bl	8001470 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e03d      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e96:	4b03      	ldr	r3, [pc, #12]	; (8001ea4 <HAL_RCC_OscConfig+0x4cc>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x4ac>
 8001ea2:	e035      	b.n	8001f10 <HAL_RCC_OscConfig+0x538>
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001eac:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <HAL_RCC_OscConfig+0x544>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d028      	beq.n	8001f0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d121      	bne.n	8001f0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d11a      	bne.n	8001f0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001edc:	4013      	ands	r3, r2
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ee2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d111      	bne.n	8001f0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef2:	085b      	lsrs	r3, r3, #1
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d107      	bne.n	8001f0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f06:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800

08001f20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0d0      	b.n	80020da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f38:	4b6a      	ldr	r3, [pc, #424]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 030f 	and.w	r3, r3, #15
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d910      	bls.n	8001f68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f46:	4b67      	ldr	r3, [pc, #412]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 020f 	bic.w	r2, r3, #15
 8001f4e:	4965      	ldr	r1, [pc, #404]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f56:	4b63      	ldr	r3, [pc, #396]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d001      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0b8      	b.n	80020da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d020      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f80:	4b59      	ldr	r3, [pc, #356]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	4a58      	ldr	r2, [pc, #352]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f98:	4b53      	ldr	r3, [pc, #332]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	4a52      	ldr	r2, [pc, #328]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fa2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa4:	4b50      	ldr	r3, [pc, #320]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	494d      	ldr	r1, [pc, #308]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d040      	beq.n	8002044 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d107      	bne.n	8001fda <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fca:	4b47      	ldr	r3, [pc, #284]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d115      	bne.n	8002002 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e07f      	b.n	80020da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d107      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe2:	4b41      	ldr	r3, [pc, #260]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d109      	bne.n	8002002 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e073      	b.n	80020da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff2:	4b3d      	ldr	r3, [pc, #244]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e06b      	b.n	80020da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002002:	4b39      	ldr	r3, [pc, #228]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f023 0203 	bic.w	r2, r3, #3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	4936      	ldr	r1, [pc, #216]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002010:	4313      	orrs	r3, r2
 8002012:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002014:	f7ff fa2c 	bl	8001470 <HAL_GetTick>
 8002018:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201a:	e00a      	b.n	8002032 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800201c:	f7ff fa28 	bl	8001470 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	f241 3288 	movw	r2, #5000	; 0x1388
 800202a:	4293      	cmp	r3, r2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e053      	b.n	80020da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002032:	4b2d      	ldr	r3, [pc, #180]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 020c 	and.w	r2, r3, #12
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	429a      	cmp	r2, r3
 8002042:	d1eb      	bne.n	800201c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002044:	4b27      	ldr	r3, [pc, #156]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 030f 	and.w	r3, r3, #15
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d210      	bcs.n	8002074 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002052:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 020f 	bic.w	r2, r3, #15
 800205a:	4922      	ldr	r1, [pc, #136]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002062:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d001      	beq.n	8002074 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e032      	b.n	80020da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002080:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	4916      	ldr	r1, [pc, #88]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 800208e:	4313      	orrs	r3, r2
 8002090:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b00      	cmp	r3, #0
 800209c:	d009      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800209e:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	490e      	ldr	r1, [pc, #56]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020b2:	f000 f821 	bl	80020f8 <HAL_RCC_GetSysClockFreq>
 80020b6:	4602      	mov	r2, r0
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	091b      	lsrs	r3, r3, #4
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	490a      	ldr	r1, [pc, #40]	; (80020ec <HAL_RCC_ClockConfig+0x1cc>)
 80020c4:	5ccb      	ldrb	r3, [r1, r3]
 80020c6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ca:	4a09      	ldr	r2, [pc, #36]	; (80020f0 <HAL_RCC_ClockConfig+0x1d0>)
 80020cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <HAL_RCC_ClockConfig+0x1d4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff f8a6 	bl	8001224 <HAL_InitTick>

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40023c00 	.word	0x40023c00
 80020e8:	40023800 	.word	0x40023800
 80020ec:	08006340 	.word	0x08006340
 80020f0:	20000000 	.word	0x20000000
 80020f4:	20000004 	.word	0x20000004

080020f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f8:	b5b0      	push	{r4, r5, r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80020fe:	2100      	movs	r1, #0
 8002100:	6079      	str	r1, [r7, #4]
 8002102:	2100      	movs	r1, #0
 8002104:	60f9      	str	r1, [r7, #12]
 8002106:	2100      	movs	r1, #0
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800210a:	2100      	movs	r1, #0
 800210c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800210e:	4952      	ldr	r1, [pc, #328]	; (8002258 <HAL_RCC_GetSysClockFreq+0x160>)
 8002110:	6889      	ldr	r1, [r1, #8]
 8002112:	f001 010c 	and.w	r1, r1, #12
 8002116:	2908      	cmp	r1, #8
 8002118:	d00d      	beq.n	8002136 <HAL_RCC_GetSysClockFreq+0x3e>
 800211a:	2908      	cmp	r1, #8
 800211c:	f200 8094 	bhi.w	8002248 <HAL_RCC_GetSysClockFreq+0x150>
 8002120:	2900      	cmp	r1, #0
 8002122:	d002      	beq.n	800212a <HAL_RCC_GetSysClockFreq+0x32>
 8002124:	2904      	cmp	r1, #4
 8002126:	d003      	beq.n	8002130 <HAL_RCC_GetSysClockFreq+0x38>
 8002128:	e08e      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800212a:	4b4c      	ldr	r3, [pc, #304]	; (800225c <HAL_RCC_GetSysClockFreq+0x164>)
 800212c:	60bb      	str	r3, [r7, #8]
      break;
 800212e:	e08e      	b.n	800224e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002130:	4b4b      	ldr	r3, [pc, #300]	; (8002260 <HAL_RCC_GetSysClockFreq+0x168>)
 8002132:	60bb      	str	r3, [r7, #8]
      break;
 8002134:	e08b      	b.n	800224e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002136:	4948      	ldr	r1, [pc, #288]	; (8002258 <HAL_RCC_GetSysClockFreq+0x160>)
 8002138:	6849      	ldr	r1, [r1, #4]
 800213a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800213e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002140:	4945      	ldr	r1, [pc, #276]	; (8002258 <HAL_RCC_GetSysClockFreq+0x160>)
 8002142:	6849      	ldr	r1, [r1, #4]
 8002144:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002148:	2900      	cmp	r1, #0
 800214a:	d024      	beq.n	8002196 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800214c:	4942      	ldr	r1, [pc, #264]	; (8002258 <HAL_RCC_GetSysClockFreq+0x160>)
 800214e:	6849      	ldr	r1, [r1, #4]
 8002150:	0989      	lsrs	r1, r1, #6
 8002152:	4608      	mov	r0, r1
 8002154:	f04f 0100 	mov.w	r1, #0
 8002158:	f240 14ff 	movw	r4, #511	; 0x1ff
 800215c:	f04f 0500 	mov.w	r5, #0
 8002160:	ea00 0204 	and.w	r2, r0, r4
 8002164:	ea01 0305 	and.w	r3, r1, r5
 8002168:	493d      	ldr	r1, [pc, #244]	; (8002260 <HAL_RCC_GetSysClockFreq+0x168>)
 800216a:	fb01 f003 	mul.w	r0, r1, r3
 800216e:	2100      	movs	r1, #0
 8002170:	fb01 f102 	mul.w	r1, r1, r2
 8002174:	1844      	adds	r4, r0, r1
 8002176:	493a      	ldr	r1, [pc, #232]	; (8002260 <HAL_RCC_GetSysClockFreq+0x168>)
 8002178:	fba2 0101 	umull	r0, r1, r2, r1
 800217c:	1863      	adds	r3, r4, r1
 800217e:	4619      	mov	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	461a      	mov	r2, r3
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	f7fe f8e2 	bl	8000350 <__aeabi_uldivmod>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4613      	mov	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	e04a      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002196:	4b30      	ldr	r3, [pc, #192]	; (8002258 <HAL_RCC_GetSysClockFreq+0x160>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	099b      	lsrs	r3, r3, #6
 800219c:	461a      	mov	r2, r3
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80021a6:	f04f 0100 	mov.w	r1, #0
 80021aa:	ea02 0400 	and.w	r4, r2, r0
 80021ae:	ea03 0501 	and.w	r5, r3, r1
 80021b2:	4620      	mov	r0, r4
 80021b4:	4629      	mov	r1, r5
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	f04f 0300 	mov.w	r3, #0
 80021be:	014b      	lsls	r3, r1, #5
 80021c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80021c4:	0142      	lsls	r2, r0, #5
 80021c6:	4610      	mov	r0, r2
 80021c8:	4619      	mov	r1, r3
 80021ca:	1b00      	subs	r0, r0, r4
 80021cc:	eb61 0105 	sbc.w	r1, r1, r5
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	f04f 0300 	mov.w	r3, #0
 80021d8:	018b      	lsls	r3, r1, #6
 80021da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021de:	0182      	lsls	r2, r0, #6
 80021e0:	1a12      	subs	r2, r2, r0
 80021e2:	eb63 0301 	sbc.w	r3, r3, r1
 80021e6:	f04f 0000 	mov.w	r0, #0
 80021ea:	f04f 0100 	mov.w	r1, #0
 80021ee:	00d9      	lsls	r1, r3, #3
 80021f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021f4:	00d0      	lsls	r0, r2, #3
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	1912      	adds	r2, r2, r4
 80021fc:	eb45 0303 	adc.w	r3, r5, r3
 8002200:	f04f 0000 	mov.w	r0, #0
 8002204:	f04f 0100 	mov.w	r1, #0
 8002208:	0299      	lsls	r1, r3, #10
 800220a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800220e:	0290      	lsls	r0, r2, #10
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4610      	mov	r0, r2
 8002216:	4619      	mov	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	461a      	mov	r2, r3
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	f7fe f896 	bl	8000350 <__aeabi_uldivmod>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4613      	mov	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800222c:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <HAL_RCC_GetSysClockFreq+0x160>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	0c1b      	lsrs	r3, r3, #16
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	3301      	adds	r3, #1
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	fbb2 f3f3 	udiv	r3, r2, r3
 8002244:	60bb      	str	r3, [r7, #8]
      break;
 8002246:	e002      	b.n	800224e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002248:	4b04      	ldr	r3, [pc, #16]	; (800225c <HAL_RCC_GetSysClockFreq+0x164>)
 800224a:	60bb      	str	r3, [r7, #8]
      break;
 800224c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800224e:	68bb      	ldr	r3, [r7, #8]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bdb0      	pop	{r4, r5, r7, pc}
 8002258:	40023800 	.word	0x40023800
 800225c:	00f42400 	.word	0x00f42400
 8002260:	017d7840 	.word	0x017d7840

08002264 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002268:	4b03      	ldr	r3, [pc, #12]	; (8002278 <HAL_RCC_GetHCLKFreq+0x14>)
 800226a:	681b      	ldr	r3, [r3, #0]
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	20000000 	.word	0x20000000

0800227c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002280:	f7ff fff0 	bl	8002264 <HAL_RCC_GetHCLKFreq>
 8002284:	4602      	mov	r2, r0
 8002286:	4b05      	ldr	r3, [pc, #20]	; (800229c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	0a9b      	lsrs	r3, r3, #10
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	4903      	ldr	r1, [pc, #12]	; (80022a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002292:	5ccb      	ldrb	r3, [r1, r3]
 8002294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002298:	4618      	mov	r0, r3
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40023800 	.word	0x40023800
 80022a0:	08006350 	.word	0x08006350

080022a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	220f      	movs	r2, #15
 80022b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <HAL_RCC_GetClockConfig+0x5c>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 0203 	and.w	r2, r3, #3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80022c0:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <HAL_RCC_GetClockConfig+0x5c>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80022cc:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <HAL_RCC_GetClockConfig+0x5c>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_RCC_GetClockConfig+0x5c>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	08db      	lsrs	r3, r3, #3
 80022de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80022e6:	4b07      	ldr	r3, [pc, #28]	; (8002304 <HAL_RCC_GetClockConfig+0x60>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 020f 	and.w	r2, r3, #15
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	601a      	str	r2, [r3, #0]
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800
 8002304:	40023c00 	.word	0x40023c00

08002308 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e049      	b.n	80023ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d106      	bne.n	8002334 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f841 	bl	80023b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3304      	adds	r3, #4
 8002344:	4619      	mov	r1, r3
 8002346:	4610      	mov	r0, r2
 8002348:	f000 fa00 	bl	800274c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d001      	beq.n	80023e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e054      	b.n	800248e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a26      	ldr	r2, [pc, #152]	; (800249c <HAL_TIM_Base_Start_IT+0xd0>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d022      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x80>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800240e:	d01d      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x80>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a22      	ldr	r2, [pc, #136]	; (80024a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d018      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x80>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a21      	ldr	r2, [pc, #132]	; (80024a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d013      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x80>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a1f      	ldr	r2, [pc, #124]	; (80024a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d00e      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x80>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a1e      	ldr	r2, [pc, #120]	; (80024ac <HAL_TIM_Base_Start_IT+0xe0>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d009      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x80>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a1c      	ldr	r2, [pc, #112]	; (80024b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d004      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x80>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a1b      	ldr	r2, [pc, #108]	; (80024b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d115      	bne.n	8002478 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <HAL_TIM_Base_Start_IT+0xec>)
 8002454:	4013      	ands	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b06      	cmp	r3, #6
 800245c:	d015      	beq.n	800248a <HAL_TIM_Base_Start_IT+0xbe>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002464:	d011      	beq.n	800248a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f042 0201 	orr.w	r2, r2, #1
 8002474:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002476:	e008      	b.n	800248a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	e000      	b.n	800248c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800248a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40010000 	.word	0x40010000
 80024a0:	40000400 	.word	0x40000400
 80024a4:	40000800 	.word	0x40000800
 80024a8:	40000c00 	.word	0x40000c00
 80024ac:	40010400 	.word	0x40010400
 80024b0:	40014000 	.word	0x40014000
 80024b4:	40001800 	.word	0x40001800
 80024b8:	00010007 	.word	0x00010007

080024bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d122      	bne.n	8002518 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d11b      	bne.n	8002518 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f06f 0202 	mvn.w	r2, #2
 80024e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f905 	bl	800270e <HAL_TIM_IC_CaptureCallback>
 8002504:	e005      	b.n	8002512 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f8f7 	bl	80026fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f908 	bl	8002722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b04      	cmp	r3, #4
 8002524:	d122      	bne.n	800256c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b04      	cmp	r3, #4
 8002532:	d11b      	bne.n	800256c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0204 	mvn.w	r2, #4
 800253c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2202      	movs	r2, #2
 8002542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f8db 	bl	800270e <HAL_TIM_IC_CaptureCallback>
 8002558:	e005      	b.n	8002566 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f8cd 	bl	80026fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f8de 	bl	8002722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b08      	cmp	r3, #8
 8002578:	d122      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b08      	cmp	r3, #8
 8002586:	d11b      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0208 	mvn.w	r2, #8
 8002590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2204      	movs	r2, #4
 8002596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f8b1 	bl	800270e <HAL_TIM_IC_CaptureCallback>
 80025ac:	e005      	b.n	80025ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f8a3 	bl	80026fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f8b4 	bl	8002722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	2b10      	cmp	r3, #16
 80025cc:	d122      	bne.n	8002614 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b10      	cmp	r3, #16
 80025da:	d11b      	bne.n	8002614 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0210 	mvn.w	r2, #16
 80025e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2208      	movs	r2, #8
 80025ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f887 	bl	800270e <HAL_TIM_IC_CaptureCallback>
 8002600:	e005      	b.n	800260e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f879 	bl	80026fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f88a 	bl	8002722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b01      	cmp	r3, #1
 8002620:	d10e      	bne.n	8002640 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b01      	cmp	r3, #1
 800262e:	d107      	bne.n	8002640 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0201 	mvn.w	r2, #1
 8002638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fe fdb6 	bl	80011ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264a:	2b80      	cmp	r3, #128	; 0x80
 800264c:	d10e      	bne.n	800266c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002658:	2b80      	cmp	r3, #128	; 0x80
 800265a:	d107      	bne.n	800266c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f91a 	bl	80028a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800267a:	d10e      	bne.n	800269a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002686:	2b80      	cmp	r3, #128	; 0x80
 8002688:	d107      	bne.n	800269a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f90d 	bl	80028b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a4:	2b40      	cmp	r3, #64	; 0x40
 80026a6:	d10e      	bne.n	80026c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b2:	2b40      	cmp	r3, #64	; 0x40
 80026b4:	d107      	bne.n	80026c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f838 	bl	8002736 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	f003 0320 	and.w	r3, r3, #32
 80026d0:	2b20      	cmp	r3, #32
 80026d2:	d10e      	bne.n	80026f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f003 0320 	and.w	r3, r3, #32
 80026de:	2b20      	cmp	r3, #32
 80026e0:	d107      	bne.n	80026f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f06f 0220 	mvn.w	r2, #32
 80026ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f8cd 	bl	800288c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a40      	ldr	r2, [pc, #256]	; (8002860 <TIM_Base_SetConfig+0x114>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d013      	beq.n	800278c <TIM_Base_SetConfig+0x40>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800276a:	d00f      	beq.n	800278c <TIM_Base_SetConfig+0x40>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a3d      	ldr	r2, [pc, #244]	; (8002864 <TIM_Base_SetConfig+0x118>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d00b      	beq.n	800278c <TIM_Base_SetConfig+0x40>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a3c      	ldr	r2, [pc, #240]	; (8002868 <TIM_Base_SetConfig+0x11c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d007      	beq.n	800278c <TIM_Base_SetConfig+0x40>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a3b      	ldr	r2, [pc, #236]	; (800286c <TIM_Base_SetConfig+0x120>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d003      	beq.n	800278c <TIM_Base_SetConfig+0x40>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a3a      	ldr	r2, [pc, #232]	; (8002870 <TIM_Base_SetConfig+0x124>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d108      	bne.n	800279e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a2f      	ldr	r2, [pc, #188]	; (8002860 <TIM_Base_SetConfig+0x114>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d02b      	beq.n	80027fe <TIM_Base_SetConfig+0xb2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ac:	d027      	beq.n	80027fe <TIM_Base_SetConfig+0xb2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a2c      	ldr	r2, [pc, #176]	; (8002864 <TIM_Base_SetConfig+0x118>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d023      	beq.n	80027fe <TIM_Base_SetConfig+0xb2>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a2b      	ldr	r2, [pc, #172]	; (8002868 <TIM_Base_SetConfig+0x11c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d01f      	beq.n	80027fe <TIM_Base_SetConfig+0xb2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a2a      	ldr	r2, [pc, #168]	; (800286c <TIM_Base_SetConfig+0x120>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d01b      	beq.n	80027fe <TIM_Base_SetConfig+0xb2>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a29      	ldr	r2, [pc, #164]	; (8002870 <TIM_Base_SetConfig+0x124>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d017      	beq.n	80027fe <TIM_Base_SetConfig+0xb2>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a28      	ldr	r2, [pc, #160]	; (8002874 <TIM_Base_SetConfig+0x128>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d013      	beq.n	80027fe <TIM_Base_SetConfig+0xb2>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a27      	ldr	r2, [pc, #156]	; (8002878 <TIM_Base_SetConfig+0x12c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00f      	beq.n	80027fe <TIM_Base_SetConfig+0xb2>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a26      	ldr	r2, [pc, #152]	; (800287c <TIM_Base_SetConfig+0x130>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00b      	beq.n	80027fe <TIM_Base_SetConfig+0xb2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a25      	ldr	r2, [pc, #148]	; (8002880 <TIM_Base_SetConfig+0x134>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d007      	beq.n	80027fe <TIM_Base_SetConfig+0xb2>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a24      	ldr	r2, [pc, #144]	; (8002884 <TIM_Base_SetConfig+0x138>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d003      	beq.n	80027fe <TIM_Base_SetConfig+0xb2>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a23      	ldr	r2, [pc, #140]	; (8002888 <TIM_Base_SetConfig+0x13c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d108      	bne.n	8002810 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4313      	orrs	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	4313      	orrs	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <TIM_Base_SetConfig+0x114>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d003      	beq.n	8002844 <TIM_Base_SetConfig+0xf8>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a0c      	ldr	r2, [pc, #48]	; (8002870 <TIM_Base_SetConfig+0x124>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d103      	bne.n	800284c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	615a      	str	r2, [r3, #20]
}
 8002852:	bf00      	nop
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40010000 	.word	0x40010000
 8002864:	40000400 	.word	0x40000400
 8002868:	40000800 	.word	0x40000800
 800286c:	40000c00 	.word	0x40000c00
 8002870:	40010400 	.word	0x40010400
 8002874:	40014000 	.word	0x40014000
 8002878:	40014400 	.word	0x40014400
 800287c:	40014800 	.word	0x40014800
 8002880:	40001800 	.word	0x40001800
 8002884:	40001c00 	.word	0x40001c00
 8002888:	40002000 	.word	0x40002000

0800288c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f103 0208 	add.w	r2, r3, #8
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028e0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f103 0208 	add.w	r2, r3, #8
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f103 0208 	add.w	r2, r3, #8
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002922:	b480      	push	{r7}
 8002924:	b085      	sub	sp, #20
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	601a      	str	r2, [r3, #0]
}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800296a:	b480      	push	{r7}
 800296c:	b085      	sub	sp, #20
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6892      	ldr	r2, [r2, #8]
 8002980:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6852      	ldr	r2, [r2, #4]
 800298a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	429a      	cmp	r2, r3
 8002994:	d103      	bne.n	800299e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	1e5a      	subs	r2, r3, #1
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80029be:	b580      	push	{r7, lr}
 80029c0:	b08c      	sub	sp, #48	; 0x30
 80029c2:	af04      	add	r7, sp, #16
 80029c4:	60f8      	str	r0, [r7, #12]
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	603b      	str	r3, [r7, #0]
 80029ca:	4613      	mov	r3, r2
 80029cc:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80029ce:	88fb      	ldrh	r3, [r7, #6]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fd78 	bl	80034c8 <pvPortMalloc>
 80029d8:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00e      	beq.n	80029fe <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80029e0:	2058      	movs	r0, #88	; 0x58
 80029e2:	f000 fd71 	bl	80034c8 <pvPortMalloc>
 80029e6:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	631a      	str	r2, [r3, #48]	; 0x30
 80029f4:	e005      	b.n	8002a02 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80029f6:	6978      	ldr	r0, [r7, #20]
 80029f8:	f000 fe34 	bl	8003664 <vPortFree>
 80029fc:	e001      	b.n	8002a02 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d013      	beq.n	8002a30 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a08:	88fa      	ldrh	r2, [r7, #6]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	9303      	str	r3, [sp, #12]
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	9302      	str	r3, [sp, #8]
 8002a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a14:	9301      	str	r3, [sp, #4]
 8002a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f80e 	bl	8002a40 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002a24:	69f8      	ldr	r0, [r7, #28]
 8002a26:	f000 f89d 	bl	8002b64 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	61bb      	str	r3, [r7, #24]
 8002a2e:	e002      	b.n	8002a36 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a34:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002a36:	69bb      	ldr	r3, [r7, #24]
    }
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3720      	adds	r7, #32
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	461a      	mov	r2, r3
 8002a58:	21a5      	movs	r1, #165	; 0xa5
 8002a5a:	f002 fc11 	bl	8005280 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002a68:	440b      	add	r3, r1
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	f023 0307 	bic.w	r3, r3, #7
 8002a76:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d004      	beq.n	8002a8c <prvInitialiseNewTask+0x4c>
 8002a82:	4937      	ldr	r1, [pc, #220]	; (8002b60 <prvInitialiseNewTask+0x120>)
 8002a84:	f240 306b 	movw	r0, #875	; 0x36b
 8002a88:	f7fe fb8a 	bl	80011a0 <vAssertCalled>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d01f      	beq.n	8002ad2 <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	e012      	b.n	8002abe <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	7819      	ldrb	r1, [r3, #0]
 8002aa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3334      	adds	r3, #52	; 0x34
 8002aa8:	460a      	mov	r2, r1
 8002aaa:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d006      	beq.n	8002ac6 <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	3301      	adds	r3, #1
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b09      	cmp	r3, #9
 8002ac2:	d9e9      	bls.n	8002a98 <prvInitialiseNewTask+0x58>
 8002ac4:	e000      	b.n	8002ac8 <prvInitialiseNewTask+0x88>
            {
                break;
 8002ac6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002ad0:	e003      	b.n	8002ada <prvInitialiseNewTask+0x9a>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d901      	bls.n	8002ae4 <prvInitialiseNewTask+0xa4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ae0:	2304      	movs	r3, #4
 8002ae2:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae6:	6a3a      	ldr	r2, [r7, #32]
 8002ae8:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aec:	6a3a      	ldr	r2, [r7, #32]
 8002aee:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af2:	2200      	movs	r2, #0
 8002af4:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af8:	3304      	adds	r3, #4
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff ff04 	bl	8002908 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b02:	3318      	adds	r3, #24
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff feff 	bl	8002908 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b0e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	f1c3 0205 	rsb	r2, r3, #5
 8002b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b18:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b22:	3350      	adds	r3, #80	; 0x50
 8002b24:	2204      	movs	r2, #4
 8002b26:	2100      	movs	r1, #0
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f002 fba9 	bl	8005280 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b30:	3354      	adds	r3, #84	; 0x54
 8002b32:	2201      	movs	r2, #1
 8002b34:	2100      	movs	r1, #0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f002 fba2 	bl	8005280 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	68f9      	ldr	r1, [r7, #12]
 8002b40:	6938      	ldr	r0, [r7, #16]
 8002b42:	f000 fa93 	bl	800306c <pxPortInitialiseStack>
 8002b46:	4602      	mov	r2, r0
 8002b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b56:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b58:	bf00      	nop
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	080061d0 	.word	0x080061d0

08002b64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002b64:	b5b0      	push	{r4, r5, r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af02      	add	r7, sp, #8
 8002b6a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002b6c:	f000 fb92 	bl	8003294 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002b70:	4b35      	ldr	r3, [pc, #212]	; (8002c48 <prvAddNewTaskToReadyList+0xe4>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3301      	adds	r3, #1
 8002b76:	4a34      	ldr	r2, [pc, #208]	; (8002c48 <prvAddNewTaskToReadyList+0xe4>)
 8002b78:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002b7a:	4b34      	ldr	r3, [pc, #208]	; (8002c4c <prvAddNewTaskToReadyList+0xe8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d109      	bne.n	8002b96 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002b82:	4a32      	ldr	r2, [pc, #200]	; (8002c4c <prvAddNewTaskToReadyList+0xe8>)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b88:	4b2f      	ldr	r3, [pc, #188]	; (8002c48 <prvAddNewTaskToReadyList+0xe4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d110      	bne.n	8002bb2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002b90:	f000 fa10 	bl	8002fb4 <prvInitialiseTaskLists>
 8002b94:	e00d      	b.n	8002bb2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002b96:	4b2e      	ldr	r3, [pc, #184]	; (8002c50 <prvAddNewTaskToReadyList+0xec>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d109      	bne.n	8002bb2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b9e:	4b2b      	ldr	r3, [pc, #172]	; (8002c4c <prvAddNewTaskToReadyList+0xe8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d802      	bhi.n	8002bb2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002bac:	4a27      	ldr	r2, [pc, #156]	; (8002c4c <prvAddNewTaskToReadyList+0xe8>)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002bb2:	4b28      	ldr	r3, [pc, #160]	; (8002c54 <prvAddNewTaskToReadyList+0xf0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	4a26      	ldr	r2, [pc, #152]	; (8002c54 <prvAddNewTaskToReadyList+0xf0>)
 8002bba:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002bbc:	4b25      	ldr	r3, [pc, #148]	; (8002c54 <prvAddNewTaskToReadyList+0xf0>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d016      	beq.n	8002bf8 <prvAddNewTaskToReadyList+0x94>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f002 f907 	bl	8004de0 <SEGGER_SYSVIEW_OnTaskCreate>
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	461d      	mov	r5, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	461c      	mov	r4, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	1ae3      	subs	r3, r4, r3
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	462b      	mov	r3, r5
 8002bf4:	f000 fef2 	bl	80039dc <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f002 f974 	bl	8004ee8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	2201      	movs	r2, #1
 8002c06:	409a      	lsls	r2, r3
 8002c08:	4b13      	ldr	r3, [pc, #76]	; (8002c58 <prvAddNewTaskToReadyList+0xf4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	4a12      	ldr	r2, [pc, #72]	; (8002c58 <prvAddNewTaskToReadyList+0xf4>)
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4a0f      	ldr	r2, [pc, #60]	; (8002c5c <prvAddNewTaskToReadyList+0xf8>)
 8002c20:	441a      	add	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3304      	adds	r3, #4
 8002c26:	4619      	mov	r1, r3
 8002c28:	4610      	mov	r0, r2
 8002c2a:	f7ff fe7a 	bl	8002922 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002c2e:	f000 fb5d 	bl	80032ec <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002c32:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <prvAddNewTaskToReadyList+0xec>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c3a:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <prvAddNewTaskToReadyList+0xe8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bdb0      	pop	{r4, r5, r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000164 	.word	0x20000164
 8002c4c:	20000090 	.word	0x20000090
 8002c50:	20000170 	.word	0x20000170
 8002c54:	20000180 	.word	0x20000180
 8002c58:	2000016c 	.word	0x2000016c
 8002c5c:	20000094 	.word	0x20000094

08002c60 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002c64:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <vTaskSuspendAll+0x18>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	4a03      	ldr	r2, [pc, #12]	; (8002c78 <vTaskSuspendAll+0x18>)
 8002c6c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002c6e:	bf00      	nop
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	2000018c 	.word	0x2000018c

08002c7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002c8a:	4b3a      	ldr	r3, [pc, #232]	; (8002d74 <xTaskResumeAll+0xf8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d104      	bne.n	8002c9c <xTaskResumeAll+0x20>
 8002c92:	4939      	ldr	r1, [pc, #228]	; (8002d78 <xTaskResumeAll+0xfc>)
 8002c94:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8002c98:	f7fe fa82 	bl	80011a0 <vAssertCalled>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002c9c:	f000 fafa 	bl	8003294 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002ca0:	4b34      	ldr	r3, [pc, #208]	; (8002d74 <xTaskResumeAll+0xf8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	4a33      	ldr	r2, [pc, #204]	; (8002d74 <xTaskResumeAll+0xf8>)
 8002ca8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002caa:	4b32      	ldr	r3, [pc, #200]	; (8002d74 <xTaskResumeAll+0xf8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d159      	bne.n	8002d66 <xTaskResumeAll+0xea>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002cb2:	4b32      	ldr	r3, [pc, #200]	; (8002d7c <xTaskResumeAll+0x100>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d055      	beq.n	8002d66 <xTaskResumeAll+0xea>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cba:	e032      	b.n	8002d22 <xTaskResumeAll+0xa6>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cbc:	4b30      	ldr	r3, [pc, #192]	; (8002d80 <xTaskResumeAll+0x104>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	3318      	adds	r3, #24
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff fe4e 	bl	800296a <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff fe49 	bl	800296a <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f002 f904 	bl	8004ee8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	4b26      	ldr	r3, [pc, #152]	; (8002d84 <xTaskResumeAll+0x108>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	4a25      	ldr	r2, [pc, #148]	; (8002d84 <xTaskResumeAll+0x108>)
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4a22      	ldr	r2, [pc, #136]	; (8002d88 <xTaskResumeAll+0x10c>)
 8002d00:	441a      	add	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	3304      	adds	r3, #4
 8002d06:	4619      	mov	r1, r3
 8002d08:	4610      	mov	r0, r2
 8002d0a:	f7ff fe0a 	bl	8002922 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d12:	4b1e      	ldr	r3, [pc, #120]	; (8002d8c <xTaskResumeAll+0x110>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d302      	bcc.n	8002d22 <xTaskResumeAll+0xa6>
                    {
                        xYieldPending = pdTRUE;
 8002d1c:	4b1c      	ldr	r3, [pc, #112]	; (8002d90 <xTaskResumeAll+0x114>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d22:	4b17      	ldr	r3, [pc, #92]	; (8002d80 <xTaskResumeAll+0x104>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1c8      	bne.n	8002cbc <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <xTaskResumeAll+0xb8>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002d30:	f000 f980 	bl	8003034 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002d34:	4b17      	ldr	r3, [pc, #92]	; (8002d94 <xTaskResumeAll+0x118>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d010      	beq.n	8002d62 <xTaskResumeAll+0xe6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002d40:	f000 f83c 	bl	8002dbc <xTaskIncrementTick>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <xTaskResumeAll+0xd4>
                            {
                                xYieldPending = pdTRUE;
 8002d4a:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <xTaskResumeAll+0x114>)
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1f1      	bne.n	8002d40 <xTaskResumeAll+0xc4>

                        xPendedTicks = 0;
 8002d5c:	4b0d      	ldr	r3, [pc, #52]	; (8002d94 <xTaskResumeAll+0x118>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002d62:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <xTaskResumeAll+0x114>)
 8002d64:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002d66:	f000 fac1 	bl	80032ec <vPortExitCritical>

    return xAlreadyYielded;
 8002d6a:	687b      	ldr	r3, [r7, #4]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	2000018c 	.word	0x2000018c
 8002d78:	080061d0 	.word	0x080061d0
 8002d7c:	20000164 	.word	0x20000164
 8002d80:	20000128 	.word	0x20000128
 8002d84:	2000016c 	.word	0x2000016c
 8002d88:	20000094 	.word	0x20000094
 8002d8c:	20000090 	.word	0x20000090
 8002d90:	20000178 	.word	0x20000178
 8002d94:	20000174 	.word	0x20000174

08002d98 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d9e:	f000 fb5f 	bl	8003460 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002da2:	2300      	movs	r3, #0
 8002da4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002da6:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <xTaskGetTickCountFromISR+0x20>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002dac:	683b      	ldr	r3, [r7, #0]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000168 	.word	0x20000168

08002dbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dc6:	4b3e      	ldr	r3, [pc, #248]	; (8002ec0 <xTaskIncrementTick+0x104>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d16d      	bne.n	8002eaa <xTaskIncrementTick+0xee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002dce:	4b3d      	ldr	r3, [pc, #244]	; (8002ec4 <xTaskIncrementTick+0x108>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002dd6:	4a3b      	ldr	r2, [pc, #236]	; (8002ec4 <xTaskIncrementTick+0x108>)
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d11a      	bne.n	8002e18 <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002de2:	4b39      	ldr	r3, [pc, #228]	; (8002ec8 <xTaskIncrementTick+0x10c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d004      	beq.n	8002df6 <xTaskIncrementTick+0x3a>
 8002dec:	4937      	ldr	r1, [pc, #220]	; (8002ecc <xTaskIncrementTick+0x110>)
 8002dee:	f640 20cb 	movw	r0, #2763	; 0xacb
 8002df2:	f7fe f9d5 	bl	80011a0 <vAssertCalled>
 8002df6:	4b34      	ldr	r3, [pc, #208]	; (8002ec8 <xTaskIncrementTick+0x10c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	4b34      	ldr	r3, [pc, #208]	; (8002ed0 <xTaskIncrementTick+0x114>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a31      	ldr	r2, [pc, #196]	; (8002ec8 <xTaskIncrementTick+0x10c>)
 8002e02:	6013      	str	r3, [r2, #0]
 8002e04:	4a32      	ldr	r2, [pc, #200]	; (8002ed0 <xTaskIncrementTick+0x114>)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	4b32      	ldr	r3, [pc, #200]	; (8002ed4 <xTaskIncrementTick+0x118>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	4a30      	ldr	r2, [pc, #192]	; (8002ed4 <xTaskIncrementTick+0x118>)
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	f000 f90e 	bl	8003034 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002e18:	4b2f      	ldr	r3, [pc, #188]	; (8002ed8 <xTaskIncrementTick+0x11c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d348      	bcc.n	8002eb4 <xTaskIncrementTick+0xf8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e22:	4b29      	ldr	r3, [pc, #164]	; (8002ec8 <xTaskIncrementTick+0x10c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d104      	bne.n	8002e36 <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e2c:	4b2a      	ldr	r3, [pc, #168]	; (8002ed8 <xTaskIncrementTick+0x11c>)
 8002e2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e32:	601a      	str	r2, [r3, #0]
                    break;
 8002e34:	e03e      	b.n	8002eb4 <xTaskIncrementTick+0xf8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e36:	4b24      	ldr	r3, [pc, #144]	; (8002ec8 <xTaskIncrementTick+0x10c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d203      	bcs.n	8002e56 <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002e4e:	4a22      	ldr	r2, [pc, #136]	; (8002ed8 <xTaskIncrementTick+0x11c>)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002e54:	e02e      	b.n	8002eb4 <xTaskIncrementTick+0xf8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff fd85 	bl	800296a <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d004      	beq.n	8002e72 <xTaskIncrementTick+0xb6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	3318      	adds	r3, #24
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fd7c 	bl	800296a <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f002 f837 	bl	8004ee8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7e:	2201      	movs	r2, #1
 8002e80:	409a      	lsls	r2, r3
 8002e82:	4b16      	ldr	r3, [pc, #88]	; (8002edc <xTaskIncrementTick+0x120>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	4a14      	ldr	r2, [pc, #80]	; (8002edc <xTaskIncrementTick+0x120>)
 8002e8a:	6013      	str	r3, [r2, #0]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4a11      	ldr	r2, [pc, #68]	; (8002ee0 <xTaskIncrementTick+0x124>)
 8002e9a:	441a      	add	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	f7ff fd3d 	bl	8002922 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ea8:	e7bb      	b.n	8002e22 <xTaskIncrementTick+0x66>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002eaa:	4b0e      	ldr	r3, [pc, #56]	; (8002ee4 <xTaskIncrementTick+0x128>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	4a0c      	ldr	r2, [pc, #48]	; (8002ee4 <xTaskIncrementTick+0x128>)
 8002eb2:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002eb4:	697b      	ldr	r3, [r7, #20]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	2000018c 	.word	0x2000018c
 8002ec4:	20000168 	.word	0x20000168
 8002ec8:	20000120 	.word	0x20000120
 8002ecc:	080061d0 	.word	0x080061d0
 8002ed0:	20000124 	.word	0x20000124
 8002ed4:	2000017c 	.word	0x2000017c
 8002ed8:	20000184 	.word	0x20000184
 8002edc:	2000016c 	.word	0x2000016c
 8002ee0:	20000094 	.word	0x20000094
 8002ee4:	20000174 	.word	0x20000174

08002ee8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002eee:	4b2a      	ldr	r3, [pc, #168]	; (8002f98 <vTaskSwitchContext+0xb0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002ef6:	4b29      	ldr	r3, [pc, #164]	; (8002f9c <vTaskSwitchContext+0xb4>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002efc:	e047      	b.n	8002f8e <vTaskSwitchContext+0xa6>
        xYieldPending = pdFALSE;
 8002efe:	4b27      	ldr	r3, [pc, #156]	; (8002f9c <vTaskSwitchContext+0xb4>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f04:	4b26      	ldr	r3, [pc, #152]	; (8002fa0 <vTaskSwitchContext+0xb8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	607b      	str	r3, [r7, #4]
/* Generic helper function. */
        __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
        {
            uint8_t ucReturn;

            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	fab3 f383 	clz	r3, r3
 8002f10:	70fb      	strb	r3, [r7, #3]

            return ucReturn;
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	f1c3 031f 	rsb	r3, r3, #31
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	4922      	ldr	r1, [pc, #136]	; (8002fa4 <vTaskSwitchContext+0xbc>)
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d104      	bne.n	8002f38 <vTaskSwitchContext+0x50>
 8002f2e:	491e      	ldr	r1, [pc, #120]	; (8002fa8 <vTaskSwitchContext+0xc0>)
 8002f30:	f640 4006 	movw	r0, #3078	; 0xc06
 8002f34:	f7fe f934 	bl	80011a0 <vAssertCalled>
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4a18      	ldr	r2, [pc, #96]	; (8002fa4 <vTaskSwitchContext+0xbc>)
 8002f44:	4413      	add	r3, r2
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	3308      	adds	r3, #8
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d104      	bne.n	8002f68 <vTaskSwitchContext+0x80>
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	605a      	str	r2, [r3, #4]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	4a0f      	ldr	r2, [pc, #60]	; (8002fac <vTaskSwitchContext+0xc4>)
 8002f70:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002f72:	4b0e      	ldr	r3, [pc, #56]	; (8002fac <vTaskSwitchContext+0xc4>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	4b0e      	ldr	r3, [pc, #56]	; (8002fb0 <vTaskSwitchContext+0xc8>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d102      	bne.n	8002f84 <vTaskSwitchContext+0x9c>
 8002f7e:	f001 ff13 	bl	8004da8 <SEGGER_SYSVIEW_OnIdle>
}
 8002f82:	e004      	b.n	8002f8e <vTaskSwitchContext+0xa6>
        traceTASK_SWITCHED_IN();
 8002f84:	4b09      	ldr	r3, [pc, #36]	; (8002fac <vTaskSwitchContext+0xc4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f001 ff6b 	bl	8004e64 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	2000018c 	.word	0x2000018c
 8002f9c:	20000178 	.word	0x20000178
 8002fa0:	2000016c 	.word	0x2000016c
 8002fa4:	20000094 	.word	0x20000094
 8002fa8:	080061d0 	.word	0x080061d0
 8002fac:	20000090 	.word	0x20000090
 8002fb0:	20000188 	.word	0x20000188

08002fb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fba:	2300      	movs	r3, #0
 8002fbc:	607b      	str	r3, [r7, #4]
 8002fbe:	e00c      	b.n	8002fda <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4a12      	ldr	r2, [pc, #72]	; (8003014 <prvInitialiseTaskLists+0x60>)
 8002fcc:	4413      	add	r3, r2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff fc7a 	bl	80028c8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	607b      	str	r3, [r7, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	d9ef      	bls.n	8002fc0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002fe0:	480d      	ldr	r0, [pc, #52]	; (8003018 <prvInitialiseTaskLists+0x64>)
 8002fe2:	f7ff fc71 	bl	80028c8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002fe6:	480d      	ldr	r0, [pc, #52]	; (800301c <prvInitialiseTaskLists+0x68>)
 8002fe8:	f7ff fc6e 	bl	80028c8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002fec:	480c      	ldr	r0, [pc, #48]	; (8003020 <prvInitialiseTaskLists+0x6c>)
 8002fee:	f7ff fc6b 	bl	80028c8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002ff2:	480c      	ldr	r0, [pc, #48]	; (8003024 <prvInitialiseTaskLists+0x70>)
 8002ff4:	f7ff fc68 	bl	80028c8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002ff8:	480b      	ldr	r0, [pc, #44]	; (8003028 <prvInitialiseTaskLists+0x74>)
 8002ffa:	f7ff fc65 	bl	80028c8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002ffe:	4b0b      	ldr	r3, [pc, #44]	; (800302c <prvInitialiseTaskLists+0x78>)
 8003000:	4a05      	ldr	r2, [pc, #20]	; (8003018 <prvInitialiseTaskLists+0x64>)
 8003002:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003004:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <prvInitialiseTaskLists+0x7c>)
 8003006:	4a05      	ldr	r2, [pc, #20]	; (800301c <prvInitialiseTaskLists+0x68>)
 8003008:	601a      	str	r2, [r3, #0]
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000094 	.word	0x20000094
 8003018:	200000f8 	.word	0x200000f8
 800301c:	2000010c 	.word	0x2000010c
 8003020:	20000128 	.word	0x20000128
 8003024:	2000013c 	.word	0x2000013c
 8003028:	20000150 	.word	0x20000150
 800302c:	20000120 	.word	0x20000120
 8003030:	20000124 	.word	0x20000124

08003034 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003038:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <prvResetNextTaskUnblockTime+0x30>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d104      	bne.n	800304c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003042:	4b09      	ldr	r3, [pc, #36]	; (8003068 <prvResetNextTaskUnblockTime+0x34>)
 8003044:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003048:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800304a:	e005      	b.n	8003058 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <prvResetNextTaskUnblockTime+0x30>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a04      	ldr	r2, [pc, #16]	; (8003068 <prvResetNextTaskUnblockTime+0x34>)
 8003056:	6013      	str	r3, [r2, #0]
}
 8003058:	bf00      	nop
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	20000120 	.word	0x20000120
 8003068:	20000184 	.word	0x20000184

0800306c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3b04      	subs	r3, #4
 800307c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003084:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	3b04      	subs	r3, #4
 800308a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f023 0201 	bic.w	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	3b04      	subs	r3, #4
 800309a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800309c:	4a0c      	ldr	r2, [pc, #48]	; (80030d0 <pxPortInitialiseStack+0x64>)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	3b14      	subs	r3, #20
 80030a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	3b04      	subs	r3, #4
 80030b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f06f 0202 	mvn.w	r2, #2
 80030ba:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	3b20      	subs	r3, #32
 80030c0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80030c2:	68fb      	ldr	r3, [r7, #12]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	080030d5 	.word	0x080030d5

080030d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80030de:	4b0f      	ldr	r3, [pc, #60]	; (800311c <prvTaskExitError+0x48>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030e6:	d003      	beq.n	80030f0 <prvTaskExitError+0x1c>
 80030e8:	490d      	ldr	r1, [pc, #52]	; (8003120 <prvTaskExitError+0x4c>)
 80030ea:	20df      	movs	r0, #223	; 0xdf
 80030ec:	f7fe f858 	bl	80011a0 <vAssertCalled>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80030f0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80030f4:	b672      	cpsid	i
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	b662      	cpsie	i
 8003104:	607b      	str	r3, [r7, #4]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003106:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003108:	bf00      	nop
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0fc      	beq.n	800310a <prvTaskExitError+0x36>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003110:	bf00      	nop
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	2000000c 	.word	0x2000000c
 8003120:	08006208 	.word	0x08006208
	...

08003130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003130:	4b07      	ldr	r3, [pc, #28]	; (8003150 <pxCurrentTCBConst2>)
 8003132:	6819      	ldr	r1, [r3, #0]
 8003134:	6808      	ldr	r0, [r1, #0]
 8003136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800313a:	f380 8809 	msr	PSP, r0
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f04f 0000 	mov.w	r0, #0
 8003146:	f380 8811 	msr	BASEPRI, r0
 800314a:	4770      	bx	lr
 800314c:	f3af 8000 	nop.w

08003150 <pxCurrentTCBConst2>:
 8003150:	20000090 	.word	0x20000090
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003154:	bf00      	nop
 8003156:	bf00      	nop

08003158 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003158:	4808      	ldr	r0, [pc, #32]	; (800317c <prvPortStartFirstTask+0x24>)
 800315a:	6800      	ldr	r0, [r0, #0]
 800315c:	6800      	ldr	r0, [r0, #0]
 800315e:	f380 8808 	msr	MSP, r0
 8003162:	f04f 0000 	mov.w	r0, #0
 8003166:	f380 8814 	msr	CONTROL, r0
 800316a:	b662      	cpsie	i
 800316c:	b661      	cpsie	f
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	df00      	svc	0
 8003178:	bf00      	nop
 800317a:	0000      	.short	0x0000
 800317c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003180:	bf00      	nop
 8003182:	bf00      	nop

08003184 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/

void vInitPrioGroupValue(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if ( configASSERT_DEFINED == 1 )
		{
			volatile uint32_t ulOriginalPriority;
			volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800318a:	4b28      	ldr	r3, [pc, #160]	; (800322c <vInitPrioGroupValue+0xa8>)
 800318c:	60fb      	str	r3, [r7, #12]
			 * functions can be called.  ISR safe functions are those that end in
			 * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
			 * ensure interrupt entry is as fast and simple as possible.
			 *
			 * Save the interrupt priority value that is about to be clobbered. */
			ulOriginalPriority = *pucFirstUserPriorityRegister;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	b2db      	uxtb	r3, r3
 8003194:	60bb      	str	r3, [r7, #8]

			/* Determine the number of priority bits available.  First write to all
			 * possible bits. */
			*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	22ff      	movs	r2, #255	; 0xff
 800319a:	701a      	strb	r2, [r3, #0]

			/* Read the value back to see how many bits stuck. */
			ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	71fb      	strb	r3, [r7, #7]

			/* Use the same mask on the maximum system call priority. */
			ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	4b20      	ldr	r3, [pc, #128]	; (8003230 <vInitPrioGroupValue+0xac>)
 80031b0:	701a      	strb	r2, [r3, #0]

			/* Calculate the maximum acceptable priority group value for the number
			 * of bits read back. */
			ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80031b2:	4b20      	ldr	r3, [pc, #128]	; (8003234 <vInitPrioGroupValue+0xb0>)
 80031b4:	2207      	movs	r2, #7
 80031b6:	601a      	str	r2, [r3, #0]

			while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031b8:	e009      	b.n	80031ce <vInitPrioGroupValue+0x4a>
			{
				ulMaxPRIGROUPValue--;
 80031ba:	4b1e      	ldr	r3, [pc, #120]	; (8003234 <vInitPrioGroupValue+0xb0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	3b01      	subs	r3, #1
 80031c0:	4a1c      	ldr	r2, [pc, #112]	; (8003234 <vInitPrioGroupValue+0xb0>)
 80031c2:	6013      	str	r3, [r2, #0]
				ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80031c4:	79fb      	ldrb	r3, [r7, #7]
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	71fb      	strb	r3, [r7, #7]
			while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031ce:	79fb      	ldrb	r3, [r7, #7]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d6:	2b80      	cmp	r3, #128	; 0x80
 80031d8:	d0ef      	beq.n	80031ba <vInitPrioGroupValue+0x36>
			#ifdef __NVIC_PRIO_BITS
				{
					/* Check the CMSIS configuration that defines the number of
					 * priority bits matches the number of priority bits actually queried
					 * from the hardware. */
					configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 80031da:	4b16      	ldr	r3, [pc, #88]	; (8003234 <vInitPrioGroupValue+0xb0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f1c3 0307 	rsb	r3, r3, #7
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d004      	beq.n	80031f0 <vInitPrioGroupValue+0x6c>
 80031e6:	4914      	ldr	r1, [pc, #80]	; (8003238 <vInitPrioGroupValue+0xb4>)
 80031e8:	f240 1047 	movw	r0, #327	; 0x147
 80031ec:	f7fd ffd8 	bl	80011a0 <vAssertCalled>
			#ifdef configPRIO_BITS
				{
					/* Check the FreeRTOS configuration that defines the number of
					 * priority bits matches the number of priority bits actually queried
					 * from the hardware. */
					configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80031f0:	4b10      	ldr	r3, [pc, #64]	; (8003234 <vInitPrioGroupValue+0xb0>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f1c3 0307 	rsb	r3, r3, #7
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d004      	beq.n	8003206 <vInitPrioGroupValue+0x82>
 80031fc:	490e      	ldr	r1, [pc, #56]	; (8003238 <vInitPrioGroupValue+0xb4>)
 80031fe:	f44f 70a8 	mov.w	r0, #336	; 0x150
 8003202:	f7fd ffcd 	bl	80011a0 <vAssertCalled>
				}
			#endif

			/* Shift the priority group value back to its position within the AIRCR
			 * register. */
			ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003206:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <vInitPrioGroupValue+0xb0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	021b      	lsls	r3, r3, #8
 800320c:	4a09      	ldr	r2, [pc, #36]	; (8003234 <vInitPrioGroupValue+0xb0>)
 800320e:	6013      	str	r3, [r2, #0]
			ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003210:	4b08      	ldr	r3, [pc, #32]	; (8003234 <vInitPrioGroupValue+0xb0>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003218:	4a06      	ldr	r2, [pc, #24]	; (8003234 <vInitPrioGroupValue+0xb0>)
 800321a:	6013      	str	r3, [r2, #0]

			/* Restore the clobbered interrupt priority register to its original
			 * value. */
			*pucFirstUserPriorityRegister = ulOriginalPriority;
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	b2da      	uxtb	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	701a      	strb	r2, [r3, #0]
		}
	#endif /* conifgASSERT_DEFINED */
}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	e000e400 	.word	0xe000e400
 8003230:	20000190 	.word	0x20000190
 8003234:	20000194 	.word	0x20000194
 8003238:	08006208 	.word	0x08006208

0800323c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
	vInitPrioGroupValue();
 8003240:	f7ff ffa0 	bl	8003184 <vInitPrioGroupValue>

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003244:	4b10      	ldr	r3, [pc, #64]	; (8003288 <xPortStartScheduler+0x4c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a0f      	ldr	r2, [pc, #60]	; (8003288 <xPortStartScheduler+0x4c>)
 800324a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800324e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003250:	4b0d      	ldr	r3, [pc, #52]	; (8003288 <xPortStartScheduler+0x4c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a0c      	ldr	r2, [pc, #48]	; (8003288 <xPortStartScheduler+0x4c>)
 8003256:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800325a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800325c:	f000 f8d0 	bl	8003400 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003260:	4b0a      	ldr	r3, [pc, #40]	; (800328c <xPortStartScheduler+0x50>)
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003266:	f000 f8ef 	bl	8003448 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800326a:	4b09      	ldr	r3, [pc, #36]	; (8003290 <xPortStartScheduler+0x54>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a08      	ldr	r2, [pc, #32]	; (8003290 <xPortStartScheduler+0x54>)
 8003270:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003274:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003276:	f7ff ff6f 	bl	8003158 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800327a:	f7ff fe35 	bl	8002ee8 <vTaskSwitchContext>
    prvTaskExitError();
 800327e:	f7ff ff29 	bl	80030d4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	bd80      	pop	{r7, pc}
 8003288:	e000ed20 	.word	0xe000ed20
 800328c:	2000000c 	.word	0x2000000c
 8003290:	e000ef34 	.word	0xe000ef34

08003294 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
        __asm volatile
 800329a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800329e:	b672      	cpsid	i
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	b662      	cpsie	i
 80032ae:	607b      	str	r3, [r7, #4]
    }
 80032b0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80032b2:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <vPortEnterCritical+0x4c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	3301      	adds	r3, #1
 80032b8:	4a09      	ldr	r2, [pc, #36]	; (80032e0 <vPortEnterCritical+0x4c>)
 80032ba:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80032bc:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <vPortEnterCritical+0x4c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d109      	bne.n	80032d8 <vPortEnterCritical+0x44>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80032c4:	4b07      	ldr	r3, [pc, #28]	; (80032e4 <vPortEnterCritical+0x50>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d004      	beq.n	80032d8 <vPortEnterCritical+0x44>
 80032ce:	4906      	ldr	r1, [pc, #24]	; (80032e8 <vPortEnterCritical+0x54>)
 80032d0:	f240 109f 	movw	r0, #415	; 0x19f
 80032d4:	f7fd ff64 	bl	80011a0 <vAssertCalled>
    }
}
 80032d8:	bf00      	nop
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	2000000c 	.word	0x2000000c
 80032e4:	e000ed04 	.word	0xe000ed04
 80032e8:	08006208 	.word	0x08006208

080032ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80032f2:	4b0e      	ldr	r3, [pc, #56]	; (800332c <vPortExitCritical+0x40>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d104      	bne.n	8003304 <vPortExitCritical+0x18>
 80032fa:	490d      	ldr	r1, [pc, #52]	; (8003330 <vPortExitCritical+0x44>)
 80032fc:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
 8003300:	f7fd ff4e 	bl	80011a0 <vAssertCalled>
    uxCriticalNesting--;
 8003304:	4b09      	ldr	r3, [pc, #36]	; (800332c <vPortExitCritical+0x40>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3b01      	subs	r3, #1
 800330a:	4a08      	ldr	r2, [pc, #32]	; (800332c <vPortExitCritical+0x40>)
 800330c:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800330e:	4b07      	ldr	r3, [pc, #28]	; (800332c <vPortExitCritical+0x40>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d105      	bne.n	8003322 <vPortExitCritical+0x36>
 8003316:	2300      	movs	r3, #0
 8003318:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003320:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003322:	bf00      	nop
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	2000000c 	.word	0x2000000c
 8003330:	08006208 	.word	0x08006208
	...

08003340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003340:	f3ef 8009 	mrs	r0, PSP
 8003344:	f3bf 8f6f 	isb	sy
 8003348:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <pxCurrentTCBConst>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	f01e 0f10 	tst.w	lr, #16
 8003350:	bf08      	it	eq
 8003352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800335a:	6010      	str	r0, [r2, #0]
 800335c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003360:	f04f 0040 	mov.w	r0, #64	; 0x40
 8003364:	b672      	cpsid	i
 8003366:	f380 8811 	msr	BASEPRI, r0
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	b662      	cpsie	i
 8003374:	f7ff fdb8 	bl	8002ee8 <vTaskSwitchContext>
 8003378:	f04f 0000 	mov.w	r0, #0
 800337c:	f380 8811 	msr	BASEPRI, r0
 8003380:	bc09      	pop	{r0, r3}
 8003382:	6819      	ldr	r1, [r3, #0]
 8003384:	6808      	ldr	r0, [r1, #0]
 8003386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800338a:	f01e 0f10 	tst.w	lr, #16
 800338e:	bf08      	it	eq
 8003390:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003394:	f380 8809 	msr	PSP, r0
 8003398:	f3bf 8f6f 	isb	sy
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop

080033a0 <pxCurrentTCBConst>:
 80033a0:	20000090 	.word	0x20000090
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80033a4:	bf00      	nop
 80033a6:	bf00      	nop

080033a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
        __asm volatile
 80033ae:	f04f 0340 	mov.w	r3, #64	; 0x40
 80033b2:	b672      	cpsid	i
 80033b4:	f383 8811 	msr	BASEPRI, r3
 80033b8:	f3bf 8f6f 	isb	sy
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	b662      	cpsie	i
 80033c2:	607b      	str	r3, [r7, #4]
    }
 80033c4:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 80033c6:	f001 fc75 	bl	8004cb4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80033ca:	f7ff fcf7 	bl	8002dbc <xTaskIncrementTick>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d006      	beq.n	80033e2 <SysTick_Handler+0x3a>
        {
        	traceISR_EXIT_TO_SCHEDULER();
 80033d4:	f001 fccc 	bl	8004d70 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80033d8:	4b08      	ldr	r3, [pc, #32]	; (80033fc <SysTick_Handler+0x54>)
 80033da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	e001      	b.n	80033e6 <SysTick_Handler+0x3e>
        }
        else
        {
        	traceISR_EXIT();
 80033e2:	f001 fca9 	bl	8004d38 <SEGGER_SYSVIEW_RecordExitISR>
 80033e6:	2300      	movs	r3, #0
 80033e8:	603b      	str	r3, [r7, #0]
        __asm volatile
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	f383 8811 	msr	BASEPRI, r3
    }
 80033f0:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	e000ed04 	.word	0xe000ed04

08003400 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <vPortSetupTimerInterrupt+0x34>)
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800340a:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <vPortSetupTimerInterrupt+0x38>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003410:	4b0a      	ldr	r3, [pc, #40]	; (800343c <vPortSetupTimerInterrupt+0x3c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a0a      	ldr	r2, [pc, #40]	; (8003440 <vPortSetupTimerInterrupt+0x40>)
 8003416:	fba2 2303 	umull	r2, r3, r2, r3
 800341a:	099b      	lsrs	r3, r3, #6
 800341c:	4a09      	ldr	r2, [pc, #36]	; (8003444 <vPortSetupTimerInterrupt+0x44>)
 800341e:	3b01      	subs	r3, #1
 8003420:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003422:	4b04      	ldr	r3, [pc, #16]	; (8003434 <vPortSetupTimerInterrupt+0x34>)
 8003424:	2207      	movs	r2, #7
 8003426:	601a      	str	r2, [r3, #0]
}
 8003428:	bf00      	nop
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	e000e010 	.word	0xe000e010
 8003438:	e000e018 	.word	0xe000e018
 800343c:	20000000 	.word	0x20000000
 8003440:	10624dd3 	.word	0x10624dd3
 8003444:	e000e014 	.word	0xe000e014

08003448 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003448:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003458 <vPortEnableVFP+0x10>
 800344c:	6801      	ldr	r1, [r0, #0]
 800344e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003452:	6001      	str	r1, [r0, #0]
 8003454:	4770      	bx	lr
 8003456:	0000      	.short	0x0000
 8003458:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800345c:	bf00      	nop
 800345e:	bf00      	nop

08003460 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003466:	f3ef 8305 	mrs	r3, IPSR
 800346a:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b0f      	cmp	r3, #15
 8003470:	d90e      	bls.n	8003490 <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003472:	4a10      	ldr	r2, [pc, #64]	; (80034b4 <vPortValidateInterruptPriority+0x54>)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4413      	add	r3, r2
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800347c:	4b0e      	ldr	r3, [pc, #56]	; (80034b8 <vPortValidateInterruptPriority+0x58>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	78fa      	ldrb	r2, [r7, #3]
 8003482:	429a      	cmp	r2, r3
 8003484:	d204      	bcs.n	8003490 <vPortValidateInterruptPriority+0x30>
 8003486:	490d      	ldr	r1, [pc, #52]	; (80034bc <vPortValidateInterruptPriority+0x5c>)
 8003488:	f240 20ff 	movw	r0, #767	; 0x2ff
 800348c:	f7fd fe88 	bl	80011a0 <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003490:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <vPortValidateInterruptPriority+0x60>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003498:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <vPortValidateInterruptPriority+0x64>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	429a      	cmp	r2, r3
 800349e:	d904      	bls.n	80034aa <vPortValidateInterruptPriority+0x4a>
 80034a0:	4906      	ldr	r1, [pc, #24]	; (80034bc <vPortValidateInterruptPriority+0x5c>)
 80034a2:	f240 300f 	movw	r0, #783	; 0x30f
 80034a6:	f7fd fe7b 	bl	80011a0 <vAssertCalled>
    }
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	e000e3f0 	.word	0xe000e3f0
 80034b8:	20000190 	.word	0x20000190
 80034bc:	08006208 	.word	0x08006208
 80034c0:	e000ed0c 	.word	0xe000ed0c
 80034c4:	20000194 	.word	0x20000194

080034c8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 80034d4:	f7ff fbc4 	bl	8002c60 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80034d8:	4b5b      	ldr	r3, [pc, #364]	; (8003648 <pvPortMalloc+0x180>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80034e0:	f000 f918 	bl	8003714 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80034e4:	4b59      	ldr	r3, [pc, #356]	; (800364c <pvPortMalloc+0x184>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f040 809a 	bne.w	8003626 <pvPortMalloc+0x15e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d027      	beq.n	8003548 <pvPortMalloc+0x80>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80034f8:	2208      	movs	r2, #8
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	429a      	cmp	r2, r3
 8003502:	d221      	bcs.n	8003548 <pvPortMalloc+0x80>
            {
                xWantedSize += xHeapStructSize;
 8003504:	2208      	movs	r2, #8
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4413      	add	r3, r2
 800350a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	2b00      	cmp	r3, #0
 8003514:	d01b      	beq.n	800354e <pvPortMalloc+0x86>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f023 0307 	bic.w	r3, r3, #7
 800351c:	3308      	adds	r3, #8
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	429a      	cmp	r2, r3
 8003522:	d20e      	bcs.n	8003542 <pvPortMalloc+0x7a>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f023 0307 	bic.w	r3, r3, #7
 800352a:	3308      	adds	r3, #8
 800352c:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00a      	beq.n	800354e <pvPortMalloc+0x86>
 8003538:	4945      	ldr	r1, [pc, #276]	; (8003650 <pvPortMalloc+0x188>)
 800353a:	209a      	movs	r0, #154	; 0x9a
 800353c:	f7fd fe30 	bl	80011a0 <vAssertCalled>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003540:	e005      	b.n	800354e <pvPortMalloc+0x86>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003542:	2300      	movs	r3, #0
 8003544:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003546:	e002      	b.n	800354e <pvPortMalloc+0x86>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003548:	2300      	movs	r3, #0
 800354a:	607b      	str	r3, [r7, #4]
 800354c:	e000      	b.n	8003550 <pvPortMalloc+0x88>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800354e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d067      	beq.n	8003626 <pvPortMalloc+0x15e>
 8003556:	4b3f      	ldr	r3, [pc, #252]	; (8003654 <pvPortMalloc+0x18c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	429a      	cmp	r2, r3
 800355e:	d862      	bhi.n	8003626 <pvPortMalloc+0x15e>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003560:	4b3d      	ldr	r3, [pc, #244]	; (8003658 <pvPortMalloc+0x190>)
 8003562:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8003564:	4b3c      	ldr	r3, [pc, #240]	; (8003658 <pvPortMalloc+0x190>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800356a:	e004      	b.n	8003576 <pvPortMalloc+0xae>
                {
                    pxPreviousBlock = pxBlock;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	429a      	cmp	r2, r3
 800357e:	d903      	bls.n	8003588 <pvPortMalloc+0xc0>
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1f1      	bne.n	800356c <pvPortMalloc+0xa4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003588:	4b2f      	ldr	r3, [pc, #188]	; (8003648 <pvPortMalloc+0x180>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	429a      	cmp	r2, r3
 8003590:	d049      	beq.n	8003626 <pvPortMalloc+0x15e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2208      	movs	r2, #8
 8003598:	4413      	add	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	1ad2      	subs	r2, r2, r3
 80035ac:	2308      	movs	r3, #8
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d918      	bls.n	80035e6 <pvPortMalloc+0x11e>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4413      	add	r3, r2
 80035ba:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <pvPortMalloc+0x106>
 80035c6:	4922      	ldr	r1, [pc, #136]	; (8003650 <pvPortMalloc+0x188>)
 80035c8:	20cd      	movs	r0, #205	; 0xcd
 80035ca:	f7fd fde9 	bl	80011a0 <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	1ad2      	subs	r2, r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80035e0:	68b8      	ldr	r0, [r7, #8]
 80035e2:	f000 f8f9 	bl	80037d8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80035e6:	4b1b      	ldr	r3, [pc, #108]	; (8003654 <pvPortMalloc+0x18c>)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	4a18      	ldr	r2, [pc, #96]	; (8003654 <pvPortMalloc+0x18c>)
 80035f2:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80035f4:	4b17      	ldr	r3, [pc, #92]	; (8003654 <pvPortMalloc+0x18c>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	4b18      	ldr	r3, [pc, #96]	; (800365c <pvPortMalloc+0x194>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d203      	bcs.n	8003608 <pvPortMalloc+0x140>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003600:	4b14      	ldr	r3, [pc, #80]	; (8003654 <pvPortMalloc+0x18c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a15      	ldr	r2, [pc, #84]	; (800365c <pvPortMalloc+0x194>)
 8003606:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	4b0f      	ldr	r3, [pc, #60]	; (800364c <pvPortMalloc+0x184>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	431a      	orrs	r2, r3
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800361c:	4b10      	ldr	r3, [pc, #64]	; (8003660 <pvPortMalloc+0x198>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3301      	adds	r3, #1
 8003622:	4a0f      	ldr	r2, [pc, #60]	; (8003660 <pvPortMalloc+0x198>)
 8003624:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003626:	f7ff fb29 	bl	8002c7c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	2b00      	cmp	r3, #0
 8003632:	d004      	beq.n	800363e <pvPortMalloc+0x176>
 8003634:	4906      	ldr	r1, [pc, #24]	; (8003650 <pvPortMalloc+0x188>)
 8003636:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800363a:	f7fd fdb1 	bl	80011a0 <vAssertCalled>
    return pvReturn;
 800363e:	68fb      	ldr	r3, [r7, #12]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	2000b9a0 	.word	0x2000b9a0
 800364c:	2000b9b4 	.word	0x2000b9b4
 8003650:	08006240 	.word	0x08006240
 8003654:	2000b9a4 	.word	0x2000b9a4
 8003658:	2000b998 	.word	0x2000b998
 800365c:	2000b9a8 	.word	0x2000b9a8
 8003660:	2000b9ac 	.word	0x2000b9ac

08003664 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d041      	beq.n	80036fa <vPortFree+0x96>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003676:	2308      	movs	r3, #8
 8003678:	425b      	negs	r3, r3
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	4413      	add	r3, r2
 800367e:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <vPortFree+0xa0>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4013      	ands	r3, r2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d104      	bne.n	800369c <vPortFree+0x38>
 8003692:	491d      	ldr	r1, [pc, #116]	; (8003708 <vPortFree+0xa4>)
 8003694:	f44f 7091 	mov.w	r0, #290	; 0x122
 8003698:	f7fd fd82 	bl	80011a0 <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d004      	beq.n	80036ae <vPortFree+0x4a>
 80036a4:	4918      	ldr	r1, [pc, #96]	; (8003708 <vPortFree+0xa4>)
 80036a6:	f240 1023 	movw	r0, #291	; 0x123
 80036aa:	f7fd fd79 	bl	80011a0 <vAssertCalled>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	4b14      	ldr	r3, [pc, #80]	; (8003704 <vPortFree+0xa0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01e      	beq.n	80036fa <vPortFree+0x96>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d11a      	bne.n	80036fa <vPortFree+0x96>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	4b0e      	ldr	r3, [pc, #56]	; (8003704 <vPortFree+0xa0>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	43db      	mvns	r3, r3
 80036ce:	401a      	ands	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80036d4:	f7ff fac4 	bl	8002c60 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	4b0b      	ldr	r3, [pc, #44]	; (800370c <vPortFree+0xa8>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4413      	add	r3, r2
 80036e2:	4a0a      	ldr	r2, [pc, #40]	; (800370c <vPortFree+0xa8>)
 80036e4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80036e6:	68b8      	ldr	r0, [r7, #8]
 80036e8:	f000 f876 	bl	80037d8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80036ec:	4b08      	ldr	r3, [pc, #32]	; (8003710 <vPortFree+0xac>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3301      	adds	r3, #1
 80036f2:	4a07      	ldr	r2, [pc, #28]	; (8003710 <vPortFree+0xac>)
 80036f4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80036f6:	f7ff fac1 	bl	8002c7c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80036fa:	bf00      	nop
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	2000b9b4 	.word	0x2000b9b4
 8003708:	08006240 	.word	0x08006240
 800370c:	2000b9a4 	.word	0x2000b9a4
 8003710:	2000b9b0 	.word	0x2000b9b0

08003714 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800371a:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 800371e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003720:	4b27      	ldr	r3, [pc, #156]	; (80037c0 <prvHeapInit+0xac>)
 8003722:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00c      	beq.n	8003748 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	3307      	adds	r3, #7
 8003732:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0307 	bic.w	r3, r3, #7
 800373a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	4a1f      	ldr	r2, [pc, #124]	; (80037c0 <prvHeapInit+0xac>)
 8003744:	4413      	add	r3, r2
 8003746:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800374c:	4a1d      	ldr	r2, [pc, #116]	; (80037c4 <prvHeapInit+0xb0>)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003752:	4b1c      	ldr	r3, [pc, #112]	; (80037c4 <prvHeapInit+0xb0>)
 8003754:	2200      	movs	r2, #0
 8003756:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	4413      	add	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003760:	2208      	movs	r2, #8
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	1a9b      	subs	r3, r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0307 	bic.w	r3, r3, #7
 800376e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4a15      	ldr	r2, [pc, #84]	; (80037c8 <prvHeapInit+0xb4>)
 8003774:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003776:	4b14      	ldr	r3, [pc, #80]	; (80037c8 <prvHeapInit+0xb4>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2200      	movs	r2, #0
 800377c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800377e:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <prvHeapInit+0xb4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	1ad2      	subs	r2, r2, r3
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003794:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <prvHeapInit+0xb4>)
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	4a0a      	ldr	r2, [pc, #40]	; (80037cc <prvHeapInit+0xb8>)
 80037a2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	4a09      	ldr	r2, [pc, #36]	; (80037d0 <prvHeapInit+0xbc>)
 80037aa:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80037ac:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <prvHeapInit+0xc0>)
 80037ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80037b2:	601a      	str	r2, [r3, #0]
}
 80037b4:	bf00      	nop
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	20000198 	.word	0x20000198
 80037c4:	2000b998 	.word	0x2000b998
 80037c8:	2000b9a0 	.word	0x2000b9a0
 80037cc:	2000b9a8 	.word	0x2000b9a8
 80037d0:	2000b9a4 	.word	0x2000b9a4
 80037d4:	2000b9b4 	.word	0x2000b9b4

080037d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80037e0:	4b28      	ldr	r3, [pc, #160]	; (8003884 <prvInsertBlockIntoFreeList+0xac>)
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	e002      	b.n	80037ec <prvInsertBlockIntoFreeList+0x14>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d8f7      	bhi.n	80037e6 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	4413      	add	r3, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	429a      	cmp	r2, r3
 8003806:	d108      	bne.n	800381a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	441a      	add	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	441a      	add	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d118      	bne.n	8003860 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	4b15      	ldr	r3, [pc, #84]	; (8003888 <prvInsertBlockIntoFreeList+0xb0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d00d      	beq.n	8003856 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	441a      	add	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	e008      	b.n	8003868 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003856:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <prvInsertBlockIntoFreeList+0xb0>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	e003      	b.n	8003868 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	429a      	cmp	r2, r3
 800386e:	d002      	beq.n	8003876 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003876:	bf00      	nop
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	2000b998 	.word	0x2000b998
 8003888:	2000b9a0 	.word	0x2000b9a0

0800388c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003890:	4803      	ldr	r0, [pc, #12]	; (80038a0 <_cbSendSystemDesc+0x14>)
 8003892:	f001 f9b9 	bl	8004c08 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003896:	4803      	ldr	r0, [pc, #12]	; (80038a4 <_cbSendSystemDesc+0x18>)
 8003898:	f001 f9b6 	bl	8004c08 <SEGGER_SYSVIEW_SendSysDesc>
}
 800389c:	bf00      	nop
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	08006274 	.word	0x08006274
 80038a4:	080062b8 	.word	0x080062b8

080038a8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80038ac:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <SEGGER_SYSVIEW_Conf+0x20>)
 80038ae:	6818      	ldr	r0, [r3, #0]
 80038b0:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <SEGGER_SYSVIEW_Conf+0x20>)
 80038b2:	6819      	ldr	r1, [r3, #0]
 80038b4:	4b05      	ldr	r3, [pc, #20]	; (80038cc <SEGGER_SYSVIEW_Conf+0x24>)
 80038b6:	4a06      	ldr	r2, [pc, #24]	; (80038d0 <SEGGER_SYSVIEW_Conf+0x28>)
 80038b8:	f000 fe2c 	bl	8004514 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80038bc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80038c0:	f000 fe6c 	bl	800459c <SEGGER_SYSVIEW_SetRAMBase>
}
 80038c4:	bf00      	nop
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	20000000 	.word	0x20000000
 80038cc:	0800388d 	.word	0x0800388d
 80038d0:	08006358 	.word	0x08006358

080038d4 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80038d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80038da:	2300      	movs	r3, #0
 80038dc:	607b      	str	r3, [r7, #4]
 80038de:	e033      	b.n	8003948 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80038e0:	491e      	ldr	r1, [pc, #120]	; (800395c <_cbSendTaskList+0x88>)
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	6818      	ldr	r0, [r3, #0]
 80038f0:	491a      	ldr	r1, [pc, #104]	; (800395c <_cbSendTaskList+0x88>)
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	3304      	adds	r3, #4
 8003900:	6819      	ldr	r1, [r3, #0]
 8003902:	4c16      	ldr	r4, [pc, #88]	; (800395c <_cbSendTaskList+0x88>)
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4423      	add	r3, r4
 8003910:	3308      	adds	r3, #8
 8003912:	681c      	ldr	r4, [r3, #0]
 8003914:	4d11      	ldr	r5, [pc, #68]	; (800395c <_cbSendTaskList+0x88>)
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	442b      	add	r3, r5
 8003922:	330c      	adds	r3, #12
 8003924:	681d      	ldr	r5, [r3, #0]
 8003926:	4e0d      	ldr	r6, [pc, #52]	; (800395c <_cbSendTaskList+0x88>)
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4433      	add	r3, r6
 8003934:	3310      	adds	r3, #16
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	462b      	mov	r3, r5
 800393c:	4622      	mov	r2, r4
 800393e:	f000 f8b5 	bl	8003aac <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3301      	adds	r3, #1
 8003946:	607b      	str	r3, [r7, #4]
 8003948:	4b05      	ldr	r3, [pc, #20]	; (8003960 <_cbSendTaskList+0x8c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	429a      	cmp	r2, r3
 8003950:	d3c6      	bcc.n	80038e0 <_cbSendTaskList+0xc>
  }
}
 8003952:	bf00      	nop
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800395c:	2000b9b8 	.word	0x2000b9b8
 8003960:	2000ba58 	.word	0x2000ba58

08003964 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003964:	b5b0      	push	{r4, r5, r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800396a:	f7ff fa15 	bl	8002d98 <xTaskGetTickCountFromISR>
 800396e:	4603      	mov	r3, r0
 8003970:	461a      	mov	r2, r3
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800397a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	f04f 0400 	mov.w	r4, #0
 8003986:	f04f 0500 	mov.w	r5, #0
 800398a:	015d      	lsls	r5, r3, #5
 800398c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003990:	0154      	lsls	r4, r2, #5
 8003992:	4622      	mov	r2, r4
 8003994:	462b      	mov	r3, r5
 8003996:	1a12      	subs	r2, r2, r0
 8003998:	eb63 0301 	sbc.w	r3, r3, r1
 800399c:	f04f 0400 	mov.w	r4, #0
 80039a0:	f04f 0500 	mov.w	r5, #0
 80039a4:	009d      	lsls	r5, r3, #2
 80039a6:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 80039aa:	0094      	lsls	r4, r2, #2
 80039ac:	4622      	mov	r2, r4
 80039ae:	462b      	mov	r3, r5
 80039b0:	1812      	adds	r2, r2, r0
 80039b2:	eb41 0303 	adc.w	r3, r1, r3
 80039b6:	f04f 0000 	mov.w	r0, #0
 80039ba:	f04f 0100 	mov.w	r1, #0
 80039be:	00d9      	lsls	r1, r3, #3
 80039c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039c4:	00d0      	lsls	r0, r2, #3
 80039c6:	4602      	mov	r2, r0
 80039c8:	460b      	mov	r3, r1
 80039ca:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 80039ce:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80039d2:	4610      	mov	r0, r2
 80039d4:	4619      	mov	r1, r3
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bdb0      	pop	{r4, r5, r7, pc}

080039dc <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af02      	add	r7, sp, #8
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80039ea:	2205      	movs	r2, #5
 80039ec:	492b      	ldr	r1, [pc, #172]	; (8003a9c <SYSVIEW_AddTask+0xc0>)
 80039ee:	68b8      	ldr	r0, [r7, #8]
 80039f0:	f001 fc2a 	bl	8005248 <memcmp>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d04b      	beq.n	8003a92 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80039fa:	4b29      	ldr	r3, [pc, #164]	; (8003aa0 <SYSVIEW_AddTask+0xc4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b07      	cmp	r3, #7
 8003a00:	d903      	bls.n	8003a0a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003a02:	4828      	ldr	r0, [pc, #160]	; (8003aa4 <SYSVIEW_AddTask+0xc8>)
 8003a04:	f001 fb8e 	bl	8005124 <SEGGER_SYSVIEW_Warn>
    return;
 8003a08:	e044      	b.n	8003a94 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003a0a:	4b25      	ldr	r3, [pc, #148]	; (8003aa0 <SYSVIEW_AddTask+0xc4>)
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	4926      	ldr	r1, [pc, #152]	; (8003aa8 <SYSVIEW_AddTask+0xcc>)
 8003a10:	4613      	mov	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003a1e:	4b20      	ldr	r3, [pc, #128]	; (8003aa0 <SYSVIEW_AddTask+0xc4>)
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	4921      	ldr	r1, [pc, #132]	; (8003aa8 <SYSVIEW_AddTask+0xcc>)
 8003a24:	4613      	mov	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	3304      	adds	r3, #4
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003a34:	4b1a      	ldr	r3, [pc, #104]	; (8003aa0 <SYSVIEW_AddTask+0xc4>)
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	491b      	ldr	r1, [pc, #108]	; (8003aa8 <SYSVIEW_AddTask+0xcc>)
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	440b      	add	r3, r1
 8003a44:	3308      	adds	r3, #8
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003a4a:	4b15      	ldr	r3, [pc, #84]	; (8003aa0 <SYSVIEW_AddTask+0xc4>)
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	4916      	ldr	r1, [pc, #88]	; (8003aa8 <SYSVIEW_AddTask+0xcc>)
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	330c      	adds	r3, #12
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003a60:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <SYSVIEW_AddTask+0xc4>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	4910      	ldr	r1, [pc, #64]	; (8003aa8 <SYSVIEW_AddTask+0xcc>)
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	3310      	adds	r3, #16
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003a76:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <SYSVIEW_AddTask+0xc4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	4a08      	ldr	r2, [pc, #32]	; (8003aa0 <SYSVIEW_AddTask+0xc4>)
 8003a7e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	68b9      	ldr	r1, [r7, #8]
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 f80e 	bl	8003aac <SYSVIEW_SendTaskInfo>
 8003a90:	e000      	b.n	8003a94 <SYSVIEW_AddTask+0xb8>
    return;
 8003a92:	bf00      	nop

}
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	080062c8 	.word	0x080062c8
 8003aa0:	2000ba58 	.word	0x2000ba58
 8003aa4:	080062d0 	.word	0x080062d0
 8003aa8:	2000b9b8 	.word	0x2000b9b8

08003aac <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08a      	sub	sp, #40	; 0x28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003aba:	f107 0314 	add.w	r3, r7, #20
 8003abe:	2214      	movs	r2, #20
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f001 fbdc 	bl	8005280 <memset>
  TaskInfo.TaskID     = TaskID;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003adc:	f107 0314 	add.w	r3, r7, #20
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 ff99 	bl	8004a18 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003ae6:	bf00      	nop
 8003ae8:	3728      	adds	r7, #40	; 0x28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003af6:	4b24      	ldr	r3, [pc, #144]	; (8003b88 <_DoInit+0x98>)
 8003af8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2203      	movs	r2, #3
 8003afe:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2203      	movs	r2, #3
 8003b04:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a20      	ldr	r2, [pc, #128]	; (8003b8c <_DoInit+0x9c>)
 8003b0a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a20      	ldr	r2, [pc, #128]	; (8003b90 <_DoInit+0xa0>)
 8003b10:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b18:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a17      	ldr	r2, [pc, #92]	; (8003b8c <_DoInit+0x9c>)
 8003b30:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a17      	ldr	r2, [pc, #92]	; (8003b94 <_DoInit+0xa4>)
 8003b36:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2210      	movs	r2, #16
 8003b3c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3307      	adds	r3, #7
 8003b54:	4a10      	ldr	r2, [pc, #64]	; (8003b98 <_DoInit+0xa8>)
 8003b56:	6810      	ldr	r0, [r2, #0]
 8003b58:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003b5a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a0e      	ldr	r2, [pc, #56]	; (8003b9c <_DoInit+0xac>)
 8003b62:	6810      	ldr	r0, [r2, #0]
 8003b64:	6018      	str	r0, [r3, #0]
 8003b66:	8891      	ldrh	r1, [r2, #4]
 8003b68:	7992      	ldrb	r2, [r2, #6]
 8003b6a:	8099      	strh	r1, [r3, #4]
 8003b6c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003b6e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2220      	movs	r2, #32
 8003b76:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003b78:	f3bf 8f5f 	dmb	sy
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	2000cff0 	.word	0x2000cff0
 8003b8c:	08006320 	.word	0x08006320
 8003b90:	2000ba5c 	.word	0x2000ba5c
 8003b94:	2000be5c 	.word	0x2000be5c
 8003b98:	0800632c 	.word	0x0800632c
 8003b9c:	08006330 	.word	0x08006330

08003ba0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08a      	sub	sp, #40	; 0x28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003bac:	2300      	movs	r3, #0
 8003bae:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d905      	bls.n	8003bd0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bce:	e007      	b.n	8003be0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	69b9      	ldr	r1, [r7, #24]
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	1acb      	subs	r3, r1, r3
 8003bda:	4413      	add	r3, r2
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bea:	4293      	cmp	r3, r2
 8003bec:	bf28      	it	cs
 8003bee:	4613      	movcs	r3, r2
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	bf28      	it	cs
 8003bfa:	4613      	movcs	r3, r2
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	4413      	add	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0a:	68b9      	ldr	r1, [r7, #8]
 8003c0c:	6978      	ldr	r0, [r7, #20]
 8003c0e:	f001 fb29 	bl	8005264 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003c12:	6a3a      	ldr	r2, [r7, #32]
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	4413      	add	r3, r2
 8003c18:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	4413      	add	r3, r2
 8003c20:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003c2a:	69fa      	ldr	r2, [r7, #28]
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	4413      	add	r3, r2
 8003c30:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d101      	bne.n	8003c40 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003c40:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	69fa      	ldr	r2, [r7, #28]
 8003c48:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1b2      	bne.n	8003bb6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003c50:	6a3b      	ldr	r3, [r7, #32]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3728      	adds	r7, #40	; 0x28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b088      	sub	sp, #32
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d911      	bls.n	8003ca2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	4413      	add	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	68b9      	ldr	r1, [r7, #8]
 8003c8c:	6938      	ldr	r0, [r7, #16]
 8003c8e:	f001 fae9 	bl	8005264 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003c92:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003c96:	69fa      	ldr	r2, [r7, #28]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	441a      	add	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003ca0:	e01f      	b.n	8003ce2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	4413      	add	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	68b9      	ldr	r1, [r7, #8]
 8003cb4:	6938      	ldr	r0, [r7, #16]
 8003cb6:	f001 fad5 	bl	8005264 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	4413      	add	r3, r2
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	6938      	ldr	r0, [r7, #16]
 8003cd4:	f001 fac6 	bl	8005264 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003cd8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	60da      	str	r2, [r3, #12]
}
 8003ce2:	bf00      	nop
 8003ce4:	3720      	adds	r7, #32
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003cea:	b480      	push	{r7}
 8003cec:	b087      	sub	sp, #28
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d808      	bhi.n	8003d18 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1ad2      	subs	r2, r2, r3
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4413      	add	r3, r2
 8003d12:	3b01      	subs	r3, #1
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	e004      	b.n	8003d22 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003d22:	697b      	ldr	r3, [r7, #20]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	371c      	adds	r7, #28
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08c      	sub	sp, #48	; 0x30
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003d3c:	4b3e      	ldr	r3, [pc, #248]	; (8003e38 <SEGGER_RTT_ReadNoLock+0x108>)
 8003d3e:	623b      	str	r3, [r7, #32]
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <SEGGER_RTT_ReadNoLock+0x1e>
 8003d4a:	f7ff fed1 	bl	8003af0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4613      	mov	r3, r2
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	4413      	add	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	3360      	adds	r3, #96	; 0x60
 8003d5a:	4a37      	ldr	r2, [pc, #220]	; (8003e38 <SEGGER_RTT_ReadNoLock+0x108>)
 8003d5c:	4413      	add	r3, r2
 8003d5e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003d70:	2300      	movs	r3, #0
 8003d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003d74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d92b      	bls.n	8003dd4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	bf28      	it	cs
 8003d8e:	4613      	movcs	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d98:	4413      	add	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	6939      	ldr	r1, [r7, #16]
 8003da0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003da2:	f001 fa5f 	bl	8005264 <memcpy>
    NumBytesRead += NumBytesRem;
 8003da6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	4413      	add	r3, r2
 8003dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	4413      	add	r3, r2
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003dbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d101      	bne.n	8003dd4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4293      	cmp	r3, r2
 8003de2:	bf28      	it	cs
 8003de4:	4613      	movcs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d019      	beq.n	8003e22 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df4:	4413      	add	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	6939      	ldr	r1, [r7, #16]
 8003dfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dfe:	f001 fa31 	bl	8005264 <memcpy>
    NumBytesRead += NumBytesRem;
 8003e02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	4413      	add	r3, r2
 8003e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	4413      	add	r3, r2
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003e1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	4413      	add	r3, r2
 8003e20:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e2c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3730      	adds	r7, #48	; 0x30
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	2000cff0 	.word	0x2000cff0

08003e3c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	4613      	mov	r3, r2
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	4413      	add	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	4a1f      	ldr	r2, [pc, #124]	; (8003ed8 <SEGGER_RTT_WriteNoLock+0x9c>)
 8003e5a:	4413      	add	r3, r2
 8003e5c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d029      	beq.n	8003eba <SEGGER_RTT_WriteNoLock+0x7e>
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d82e      	bhi.n	8003ec8 <SEGGER_RTT_WriteNoLock+0x8c>
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <SEGGER_RTT_WriteNoLock+0x38>
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d013      	beq.n	8003e9a <SEGGER_RTT_WriteNoLock+0x5e>
 8003e72:	e029      	b.n	8003ec8 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003e74:	6978      	ldr	r0, [r7, #20]
 8003e76:	f7ff ff38 	bl	8003cea <_GetAvailWriteSpace>
 8003e7a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d202      	bcs.n	8003e8a <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8003e84:	2300      	movs	r3, #0
 8003e86:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003e88:	e021      	b.n	8003ece <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	69b9      	ldr	r1, [r7, #24]
 8003e92:	6978      	ldr	r0, [r7, #20]
 8003e94:	f7ff fee1 	bl	8003c5a <_WriteNoCheck>
    break;
 8003e98:	e019      	b.n	8003ece <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003e9a:	6978      	ldr	r0, [r7, #20]
 8003e9c:	f7ff ff25 	bl	8003cea <_GetAvailWriteSpace>
 8003ea0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	bf28      	it	cs
 8003eaa:	4613      	movcs	r3, r2
 8003eac:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	69b9      	ldr	r1, [r7, #24]
 8003eb2:	6978      	ldr	r0, [r7, #20]
 8003eb4:	f7ff fed1 	bl	8003c5a <_WriteNoCheck>
    break;
 8003eb8:	e009      	b.n	8003ece <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	69b9      	ldr	r1, [r7, #24]
 8003ebe:	6978      	ldr	r0, [r7, #20]
 8003ec0:	f7ff fe6e 	bl	8003ba0 <_WriteBlocking>
 8003ec4:	61f8      	str	r0, [r7, #28]
    break;
 8003ec6:	e002      	b.n	8003ece <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	61fb      	str	r3, [r7, #28]
    break;
 8003ecc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003ece:	69fb      	ldr	r3, [r7, #28]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3720      	adds	r7, #32
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	2000cff0 	.word	0x2000cff0

08003edc <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b088      	sub	sp, #32
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003ee8:	4b0e      	ldr	r3, [pc, #56]	; (8003f24 <SEGGER_RTT_Write+0x48>)
 8003eea:	61fb      	str	r3, [r7, #28]
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <SEGGER_RTT_Write+0x1e>
 8003ef6:	f7ff fdfb 	bl	8003af0 <_DoInit>
  SEGGER_RTT_LOCK();
 8003efa:	f3ef 8311 	mrs	r3, BASEPRI
 8003efe:	f04f 0120 	mov.w	r1, #32
 8003f02:	f381 8811 	msr	BASEPRI, r1
 8003f06:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	68b9      	ldr	r1, [r7, #8]
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f7ff ff95 	bl	8003e3c <SEGGER_RTT_WriteNoLock>
 8003f12:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003f1a:	697b      	ldr	r3, [r7, #20]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3720      	adds	r7, #32
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	2000cff0 	.word	0x2000cff0

08003f28 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
 8003f34:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003f36:	4b3d      	ldr	r3, [pc, #244]	; (800402c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003f38:	61bb      	str	r3, [r7, #24]
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003f44:	f7ff fdd4 	bl	8003af0 <_DoInit>
  SEGGER_RTT_LOCK();
 8003f48:	f3ef 8311 	mrs	r3, BASEPRI
 8003f4c:	f04f 0120 	mov.w	r1, #32
 8003f50:	f381 8811 	msr	BASEPRI, r1
 8003f54:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f56:	4b35      	ldr	r3, [pc, #212]	; (800402c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003f58:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003f5e:	6939      	ldr	r1, [r7, #16]
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	1c5a      	adds	r2, r3, #1
 8003f64:	4613      	mov	r3, r2
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	4413      	add	r3, r2
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	440b      	add	r3, r1
 8003f6e:	3304      	adds	r3, #4
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d008      	beq.n	8003f88 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	69fa      	ldr	r2, [r7, #28]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	dbeb      	blt.n	8003f5e <SEGGER_RTT_AllocUpBuffer+0x36>
 8003f86:	e000      	b.n	8003f8a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003f88:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	69fa      	ldr	r2, [r7, #28]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	da3f      	bge.n	8004014 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003f94:	6939      	ldr	r1, [r7, #16]
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	4413      	add	r3, r2
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	440b      	add	r3, r1
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003fa8:	6939      	ldr	r1, [r7, #16]
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	4613      	mov	r3, r2
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	4413      	add	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	440b      	add	r3, r1
 8003fb8:	3304      	adds	r3, #4
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003fbe:	6939      	ldr	r1, [r7, #16]
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	4413      	add	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	440b      	add	r3, r1
 8003fcc:	3320      	adds	r3, #32
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003fd2:	6939      	ldr	r1, [r7, #16]
 8003fd4:	69fa      	ldr	r2, [r7, #28]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	4413      	add	r3, r2
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	440b      	add	r3, r1
 8003fe0:	3328      	adds	r3, #40	; 0x28
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003fe6:	6939      	ldr	r1, [r7, #16]
 8003fe8:	69fa      	ldr	r2, [r7, #28]
 8003fea:	4613      	mov	r3, r2
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	4413      	add	r3, r2
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	440b      	add	r3, r1
 8003ff4:	3324      	adds	r3, #36	; 0x24
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003ffa:	6939      	ldr	r1, [r7, #16]
 8003ffc:	69fa      	ldr	r2, [r7, #28]
 8003ffe:	4613      	mov	r3, r2
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	4413      	add	r3, r2
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	440b      	add	r3, r1
 8004008:	332c      	adds	r3, #44	; 0x2c
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800400e:	f3bf 8f5f 	dmb	sy
 8004012:	e002      	b.n	800401a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004018:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004020:	69fb      	ldr	r3, [r7, #28]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3720      	adds	r7, #32
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	2000cff0 	.word	0x2000cff0

08004030 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004030:	b580      	push	{r7, lr}
 8004032:	b08a      	sub	sp, #40	; 0x28
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800403e:	4b21      	ldr	r3, [pc, #132]	; (80040c4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004040:	623b      	str	r3, [r7, #32]
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800404c:	f7ff fd50 	bl	8003af0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004050:	4b1c      	ldr	r3, [pc, #112]	; (80040c4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004052:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d82c      	bhi.n	80040b4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800405a:	f3ef 8311 	mrs	r3, BASEPRI
 800405e:	f04f 0120 	mov.w	r1, #32
 8004062:	f381 8811 	msr	BASEPRI, r1
 8004066:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	4613      	mov	r3, r2
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	4413      	add	r3, r2
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	3360      	adds	r3, #96	; 0x60
 8004074:	69fa      	ldr	r2, [r7, #28]
 8004076:	4413      	add	r3, r2
 8004078:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00e      	beq.n	800409e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2200      	movs	r2, #0
 8004096:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2200      	movs	r2, #0
 800409c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040a2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80040a4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80040ae:	2300      	movs	r3, #0
 80040b0:	627b      	str	r3, [r7, #36]	; 0x24
 80040b2:	e002      	b.n	80040ba <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80040b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3728      	adds	r7, #40	; 0x28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	2000cff0 	.word	0x2000cff0

080040c8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00f      	beq.n	80040fe <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80040de:	e002      	b.n	80040e6 <_EncodeStr+0x1e>
      Len++;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	3301      	adds	r3, #1
 80040e4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	4413      	add	r3, r2
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f6      	bne.n	80040e0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d901      	bls.n	80040fe <_EncodeStr+0x36>
      Len = Limit;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	2bfe      	cmp	r3, #254	; 0xfe
 8004102:	d806      	bhi.n	8004112 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	60fa      	str	r2, [r7, #12]
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	701a      	strb	r2, [r3, #0]
 8004110:	e011      	b.n	8004136 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	1c5a      	adds	r2, r3, #1
 8004116:	60fa      	str	r2, [r7, #12]
 8004118:	22ff      	movs	r2, #255	; 0xff
 800411a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	60fa      	str	r2, [r7, #12]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	b2d2      	uxtb	r2, r2
 8004126:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	0a19      	lsrs	r1, r3, #8
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	60fa      	str	r2, [r7, #12]
 8004132:	b2ca      	uxtb	r2, r1
 8004134:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800413a:	e00a      	b.n	8004152 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	1c53      	adds	r3, r2, #1
 8004140:	60bb      	str	r3, [r7, #8]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1c59      	adds	r1, r3, #1
 8004146:	60f9      	str	r1, [r7, #12]
 8004148:	7812      	ldrb	r2, [r2, #0]
 800414a:	701a      	strb	r2, [r3, #0]
    n++;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	3301      	adds	r3, #1
 8004150:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	429a      	cmp	r2, r3
 8004158:	d3f0      	bcc.n	800413c <_EncodeStr+0x74>
  }
  return pPayload;
 800415a:	68fb      	ldr	r3, [r7, #12]
}
 800415c:	4618      	mov	r0, r3
 800415e:	371c      	adds	r7, #28
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3304      	adds	r3, #4
}
 8004174:	4618      	mov	r0, r3
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004186:	4b36      	ldr	r3, [pc, #216]	; (8004260 <_HandleIncomingPacket+0xe0>)
 8004188:	7e1b      	ldrb	r3, [r3, #24]
 800418a:	4618      	mov	r0, r3
 800418c:	1cfb      	adds	r3, r7, #3
 800418e:	2201      	movs	r2, #1
 8004190:	4619      	mov	r1, r3
 8004192:	f7ff fdcd 	bl	8003d30 <SEGGER_RTT_ReadNoLock>
 8004196:	4603      	mov	r3, r0
 8004198:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	dd54      	ble.n	800424a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	2b80      	cmp	r3, #128	; 0x80
 80041a4:	d032      	beq.n	800420c <_HandleIncomingPacket+0x8c>
 80041a6:	2b80      	cmp	r3, #128	; 0x80
 80041a8:	dc42      	bgt.n	8004230 <_HandleIncomingPacket+0xb0>
 80041aa:	2b07      	cmp	r3, #7
 80041ac:	dc16      	bgt.n	80041dc <_HandleIncomingPacket+0x5c>
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	dd3e      	ble.n	8004230 <_HandleIncomingPacket+0xb0>
 80041b2:	3b01      	subs	r3, #1
 80041b4:	2b06      	cmp	r3, #6
 80041b6:	d83b      	bhi.n	8004230 <_HandleIncomingPacket+0xb0>
 80041b8:	a201      	add	r2, pc, #4	; (adr r2, 80041c0 <_HandleIncomingPacket+0x40>)
 80041ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041be:	bf00      	nop
 80041c0:	080041e3 	.word	0x080041e3
 80041c4:	080041e9 	.word	0x080041e9
 80041c8:	080041ef 	.word	0x080041ef
 80041cc:	080041f5 	.word	0x080041f5
 80041d0:	080041fb 	.word	0x080041fb
 80041d4:	08004201 	.word	0x08004201
 80041d8:	08004207 	.word	0x08004207
 80041dc:	2b7f      	cmp	r3, #127	; 0x7f
 80041de:	d036      	beq.n	800424e <_HandleIncomingPacket+0xce>
 80041e0:	e026      	b.n	8004230 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80041e2:	f000 fa9f 	bl	8004724 <SEGGER_SYSVIEW_Start>
      break;
 80041e6:	e037      	b.n	8004258 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80041e8:	f000 fb56 	bl	8004898 <SEGGER_SYSVIEW_Stop>
      break;
 80041ec:	e034      	b.n	8004258 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80041ee:	f000 fd2f 	bl	8004c50 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80041f2:	e031      	b.n	8004258 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80041f4:	f000 fcf4 	bl	8004be0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80041f8:	e02e      	b.n	8004258 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80041fa:	f000 fb73 	bl	80048e4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80041fe:	e02b      	b.n	8004258 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004200:	f000 ff52 	bl	80050a8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004204:	e028      	b.n	8004258 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004206:	f000 ff31 	bl	800506c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800420a:	e025      	b.n	8004258 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800420c:	4b14      	ldr	r3, [pc, #80]	; (8004260 <_HandleIncomingPacket+0xe0>)
 800420e:	7e1b      	ldrb	r3, [r3, #24]
 8004210:	4618      	mov	r0, r3
 8004212:	1cfb      	adds	r3, r7, #3
 8004214:	2201      	movs	r2, #1
 8004216:	4619      	mov	r1, r3
 8004218:	f7ff fd8a 	bl	8003d30 <SEGGER_RTT_ReadNoLock>
 800421c:	4603      	mov	r3, r0
 800421e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	dd15      	ble.n	8004252 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004226:	78fb      	ldrb	r3, [r7, #3]
 8004228:	4618      	mov	r0, r3
 800422a:	f000 fe9f 	bl	8004f6c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800422e:	e010      	b.n	8004252 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	b25b      	sxtb	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	da0e      	bge.n	8004256 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004238:	4b09      	ldr	r3, [pc, #36]	; (8004260 <_HandleIncomingPacket+0xe0>)
 800423a:	7e1b      	ldrb	r3, [r3, #24]
 800423c:	4618      	mov	r0, r3
 800423e:	1cfb      	adds	r3, r7, #3
 8004240:	2201      	movs	r2, #1
 8004242:	4619      	mov	r1, r3
 8004244:	f7ff fd74 	bl	8003d30 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004248:	e005      	b.n	8004256 <_HandleIncomingPacket+0xd6>
    }
  }
 800424a:	bf00      	nop
 800424c:	e004      	b.n	8004258 <_HandleIncomingPacket+0xd8>
      break;
 800424e:	bf00      	nop
 8004250:	e002      	b.n	8004258 <_HandleIncomingPacket+0xd8>
      break;
 8004252:	bf00      	nop
 8004254:	e000      	b.n	8004258 <_HandleIncomingPacket+0xd8>
      break;
 8004256:	bf00      	nop
}
 8004258:	bf00      	nop
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	2000ce74 	.word	0x2000ce74

08004264 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004264:	b580      	push	{r7, lr}
 8004266:	b08c      	sub	sp, #48	; 0x30
 8004268:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800426a:	2301      	movs	r3, #1
 800426c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800426e:	1d3b      	adds	r3, r7, #4
 8004270:	3301      	adds	r3, #1
 8004272:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004278:	4b31      	ldr	r3, [pc, #196]	; (8004340 <_TrySendOverflowPacket+0xdc>)
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	62bb      	str	r3, [r7, #40]	; 0x28
 800427e:	e00b      	b.n	8004298 <_TrySendOverflowPacket+0x34>
 8004280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004282:	b2da      	uxtb	r2, r3
 8004284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004286:	1c59      	adds	r1, r3, #1
 8004288:	62f9      	str	r1, [r7, #44]	; 0x2c
 800428a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	701a      	strb	r2, [r3, #0]
 8004292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004294:	09db      	lsrs	r3, r3, #7
 8004296:	62bb      	str	r3, [r7, #40]	; 0x28
 8004298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429a:	2b7f      	cmp	r3, #127	; 0x7f
 800429c:	d8f0      	bhi.n	8004280 <_TrySendOverflowPacket+0x1c>
 800429e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	701a      	strb	r2, [r3, #0]
 80042aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ac:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80042ae:	4b25      	ldr	r3, [pc, #148]	; (8004344 <_TrySendOverflowPacket+0xe0>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80042b4:	4b22      	ldr	r3, [pc, #136]	; (8004340 <_TrySendOverflowPacket+0xdc>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	623b      	str	r3, [r7, #32]
 80042c6:	e00b      	b.n	80042e0 <_TrySendOverflowPacket+0x7c>
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	1c59      	adds	r1, r3, #1
 80042d0:	6279      	str	r1, [r7, #36]	; 0x24
 80042d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	701a      	strb	r2, [r3, #0]
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	09db      	lsrs	r3, r3, #7
 80042de:	623b      	str	r3, [r7, #32]
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	2b7f      	cmp	r3, #127	; 0x7f
 80042e4:	d8f0      	bhi.n	80042c8 <_TrySendOverflowPacket+0x64>
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	627a      	str	r2, [r7, #36]	; 0x24
 80042ec:	6a3a      	ldr	r2, [r7, #32]
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	701a      	strb	r2, [r3, #0]
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80042f6:	4b12      	ldr	r3, [pc, #72]	; (8004340 <_TrySendOverflowPacket+0xdc>)
 80042f8:	785b      	ldrb	r3, [r3, #1]
 80042fa:	4618      	mov	r0, r3
 80042fc:	1d3b      	adds	r3, r7, #4
 80042fe:	69fa      	ldr	r2, [r7, #28]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	461a      	mov	r2, r3
 8004304:	1d3b      	adds	r3, r7, #4
 8004306:	4619      	mov	r1, r3
 8004308:	f7fb ff82 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800430c:	4603      	mov	r3, r0
 800430e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d009      	beq.n	800432a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004316:	4a0a      	ldr	r2, [pc, #40]	; (8004340 <_TrySendOverflowPacket+0xdc>)
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800431c:	4b08      	ldr	r3, [pc, #32]	; (8004340 <_TrySendOverflowPacket+0xdc>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	3b01      	subs	r3, #1
 8004322:	b2da      	uxtb	r2, r3
 8004324:	4b06      	ldr	r3, [pc, #24]	; (8004340 <_TrySendOverflowPacket+0xdc>)
 8004326:	701a      	strb	r2, [r3, #0]
 8004328:	e004      	b.n	8004334 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800432a:	4b05      	ldr	r3, [pc, #20]	; (8004340 <_TrySendOverflowPacket+0xdc>)
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	3301      	adds	r3, #1
 8004330:	4a03      	ldr	r2, [pc, #12]	; (8004340 <_TrySendOverflowPacket+0xdc>)
 8004332:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004334:	693b      	ldr	r3, [r7, #16]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3730      	adds	r7, #48	; 0x30
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	2000ce74 	.word	0x2000ce74
 8004344:	e0001004 	.word	0xe0001004

08004348 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004348:	b580      	push	{r7, lr}
 800434a:	b08a      	sub	sp, #40	; 0x28
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004354:	4b6c      	ldr	r3, [pc, #432]	; (8004508 <_SendPacket+0x1c0>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d010      	beq.n	800437e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800435c:	4b6a      	ldr	r3, [pc, #424]	; (8004508 <_SendPacket+0x1c0>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 80a3 	beq.w	80044ac <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004366:	4b68      	ldr	r3, [pc, #416]	; (8004508 <_SendPacket+0x1c0>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d109      	bne.n	8004382 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800436e:	f7ff ff79 	bl	8004264 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004372:	4b65      	ldr	r3, [pc, #404]	; (8004508 <_SendPacket+0x1c0>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b01      	cmp	r3, #1
 8004378:	f040 809a 	bne.w	80044b0 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800437c:	e001      	b.n	8004382 <_SendPacket+0x3a>
    goto Send;
 800437e:	bf00      	nop
 8004380:	e000      	b.n	8004384 <_SendPacket+0x3c>
Send:
 8004382:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b1f      	cmp	r3, #31
 8004388:	d809      	bhi.n	800439e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800438a:	4b5f      	ldr	r3, [pc, #380]	; (8004508 <_SendPacket+0x1c0>)
 800438c:	69da      	ldr	r2, [r3, #28]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	fa22 f303 	lsr.w	r3, r2, r3
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	f040 808b 	bne.w	80044b4 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b17      	cmp	r3, #23
 80043a2:	d807      	bhi.n	80043b4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	701a      	strb	r2, [r3, #0]
 80043b2:	e03d      	b.n	8004430 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	2b7f      	cmp	r3, #127	; 0x7f
 80043c0:	d912      	bls.n	80043e8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	09da      	lsrs	r2, r3, #7
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	3a01      	subs	r2, #1
 80043da:	60fa      	str	r2, [r7, #12]
 80043dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	701a      	strb	r2, [r3, #0]
 80043e6:	e006      	b.n	80043f6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b7f      	cmp	r3, #127	; 0x7f
 80043fa:	d912      	bls.n	8004422 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	09da      	lsrs	r2, r3, #7
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	3b01      	subs	r3, #1
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	b2db      	uxtb	r3, r3
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	3a01      	subs	r2, #1
 8004414:	60fa      	str	r2, [r7, #12]
 8004416:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800441a:	b2da      	uxtb	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	701a      	strb	r2, [r3, #0]
 8004420:	e006      	b.n	8004430 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	3b01      	subs	r3, #1
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	b2da      	uxtb	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004430:	4b36      	ldr	r3, [pc, #216]	; (800450c <_SendPacket+0x1c4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004436:	4b34      	ldr	r3, [pc, #208]	; (8004508 <_SendPacket+0x1c0>)
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	623b      	str	r3, [r7, #32]
 8004448:	e00b      	b.n	8004462 <_SendPacket+0x11a>
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	b2da      	uxtb	r2, r3
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	1c59      	adds	r1, r3, #1
 8004452:	6279      	str	r1, [r7, #36]	; 0x24
 8004454:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	701a      	strb	r2, [r3, #0]
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	09db      	lsrs	r3, r3, #7
 8004460:	623b      	str	r3, [r7, #32]
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	2b7f      	cmp	r3, #127	; 0x7f
 8004466:	d8f0      	bhi.n	800444a <_SendPacket+0x102>
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	627a      	str	r2, [r7, #36]	; 0x24
 800446e:	6a3a      	ldr	r2, [r7, #32]
 8004470:	b2d2      	uxtb	r2, r2
 8004472:	701a      	strb	r2, [r3, #0]
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004478:	4b23      	ldr	r3, [pc, #140]	; (8004508 <_SendPacket+0x1c0>)
 800447a:	785b      	ldrb	r3, [r3, #1]
 800447c:	4618      	mov	r0, r3
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	461a      	mov	r2, r3
 8004486:	68f9      	ldr	r1, [r7, #12]
 8004488:	f7fb fec2 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800448c:	4603      	mov	r3, r0
 800448e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004496:	4a1c      	ldr	r2, [pc, #112]	; (8004508 <_SendPacket+0x1c0>)
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	60d3      	str	r3, [r2, #12]
 800449c:	e00b      	b.n	80044b6 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800449e:	4b1a      	ldr	r3, [pc, #104]	; (8004508 <_SendPacket+0x1c0>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	3301      	adds	r3, #1
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	4b18      	ldr	r3, [pc, #96]	; (8004508 <_SendPacket+0x1c0>)
 80044a8:	701a      	strb	r2, [r3, #0]
 80044aa:	e004      	b.n	80044b6 <_SendPacket+0x16e>
    goto SendDone;
 80044ac:	bf00      	nop
 80044ae:	e002      	b.n	80044b6 <_SendPacket+0x16e>
      goto SendDone;
 80044b0:	bf00      	nop
 80044b2:	e000      	b.n	80044b6 <_SendPacket+0x16e>
      goto SendDone;
 80044b4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80044b6:	4b14      	ldr	r3, [pc, #80]	; (8004508 <_SendPacket+0x1c0>)
 80044b8:	7e1b      	ldrb	r3, [r3, #24]
 80044ba:	4619      	mov	r1, r3
 80044bc:	4a14      	ldr	r2, [pc, #80]	; (8004510 <_SendPacket+0x1c8>)
 80044be:	460b      	mov	r3, r1
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	440b      	add	r3, r1
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	4413      	add	r3, r2
 80044c8:	336c      	adds	r3, #108	; 0x6c
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	4b0e      	ldr	r3, [pc, #56]	; (8004508 <_SendPacket+0x1c0>)
 80044ce:	7e1b      	ldrb	r3, [r3, #24]
 80044d0:	4618      	mov	r0, r3
 80044d2:	490f      	ldr	r1, [pc, #60]	; (8004510 <_SendPacket+0x1c8>)
 80044d4:	4603      	mov	r3, r0
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	4403      	add	r3, r0
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	440b      	add	r3, r1
 80044de:	3370      	adds	r3, #112	; 0x70
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d00b      	beq.n	80044fe <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80044e6:	4b08      	ldr	r3, [pc, #32]	; (8004508 <_SendPacket+0x1c0>)
 80044e8:	789b      	ldrb	r3, [r3, #2]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d107      	bne.n	80044fe <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80044ee:	4b06      	ldr	r3, [pc, #24]	; (8004508 <_SendPacket+0x1c0>)
 80044f0:	2201      	movs	r2, #1
 80044f2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80044f4:	f7ff fe44 	bl	8004180 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80044f8:	4b03      	ldr	r3, [pc, #12]	; (8004508 <_SendPacket+0x1c0>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80044fe:	bf00      	nop
 8004500:	3728      	adds	r7, #40	; 0x28
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	2000ce74 	.word	0x2000ce74
 800450c:	e0001004 	.word	0xe0001004
 8004510:	2000cff0 	.word	0x2000cff0

08004514 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af02      	add	r7, sp, #8
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
 8004520:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004522:	2300      	movs	r3, #0
 8004524:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004528:	4917      	ldr	r1, [pc, #92]	; (8004588 <SEGGER_SYSVIEW_Init+0x74>)
 800452a:	4818      	ldr	r0, [pc, #96]	; (800458c <SEGGER_SYSVIEW_Init+0x78>)
 800452c:	f7ff fcfc 	bl	8003f28 <SEGGER_RTT_AllocUpBuffer>
 8004530:	4603      	mov	r3, r0
 8004532:	b2da      	uxtb	r2, r3
 8004534:	4b16      	ldr	r3, [pc, #88]	; (8004590 <SEGGER_SYSVIEW_Init+0x7c>)
 8004536:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004538:	4b15      	ldr	r3, [pc, #84]	; (8004590 <SEGGER_SYSVIEW_Init+0x7c>)
 800453a:	785a      	ldrb	r2, [r3, #1]
 800453c:	4b14      	ldr	r3, [pc, #80]	; (8004590 <SEGGER_SYSVIEW_Init+0x7c>)
 800453e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004540:	4b13      	ldr	r3, [pc, #76]	; (8004590 <SEGGER_SYSVIEW_Init+0x7c>)
 8004542:	7e1b      	ldrb	r3, [r3, #24]
 8004544:	4618      	mov	r0, r3
 8004546:	2300      	movs	r3, #0
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	2308      	movs	r3, #8
 800454c:	4a11      	ldr	r2, [pc, #68]	; (8004594 <SEGGER_SYSVIEW_Init+0x80>)
 800454e:	490f      	ldr	r1, [pc, #60]	; (800458c <SEGGER_SYSVIEW_Init+0x78>)
 8004550:	f7ff fd6e 	bl	8004030 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004554:	4b0e      	ldr	r3, [pc, #56]	; (8004590 <SEGGER_SYSVIEW_Init+0x7c>)
 8004556:	2200      	movs	r2, #0
 8004558:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800455a:	4b0f      	ldr	r3, [pc, #60]	; (8004598 <SEGGER_SYSVIEW_Init+0x84>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a0c      	ldr	r2, [pc, #48]	; (8004590 <SEGGER_SYSVIEW_Init+0x7c>)
 8004560:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004562:	4a0b      	ldr	r2, [pc, #44]	; (8004590 <SEGGER_SYSVIEW_Init+0x7c>)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004568:	4a09      	ldr	r2, [pc, #36]	; (8004590 <SEGGER_SYSVIEW_Init+0x7c>)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800456e:	4a08      	ldr	r2, [pc, #32]	; (8004590 <SEGGER_SYSVIEW_Init+0x7c>)
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004574:	4a06      	ldr	r2, [pc, #24]	; (8004590 <SEGGER_SYSVIEW_Init+0x7c>)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800457a:	4b05      	ldr	r3, [pc, #20]	; (8004590 <SEGGER_SYSVIEW_Init+0x7c>)
 800457c:	2200      	movs	r2, #0
 800457e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)

}
 8004580:	bf00      	nop
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	2000be6c 	.word	0x2000be6c
 800458c:	08006338 	.word	0x08006338
 8004590:	2000ce74 	.word	0x2000ce74
 8004594:	2000ce6c 	.word	0x2000ce6c
 8004598:	e0001004 	.word	0xe0001004

0800459c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80045a4:	4a04      	ldr	r2, [pc, #16]	; (80045b8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6113      	str	r3, [r2, #16]
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	2000ce74 	.word	0x2000ce74

080045bc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80045c4:	f3ef 8311 	mrs	r3, BASEPRI
 80045c8:	f04f 0120 	mov.w	r1, #32
 80045cc:	f381 8811 	msr	BASEPRI, r1
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	4808      	ldr	r0, [pc, #32]	; (80045f4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80045d4:	f7ff fdc8 	bl	8004168 <_PreparePacket>
 80045d8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	68b9      	ldr	r1, [r7, #8]
 80045de:	68b8      	ldr	r0, [r7, #8]
 80045e0:	f7ff feb2 	bl	8004348 <_SendPacket>
  RECORD_END();
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f383 8811 	msr	BASEPRI, r3
}
 80045ea:	bf00      	nop
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	2000cea4 	.word	0x2000cea4

080045f8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b088      	sub	sp, #32
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004602:	f3ef 8311 	mrs	r3, BASEPRI
 8004606:	f04f 0120 	mov.w	r1, #32
 800460a:	f381 8811 	msr	BASEPRI, r1
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	4816      	ldr	r0, [pc, #88]	; (800466c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004612:	f7ff fda9 	bl	8004168 <_PreparePacket>
 8004616:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	61fb      	str	r3, [r7, #28]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	61bb      	str	r3, [r7, #24]
 8004624:	e00b      	b.n	800463e <SEGGER_SYSVIEW_RecordU32+0x46>
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	b2da      	uxtb	r2, r3
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	1c59      	adds	r1, r3, #1
 800462e:	61f9      	str	r1, [r7, #28]
 8004630:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	701a      	strb	r2, [r3, #0]
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	09db      	lsrs	r3, r3, #7
 800463c:	61bb      	str	r3, [r7, #24]
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	2b7f      	cmp	r3, #127	; 0x7f
 8004642:	d8f0      	bhi.n	8004626 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	61fa      	str	r2, [r7, #28]
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	701a      	strb	r2, [r3, #0]
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	68f9      	ldr	r1, [r7, #12]
 8004658:	6938      	ldr	r0, [r7, #16]
 800465a:	f7ff fe75 	bl	8004348 <_SendPacket>
  RECORD_END();
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f383 8811 	msr	BASEPRI, r3
}
 8004664:	bf00      	nop
 8004666:	3720      	adds	r7, #32
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	2000cea4 	.word	0x2000cea4

08004670 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004670:	b580      	push	{r7, lr}
 8004672:	b08c      	sub	sp, #48	; 0x30
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800467c:	f3ef 8311 	mrs	r3, BASEPRI
 8004680:	f04f 0120 	mov.w	r1, #32
 8004684:	f381 8811 	msr	BASEPRI, r1
 8004688:	61fb      	str	r3, [r7, #28]
 800468a:	4825      	ldr	r0, [pc, #148]	; (8004720 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800468c:	f7ff fd6c 	bl	8004168 <_PreparePacket>
 8004690:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	62bb      	str	r3, [r7, #40]	; 0x28
 800469e:	e00b      	b.n	80046b8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80046a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a6:	1c59      	adds	r1, r3, #1
 80046a8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80046aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	701a      	strb	r2, [r3, #0]
 80046b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b4:	09db      	lsrs	r3, r3, #7
 80046b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80046b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ba:	2b7f      	cmp	r3, #127	; 0x7f
 80046bc:	d8f0      	bhi.n	80046a0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80046be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	701a      	strb	r2, [r3, #0]
 80046ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046cc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	623b      	str	r3, [r7, #32]
 80046d6:	e00b      	b.n	80046f0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	1c59      	adds	r1, r3, #1
 80046e0:	6279      	str	r1, [r7, #36]	; 0x24
 80046e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	09db      	lsrs	r3, r3, #7
 80046ee:	623b      	str	r3, [r7, #32]
 80046f0:	6a3b      	ldr	r3, [r7, #32]
 80046f2:	2b7f      	cmp	r3, #127	; 0x7f
 80046f4:	d8f0      	bhi.n	80046d8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	627a      	str	r2, [r7, #36]	; 0x24
 80046fc:	6a3a      	ldr	r2, [r7, #32]
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	701a      	strb	r2, [r3, #0]
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	6979      	ldr	r1, [r7, #20]
 800470a:	69b8      	ldr	r0, [r7, #24]
 800470c:	f7ff fe1c 	bl	8004348 <_SendPacket>
  RECORD_END();
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f383 8811 	msr	BASEPRI, r3
}
 8004716:	bf00      	nop
 8004718:	3730      	adds	r7, #48	; 0x30
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	2000cea4 	.word	0x2000cea4

08004724 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004724:	b580      	push	{r7, lr}
 8004726:	b08c      	sub	sp, #48	; 0x30
 8004728:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800472a:	4b58      	ldr	r3, [pc, #352]	; (800488c <SEGGER_SYSVIEW_Start+0x168>)
 800472c:	2201      	movs	r2, #1
 800472e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004730:	f3ef 8311 	mrs	r3, BASEPRI
 8004734:	f04f 0120 	mov.w	r1, #32
 8004738:	f381 8811 	msr	BASEPRI, r1
 800473c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800473e:	4b53      	ldr	r3, [pc, #332]	; (800488c <SEGGER_SYSVIEW_Start+0x168>)
 8004740:	785b      	ldrb	r3, [r3, #1]
 8004742:	220a      	movs	r2, #10
 8004744:	4952      	ldr	r1, [pc, #328]	; (8004890 <SEGGER_SYSVIEW_Start+0x16c>)
 8004746:	4618      	mov	r0, r3
 8004748:	f7fb fd62 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004752:	200a      	movs	r0, #10
 8004754:	f7ff ff32 	bl	80045bc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004758:	f3ef 8311 	mrs	r3, BASEPRI
 800475c:	f04f 0120 	mov.w	r1, #32
 8004760:	f381 8811 	msr	BASEPRI, r1
 8004764:	60bb      	str	r3, [r7, #8]
 8004766:	484b      	ldr	r0, [pc, #300]	; (8004894 <SEGGER_SYSVIEW_Start+0x170>)
 8004768:	f7ff fcfe 	bl	8004168 <_PreparePacket>
 800476c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004776:	4b45      	ldr	r3, [pc, #276]	; (800488c <SEGGER_SYSVIEW_Start+0x168>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	62bb      	str	r3, [r7, #40]	; 0x28
 800477c:	e00b      	b.n	8004796 <SEGGER_SYSVIEW_Start+0x72>
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	b2da      	uxtb	r2, r3
 8004782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004784:	1c59      	adds	r1, r3, #1
 8004786:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004788:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800478c:	b2d2      	uxtb	r2, r2
 800478e:	701a      	strb	r2, [r3, #0]
 8004790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004792:	09db      	lsrs	r3, r3, #7
 8004794:	62bb      	str	r3, [r7, #40]	; 0x28
 8004796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004798:	2b7f      	cmp	r3, #127	; 0x7f
 800479a:	d8f0      	bhi.n	800477e <SEGGER_SYSVIEW_Start+0x5a>
 800479c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	701a      	strb	r2, [r3, #0]
 80047a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047aa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	627b      	str	r3, [r7, #36]	; 0x24
 80047b0:	4b36      	ldr	r3, [pc, #216]	; (800488c <SEGGER_SYSVIEW_Start+0x168>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	623b      	str	r3, [r7, #32]
 80047b6:	e00b      	b.n	80047d0 <SEGGER_SYSVIEW_Start+0xac>
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	1c59      	adds	r1, r3, #1
 80047c0:	6279      	str	r1, [r7, #36]	; 0x24
 80047c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	701a      	strb	r2, [r3, #0]
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	09db      	lsrs	r3, r3, #7
 80047ce:	623b      	str	r3, [r7, #32]
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	2b7f      	cmp	r3, #127	; 0x7f
 80047d4:	d8f0      	bhi.n	80047b8 <SEGGER_SYSVIEW_Start+0x94>
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	627a      	str	r2, [r7, #36]	; 0x24
 80047dc:	6a3a      	ldr	r2, [r7, #32]
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	61fb      	str	r3, [r7, #28]
 80047ea:	4b28      	ldr	r3, [pc, #160]	; (800488c <SEGGER_SYSVIEW_Start+0x168>)
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	61bb      	str	r3, [r7, #24]
 80047f0:	e00b      	b.n	800480a <SEGGER_SYSVIEW_Start+0xe6>
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	1c59      	adds	r1, r3, #1
 80047fa:	61f9      	str	r1, [r7, #28]
 80047fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	701a      	strb	r2, [r3, #0]
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	09db      	lsrs	r3, r3, #7
 8004808:	61bb      	str	r3, [r7, #24]
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	2b7f      	cmp	r3, #127	; 0x7f
 800480e:	d8f0      	bhi.n	80047f2 <SEGGER_SYSVIEW_Start+0xce>
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	61fa      	str	r2, [r7, #28]
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	701a      	strb	r2, [r3, #0]
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	2300      	movs	r3, #0
 8004826:	613b      	str	r3, [r7, #16]
 8004828:	e00b      	b.n	8004842 <SEGGER_SYSVIEW_Start+0x11e>
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	b2da      	uxtb	r2, r3
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	1c59      	adds	r1, r3, #1
 8004832:	6179      	str	r1, [r7, #20]
 8004834:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004838:	b2d2      	uxtb	r2, r2
 800483a:	701a      	strb	r2, [r3, #0]
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	09db      	lsrs	r3, r3, #7
 8004840:	613b      	str	r3, [r7, #16]
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	2b7f      	cmp	r3, #127	; 0x7f
 8004846:	d8f0      	bhi.n	800482a <SEGGER_SYSVIEW_Start+0x106>
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	617a      	str	r2, [r7, #20]
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	701a      	strb	r2, [r3, #0]
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004858:	2218      	movs	r2, #24
 800485a:	6839      	ldr	r1, [r7, #0]
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7ff fd73 	bl	8004348 <_SendPacket>
      RECORD_END();
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004868:	4b08      	ldr	r3, [pc, #32]	; (800488c <SEGGER_SYSVIEW_Start+0x168>)
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004870:	4b06      	ldr	r3, [pc, #24]	; (800488c <SEGGER_SYSVIEW_Start+0x168>)
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004876:	f000 f9eb 	bl	8004c50 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800487a:	f000 f9b1 	bl	8004be0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800487e:	f000 fc13 	bl	80050a8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004882:	bf00      	nop
 8004884:	3730      	adds	r7, #48	; 0x30
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	2000ce74 	.word	0x2000ce74
 8004890:	08006360 	.word	0x08006360
 8004894:	2000cea4 	.word	0x2000cea4

08004898 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800489e:	f3ef 8311 	mrs	r3, BASEPRI
 80048a2:	f04f 0120 	mov.w	r1, #32
 80048a6:	f381 8811 	msr	BASEPRI, r1
 80048aa:	607b      	str	r3, [r7, #4]
 80048ac:	480b      	ldr	r0, [pc, #44]	; (80048dc <SEGGER_SYSVIEW_Stop+0x44>)
 80048ae:	f7ff fc5b 	bl	8004168 <_PreparePacket>
 80048b2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80048b4:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <SEGGER_SYSVIEW_Stop+0x48>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d007      	beq.n	80048cc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80048bc:	220b      	movs	r2, #11
 80048be:	6839      	ldr	r1, [r7, #0]
 80048c0:	6838      	ldr	r0, [r7, #0]
 80048c2:	f7ff fd41 	bl	8004348 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80048c6:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <SEGGER_SYSVIEW_Stop+0x48>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f383 8811 	msr	BASEPRI, r3
}
 80048d2:	bf00      	nop
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	2000cea4 	.word	0x2000cea4
 80048e0:	2000ce74 	.word	0x2000ce74

080048e4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08c      	sub	sp, #48	; 0x30
 80048e8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80048ea:	f3ef 8311 	mrs	r3, BASEPRI
 80048ee:	f04f 0120 	mov.w	r1, #32
 80048f2:	f381 8811 	msr	BASEPRI, r1
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	4845      	ldr	r0, [pc, #276]	; (8004a10 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80048fa:	f7ff fc35 	bl	8004168 <_PreparePacket>
 80048fe:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004908:	4b42      	ldr	r3, [pc, #264]	; (8004a14 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	62bb      	str	r3, [r7, #40]	; 0x28
 800490e:	e00b      	b.n	8004928 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004912:	b2da      	uxtb	r2, r3
 8004914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004916:	1c59      	adds	r1, r3, #1
 8004918:	62f9      	str	r1, [r7, #44]	; 0x2c
 800491a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	701a      	strb	r2, [r3, #0]
 8004922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004924:	09db      	lsrs	r3, r3, #7
 8004926:	62bb      	str	r3, [r7, #40]	; 0x28
 8004928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492a:	2b7f      	cmp	r3, #127	; 0x7f
 800492c:	d8f0      	bhi.n	8004910 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800492e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	701a      	strb	r2, [r3, #0]
 800493a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	627b      	str	r3, [r7, #36]	; 0x24
 8004942:	4b34      	ldr	r3, [pc, #208]	; (8004a14 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	623b      	str	r3, [r7, #32]
 8004948:	e00b      	b.n	8004962 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	b2da      	uxtb	r2, r3
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	1c59      	adds	r1, r3, #1
 8004952:	6279      	str	r1, [r7, #36]	; 0x24
 8004954:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	701a      	strb	r2, [r3, #0]
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	09db      	lsrs	r3, r3, #7
 8004960:	623b      	str	r3, [r7, #32]
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	2b7f      	cmp	r3, #127	; 0x7f
 8004966:	d8f0      	bhi.n	800494a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	627a      	str	r2, [r7, #36]	; 0x24
 800496e:	6a3a      	ldr	r2, [r7, #32]
 8004970:	b2d2      	uxtb	r2, r2
 8004972:	701a      	strb	r2, [r3, #0]
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	61fb      	str	r3, [r7, #28]
 800497c:	4b25      	ldr	r3, [pc, #148]	; (8004a14 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	61bb      	str	r3, [r7, #24]
 8004982:	e00b      	b.n	800499c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	b2da      	uxtb	r2, r3
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	1c59      	adds	r1, r3, #1
 800498c:	61f9      	str	r1, [r7, #28]
 800498e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	701a      	strb	r2, [r3, #0]
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	09db      	lsrs	r3, r3, #7
 800499a:	61bb      	str	r3, [r7, #24]
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	2b7f      	cmp	r3, #127	; 0x7f
 80049a0:	d8f0      	bhi.n	8004984 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	1c5a      	adds	r2, r3, #1
 80049a6:	61fa      	str	r2, [r7, #28]
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	701a      	strb	r2, [r3, #0]
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	2300      	movs	r3, #0
 80049b8:	613b      	str	r3, [r7, #16]
 80049ba:	e00b      	b.n	80049d4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	1c59      	adds	r1, r3, #1
 80049c4:	6179      	str	r1, [r7, #20]
 80049c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	09db      	lsrs	r3, r3, #7
 80049d2:	613b      	str	r3, [r7, #16]
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	2b7f      	cmp	r3, #127	; 0x7f
 80049d8:	d8f0      	bhi.n	80049bc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	1c5a      	adds	r2, r3, #1
 80049de:	617a      	str	r2, [r7, #20]
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	701a      	strb	r2, [r3, #0]
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80049ea:	2218      	movs	r2, #24
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	68b8      	ldr	r0, [r7, #8]
 80049f0:	f7ff fcaa 	bl	8004348 <_SendPacket>
  RECORD_END();
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80049fa:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004a02:	4b04      	ldr	r3, [pc, #16]	; (8004a14 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	4798      	blx	r3
  }
}
 8004a08:	bf00      	nop
 8004a0a:	3730      	adds	r7, #48	; 0x30
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	2000cea4 	.word	0x2000cea4
 8004a14:	2000ce74 	.word	0x2000ce74

08004a18 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b092      	sub	sp, #72	; 0x48
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004a20:	f3ef 8311 	mrs	r3, BASEPRI
 8004a24:	f04f 0120 	mov.w	r1, #32
 8004a28:	f381 8811 	msr	BASEPRI, r1
 8004a2c:	617b      	str	r3, [r7, #20]
 8004a2e:	486a      	ldr	r0, [pc, #424]	; (8004bd8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004a30:	f7ff fb9a 	bl	8004168 <_PreparePacket>
 8004a34:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	4b66      	ldr	r3, [pc, #408]	; (8004bdc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	643b      	str	r3, [r7, #64]	; 0x40
 8004a4a:	e00b      	b.n	8004a64 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a52:	1c59      	adds	r1, r3, #1
 8004a54:	6479      	str	r1, [r7, #68]	; 0x44
 8004a56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a60:	09db      	lsrs	r3, r3, #7
 8004a62:	643b      	str	r3, [r7, #64]	; 0x40
 8004a64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a66:	2b7f      	cmp	r3, #127	; 0x7f
 8004a68:	d8f0      	bhi.n	8004a4c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a6c:	1c5a      	adds	r2, r3, #1
 8004a6e:	647a      	str	r2, [r7, #68]	; 0x44
 8004a70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a72:	b2d2      	uxtb	r2, r2
 8004a74:	701a      	strb	r2, [r3, #0]
 8004a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a78:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a84:	e00b      	b.n	8004a9e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a8c:	1c59      	adds	r1, r3, #1
 8004a8e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004a90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a94:	b2d2      	uxtb	r2, r2
 8004a96:	701a      	strb	r2, [r3, #0]
 8004a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9a:	09db      	lsrs	r3, r3, #7
 8004a9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa0:	2b7f      	cmp	r3, #127	; 0x7f
 8004aa2:	d8f0      	bhi.n	8004a86 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa6:	1c5a      	adds	r2, r3, #1
 8004aa8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004aac:	b2d2      	uxtb	r2, r2
 8004aae:	701a      	strb	r2, [r3, #0]
 8004ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	4619      	mov	r1, r3
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f7ff fb03 	bl	80040c8 <_EncodeStr>
 8004ac2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004ac4:	2209      	movs	r2, #9
 8004ac6:	68f9      	ldr	r1, [r7, #12]
 8004ac8:	6938      	ldr	r0, [r7, #16]
 8004aca:	f7ff fc3d 	bl	8004348 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	4b40      	ldr	r3, [pc, #256]	; (8004bdc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ae2:	e00b      	b.n	8004afc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aea:	1c59      	adds	r1, r3, #1
 8004aec:	6379      	str	r1, [r7, #52]	; 0x34
 8004aee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	701a      	strb	r2, [r3, #0]
 8004af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af8:	09db      	lsrs	r3, r3, #7
 8004afa:	633b      	str	r3, [r7, #48]	; 0x30
 8004afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afe:	2b7f      	cmp	r3, #127	; 0x7f
 8004b00:	d8f0      	bhi.n	8004ae4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b04:	1c5a      	adds	r2, r3, #1
 8004b06:	637a      	str	r2, [r7, #52]	; 0x34
 8004b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	701a      	strb	r2, [r3, #0]
 8004b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b10:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b1c:	e00b      	b.n	8004b36 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b24:	1c59      	adds	r1, r3, #1
 8004b26:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004b28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b2c:	b2d2      	uxtb	r2, r2
 8004b2e:	701a      	strb	r2, [r3, #0]
 8004b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b32:	09db      	lsrs	r3, r3, #7
 8004b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b38:	2b7f      	cmp	r3, #127	; 0x7f
 8004b3a:	d8f0      	bhi.n	8004b1e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3e:	1c5a      	adds	r2, r3, #1
 8004b40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b44:	b2d2      	uxtb	r2, r2
 8004b46:	701a      	strb	r2, [r3, #0]
 8004b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	623b      	str	r3, [r7, #32]
 8004b56:	e00b      	b.n	8004b70 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	1c59      	adds	r1, r3, #1
 8004b60:	6279      	str	r1, [r7, #36]	; 0x24
 8004b62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	701a      	strb	r2, [r3, #0]
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	09db      	lsrs	r3, r3, #7
 8004b6e:	623b      	str	r3, [r7, #32]
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	2b7f      	cmp	r3, #127	; 0x7f
 8004b74:	d8f0      	bhi.n	8004b58 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	1c5a      	adds	r2, r3, #1
 8004b7a:	627a      	str	r2, [r7, #36]	; 0x24
 8004b7c:	6a3a      	ldr	r2, [r7, #32]
 8004b7e:	b2d2      	uxtb	r2, r2
 8004b80:	701a      	strb	r2, [r3, #0]
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	61fb      	str	r3, [r7, #28]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	e00b      	b.n	8004ba8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	1c59      	adds	r1, r3, #1
 8004b98:	61f9      	str	r1, [r7, #28]
 8004b9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	701a      	strb	r2, [r3, #0]
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	09db      	lsrs	r3, r3, #7
 8004ba6:	61bb      	str	r3, [r7, #24]
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	2b7f      	cmp	r3, #127	; 0x7f
 8004bac:	d8f0      	bhi.n	8004b90 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	61fa      	str	r2, [r7, #28]
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	701a      	strb	r2, [r3, #0]
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004bbe:	2215      	movs	r2, #21
 8004bc0:	68f9      	ldr	r1, [r7, #12]
 8004bc2:	6938      	ldr	r0, [r7, #16]
 8004bc4:	f7ff fbc0 	bl	8004348 <_SendPacket>
  RECORD_END();
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f383 8811 	msr	BASEPRI, r3
}
 8004bce:	bf00      	nop
 8004bd0:	3748      	adds	r7, #72	; 0x48
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	2000cea4 	.word	0x2000cea4
 8004bdc:	2000ce74 	.word	0x2000ce74

08004be0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004be4:	4b07      	ldr	r3, [pc, #28]	; (8004c04 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d008      	beq.n	8004bfe <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004bec:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004bf6:	4b03      	ldr	r3, [pc, #12]	; (8004c04 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	4798      	blx	r3
  }
}
 8004bfe:	bf00      	nop
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	2000ce74 	.word	0x2000ce74

08004c08 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c10:	f3ef 8311 	mrs	r3, BASEPRI
 8004c14:	f04f 0120 	mov.w	r1, #32
 8004c18:	f381 8811 	msr	BASEPRI, r1
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	480b      	ldr	r0, [pc, #44]	; (8004c4c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004c20:	f7ff faa2 	bl	8004168 <_PreparePacket>
 8004c24:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c26:	2280      	movs	r2, #128	; 0x80
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	6938      	ldr	r0, [r7, #16]
 8004c2c:	f7ff fa4c 	bl	80040c8 <_EncodeStr>
 8004c30:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004c32:	220e      	movs	r2, #14
 8004c34:	68f9      	ldr	r1, [r7, #12]
 8004c36:	6938      	ldr	r0, [r7, #16]
 8004c38:	f7ff fb86 	bl	8004348 <_SendPacket>
  RECORD_END();
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f383 8811 	msr	BASEPRI, r3
}
 8004c42:	bf00      	nop
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	2000cea4 	.word	0x2000cea4

08004c50 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004c50:	b590      	push	{r4, r7, lr}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004c56:	4b15      	ldr	r3, [pc, #84]	; (8004cac <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d01a      	beq.n	8004c94 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004c5e:	4b13      	ldr	r3, [pc, #76]	; (8004cac <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d015      	beq.n	8004c94 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004c68:	4b10      	ldr	r3, [pc, #64]	; (8004cac <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4798      	blx	r3
 8004c70:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004c74:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004c76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c7a:	f04f 0200 	mov.w	r2, #0
 8004c7e:	f04f 0300 	mov.w	r3, #0
 8004c82:	000a      	movs	r2, r1
 8004c84:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004c86:	4613      	mov	r3, r2
 8004c88:	461a      	mov	r2, r3
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	200d      	movs	r0, #13
 8004c8e:	f7ff fcef 	bl	8004670 <SEGGER_SYSVIEW_RecordU32x2>
 8004c92:	e006      	b.n	8004ca2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004c94:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4619      	mov	r1, r3
 8004c9a:	200c      	movs	r0, #12
 8004c9c:	f7ff fcac 	bl	80045f8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004ca0:	bf00      	nop
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd90      	pop	{r4, r7, pc}
 8004caa:	bf00      	nop
 8004cac:	2000ce74 	.word	0x2000ce74
 8004cb0:	e0001004 	.word	0xe0001004

08004cb4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004cba:	f3ef 8311 	mrs	r3, BASEPRI
 8004cbe:	f04f 0120 	mov.w	r1, #32
 8004cc2:	f381 8811 	msr	BASEPRI, r1
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	4819      	ldr	r0, [pc, #100]	; (8004d30 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004cca:	f7ff fa4d 	bl	8004168 <_PreparePacket>
 8004cce:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004cd4:	4b17      	ldr	r3, [pc, #92]	; (8004d34 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cdc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	617b      	str	r3, [r7, #20]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	613b      	str	r3, [r7, #16]
 8004ce6:	e00b      	b.n	8004d00 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	1c59      	adds	r1, r3, #1
 8004cf0:	6179      	str	r1, [r7, #20]
 8004cf2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	09db      	lsrs	r3, r3, #7
 8004cfe:	613b      	str	r3, [r7, #16]
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	2b7f      	cmp	r3, #127	; 0x7f
 8004d04:	d8f0      	bhi.n	8004ce8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	617a      	str	r2, [r7, #20]
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	b2d2      	uxtb	r2, r2
 8004d10:	701a      	strb	r2, [r3, #0]
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004d16:	2202      	movs	r2, #2
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	68b8      	ldr	r0, [r7, #8]
 8004d1c:	f7ff fb14 	bl	8004348 <_SendPacket>
  RECORD_END();
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f383 8811 	msr	BASEPRI, r3
}
 8004d26:	bf00      	nop
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	2000cea4 	.word	0x2000cea4
 8004d34:	e000ed04 	.word	0xe000ed04

08004d38 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d3e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d42:	f04f 0120 	mov.w	r1, #32
 8004d46:	f381 8811 	msr	BASEPRI, r1
 8004d4a:	607b      	str	r3, [r7, #4]
 8004d4c:	4807      	ldr	r0, [pc, #28]	; (8004d6c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004d4e:	f7ff fa0b 	bl	8004168 <_PreparePacket>
 8004d52:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004d54:	2203      	movs	r2, #3
 8004d56:	6839      	ldr	r1, [r7, #0]
 8004d58:	6838      	ldr	r0, [r7, #0]
 8004d5a:	f7ff faf5 	bl	8004348 <_SendPacket>
  RECORD_END();
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f383 8811 	msr	BASEPRI, r3
}
 8004d64:	bf00      	nop
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	2000cea4 	.word	0x2000cea4

08004d70 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d76:	f3ef 8311 	mrs	r3, BASEPRI
 8004d7a:	f04f 0120 	mov.w	r1, #32
 8004d7e:	f381 8811 	msr	BASEPRI, r1
 8004d82:	607b      	str	r3, [r7, #4]
 8004d84:	4807      	ldr	r0, [pc, #28]	; (8004da4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004d86:	f7ff f9ef 	bl	8004168 <_PreparePacket>
 8004d8a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004d8c:	2212      	movs	r2, #18
 8004d8e:	6839      	ldr	r1, [r7, #0]
 8004d90:	6838      	ldr	r0, [r7, #0]
 8004d92:	f7ff fad9 	bl	8004348 <_SendPacket>
  RECORD_END();
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f383 8811 	msr	BASEPRI, r3
}
 8004d9c:	bf00      	nop
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	2000cea4 	.word	0x2000cea4

08004da8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004dae:	f3ef 8311 	mrs	r3, BASEPRI
 8004db2:	f04f 0120 	mov.w	r1, #32
 8004db6:	f381 8811 	msr	BASEPRI, r1
 8004dba:	607b      	str	r3, [r7, #4]
 8004dbc:	4807      	ldr	r0, [pc, #28]	; (8004ddc <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004dbe:	f7ff f9d3 	bl	8004168 <_PreparePacket>
 8004dc2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004dc4:	2211      	movs	r2, #17
 8004dc6:	6839      	ldr	r1, [r7, #0]
 8004dc8:	6838      	ldr	r0, [r7, #0]
 8004dca:	f7ff fabd 	bl	8004348 <_SendPacket>
  RECORD_END();
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f383 8811 	msr	BASEPRI, r3
}
 8004dd4:	bf00      	nop
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	2000cea4 	.word	0x2000cea4

08004de0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b088      	sub	sp, #32
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004de8:	f3ef 8311 	mrs	r3, BASEPRI
 8004dec:	f04f 0120 	mov.w	r1, #32
 8004df0:	f381 8811 	msr	BASEPRI, r1
 8004df4:	617b      	str	r3, [r7, #20]
 8004df6:	4819      	ldr	r0, [pc, #100]	; (8004e5c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004df8:	f7ff f9b6 	bl	8004168 <_PreparePacket>
 8004dfc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004e02:	4b17      	ldr	r3, [pc, #92]	; (8004e60 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	61fb      	str	r3, [r7, #28]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	61bb      	str	r3, [r7, #24]
 8004e14:	e00b      	b.n	8004e2e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	b2da      	uxtb	r2, r3
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	1c59      	adds	r1, r3, #1
 8004e1e:	61f9      	str	r1, [r7, #28]
 8004e20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e24:	b2d2      	uxtb	r2, r2
 8004e26:	701a      	strb	r2, [r3, #0]
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	09db      	lsrs	r3, r3, #7
 8004e2c:	61bb      	str	r3, [r7, #24]
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	2b7f      	cmp	r3, #127	; 0x7f
 8004e32:	d8f0      	bhi.n	8004e16 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	61fa      	str	r2, [r7, #28]
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	701a      	strb	r2, [r3, #0]
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004e44:	2208      	movs	r2, #8
 8004e46:	68f9      	ldr	r1, [r7, #12]
 8004e48:	6938      	ldr	r0, [r7, #16]
 8004e4a:	f7ff fa7d 	bl	8004348 <_SendPacket>
  RECORD_END();
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f383 8811 	msr	BASEPRI, r3
}
 8004e54:	bf00      	nop
 8004e56:	3720      	adds	r7, #32
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	2000cea4 	.word	0x2000cea4
 8004e60:	2000ce74 	.word	0x2000ce74

08004e64 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e6c:	f3ef 8311 	mrs	r3, BASEPRI
 8004e70:	f04f 0120 	mov.w	r1, #32
 8004e74:	f381 8811 	msr	BASEPRI, r1
 8004e78:	617b      	str	r3, [r7, #20]
 8004e7a:	4819      	ldr	r0, [pc, #100]	; (8004ee0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004e7c:	f7ff f974 	bl	8004168 <_PreparePacket>
 8004e80:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004e86:	4b17      	ldr	r3, [pc, #92]	; (8004ee4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	61fb      	str	r3, [r7, #28]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	61bb      	str	r3, [r7, #24]
 8004e98:	e00b      	b.n	8004eb2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	1c59      	adds	r1, r3, #1
 8004ea2:	61f9      	str	r1, [r7, #28]
 8004ea4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ea8:	b2d2      	uxtb	r2, r2
 8004eaa:	701a      	strb	r2, [r3, #0]
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	09db      	lsrs	r3, r3, #7
 8004eb0:	61bb      	str	r3, [r7, #24]
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	2b7f      	cmp	r3, #127	; 0x7f
 8004eb6:	d8f0      	bhi.n	8004e9a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	61fa      	str	r2, [r7, #28]
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	b2d2      	uxtb	r2, r2
 8004ec2:	701a      	strb	r2, [r3, #0]
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004ec8:	2204      	movs	r2, #4
 8004eca:	68f9      	ldr	r1, [r7, #12]
 8004ecc:	6938      	ldr	r0, [r7, #16]
 8004ece:	f7ff fa3b 	bl	8004348 <_SendPacket>
  RECORD_END();
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f383 8811 	msr	BASEPRI, r3
}
 8004ed8:	bf00      	nop
 8004eda:	3720      	adds	r7, #32
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	2000cea4 	.word	0x2000cea4
 8004ee4:	2000ce74 	.word	0x2000ce74

08004ee8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b088      	sub	sp, #32
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ef0:	f3ef 8311 	mrs	r3, BASEPRI
 8004ef4:	f04f 0120 	mov.w	r1, #32
 8004ef8:	f381 8811 	msr	BASEPRI, r1
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	4819      	ldr	r0, [pc, #100]	; (8004f64 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004f00:	f7ff f932 	bl	8004168 <_PreparePacket>
 8004f04:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004f0a:	4b17      	ldr	r3, [pc, #92]	; (8004f68 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	61fb      	str	r3, [r7, #28]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	61bb      	str	r3, [r7, #24]
 8004f1c:	e00b      	b.n	8004f36 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	1c59      	adds	r1, r3, #1
 8004f26:	61f9      	str	r1, [r7, #28]
 8004f28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	701a      	strb	r2, [r3, #0]
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	09db      	lsrs	r3, r3, #7
 8004f34:	61bb      	str	r3, [r7, #24]
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	2b7f      	cmp	r3, #127	; 0x7f
 8004f3a:	d8f0      	bhi.n	8004f1e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	61fa      	str	r2, [r7, #28]
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	701a      	strb	r2, [r3, #0]
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004f4c:	2206      	movs	r2, #6
 8004f4e:	68f9      	ldr	r1, [r7, #12]
 8004f50:	6938      	ldr	r0, [r7, #16]
 8004f52:	f7ff f9f9 	bl	8004348 <_SendPacket>
  RECORD_END();
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f383 8811 	msr	BASEPRI, r3
}
 8004f5c:	bf00      	nop
 8004f5e:	3720      	adds	r7, #32
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	2000cea4 	.word	0x2000cea4
 8004f68:	2000ce74 	.word	0x2000ce74

08004f6c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08c      	sub	sp, #48	; 0x30
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	4603      	mov	r3, r0
 8004f74:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004f76:	4b3b      	ldr	r3, [pc, #236]	; (8005064 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d06d      	beq.n	800505a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004f7e:	4b39      	ldr	r3, [pc, #228]	; (8005064 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004f84:	2300      	movs	r3, #0
 8004f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f88:	e008      	b.n	8004f9c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d007      	beq.n	8004fa6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f98:	3301      	adds	r3, #1
 8004f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f9c:	79fb      	ldrb	r3, [r7, #7]
 8004f9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d3f2      	bcc.n	8004f8a <SEGGER_SYSVIEW_SendModule+0x1e>
 8004fa4:	e000      	b.n	8004fa8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004fa6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d055      	beq.n	800505a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004fae:	f3ef 8311 	mrs	r3, BASEPRI
 8004fb2:	f04f 0120 	mov.w	r1, #32
 8004fb6:	f381 8811 	msr	BASEPRI, r1
 8004fba:	617b      	str	r3, [r7, #20]
 8004fbc:	482a      	ldr	r0, [pc, #168]	; (8005068 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004fbe:	f7ff f8d3 	bl	8004168 <_PreparePacket>
 8004fc2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	627b      	str	r3, [r7, #36]	; 0x24
 8004fcc:	79fb      	ldrb	r3, [r7, #7]
 8004fce:	623b      	str	r3, [r7, #32]
 8004fd0:	e00b      	b.n	8004fea <SEGGER_SYSVIEW_SendModule+0x7e>
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	1c59      	adds	r1, r3, #1
 8004fda:	6279      	str	r1, [r7, #36]	; 0x24
 8004fdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	701a      	strb	r2, [r3, #0]
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	09db      	lsrs	r3, r3, #7
 8004fe8:	623b      	str	r3, [r7, #32]
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	2b7f      	cmp	r3, #127	; 0x7f
 8004fee:	d8f0      	bhi.n	8004fd2 <SEGGER_SYSVIEW_SendModule+0x66>
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	627a      	str	r2, [r7, #36]	; 0x24
 8004ff6:	6a3a      	ldr	r2, [r7, #32]
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	701a      	strb	r2, [r3, #0]
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	61fb      	str	r3, [r7, #28]
 8005004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	61bb      	str	r3, [r7, #24]
 800500a:	e00b      	b.n	8005024 <SEGGER_SYSVIEW_SendModule+0xb8>
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	b2da      	uxtb	r2, r3
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	1c59      	adds	r1, r3, #1
 8005014:	61f9      	str	r1, [r7, #28]
 8005016:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	701a      	strb	r2, [r3, #0]
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	09db      	lsrs	r3, r3, #7
 8005022:	61bb      	str	r3, [r7, #24]
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	2b7f      	cmp	r3, #127	; 0x7f
 8005028:	d8f0      	bhi.n	800500c <SEGGER_SYSVIEW_SendModule+0xa0>
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	61fa      	str	r2, [r7, #28]
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	b2d2      	uxtb	r2, r2
 8005034:	701a      	strb	r2, [r3, #0]
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800503a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2280      	movs	r2, #128	; 0x80
 8005040:	4619      	mov	r1, r3
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f7ff f840 	bl	80040c8 <_EncodeStr>
 8005048:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800504a:	2216      	movs	r2, #22
 800504c:	68f9      	ldr	r1, [r7, #12]
 800504e:	6938      	ldr	r0, [r7, #16]
 8005050:	f7ff f97a 	bl	8004348 <_SendPacket>
      RECORD_END();
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800505a:	bf00      	nop
 800505c:	3730      	adds	r7, #48	; 0x30
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	2000ce9c 	.word	0x2000ce9c
 8005068:	2000cea4 	.word	0x2000cea4

0800506c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005072:	4b0c      	ldr	r3, [pc, #48]	; (80050a4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00f      	beq.n	800509a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800507a:	4b0a      	ldr	r3, [pc, #40]	; (80050a4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1f2      	bne.n	8005080 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800509a:	bf00      	nop
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	2000ce9c 	.word	0x2000ce9c

080050a8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80050ae:	f3ef 8311 	mrs	r3, BASEPRI
 80050b2:	f04f 0120 	mov.w	r1, #32
 80050b6:	f381 8811 	msr	BASEPRI, r1
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	4817      	ldr	r0, [pc, #92]	; (800511c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80050be:	f7ff f853 	bl	8004168 <_PreparePacket>
 80050c2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	617b      	str	r3, [r7, #20]
 80050cc:	4b14      	ldr	r3, [pc, #80]	; (8005120 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	613b      	str	r3, [r7, #16]
 80050d2:	e00b      	b.n	80050ec <SEGGER_SYSVIEW_SendNumModules+0x44>
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	1c59      	adds	r1, r3, #1
 80050dc:	6179      	str	r1, [r7, #20]
 80050de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	701a      	strb	r2, [r3, #0]
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	09db      	lsrs	r3, r3, #7
 80050ea:	613b      	str	r3, [r7, #16]
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	2b7f      	cmp	r3, #127	; 0x7f
 80050f0:	d8f0      	bhi.n	80050d4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	617a      	str	r2, [r7, #20]
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005102:	221b      	movs	r2, #27
 8005104:	6879      	ldr	r1, [r7, #4]
 8005106:	68b8      	ldr	r0, [r7, #8]
 8005108:	f7ff f91e 	bl	8004348 <_SendPacket>
  RECORD_END();
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f383 8811 	msr	BASEPRI, r3
}
 8005112:	bf00      	nop
 8005114:	3718      	adds	r7, #24
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	2000cea4 	.word	0x2000cea4
 8005120:	2000cea0 	.word	0x2000cea0

08005124 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005124:	b580      	push	{r7, lr}
 8005126:	b08a      	sub	sp, #40	; 0x28
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800512c:	f3ef 8311 	mrs	r3, BASEPRI
 8005130:	f04f 0120 	mov.w	r1, #32
 8005134:	f381 8811 	msr	BASEPRI, r1
 8005138:	617b      	str	r3, [r7, #20]
 800513a:	4827      	ldr	r0, [pc, #156]	; (80051d8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800513c:	f7ff f814 	bl	8004168 <_PreparePacket>
 8005140:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005142:	2280      	movs	r2, #128	; 0x80
 8005144:	6879      	ldr	r1, [r7, #4]
 8005146:	6938      	ldr	r0, [r7, #16]
 8005148:	f7fe ffbe 	bl	80040c8 <_EncodeStr>
 800514c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
 8005152:	2301      	movs	r3, #1
 8005154:	623b      	str	r3, [r7, #32]
 8005156:	e00b      	b.n	8005170 <SEGGER_SYSVIEW_Warn+0x4c>
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	b2da      	uxtb	r2, r3
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	1c59      	adds	r1, r3, #1
 8005160:	6279      	str	r1, [r7, #36]	; 0x24
 8005162:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005166:	b2d2      	uxtb	r2, r2
 8005168:	701a      	strb	r2, [r3, #0]
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	09db      	lsrs	r3, r3, #7
 800516e:	623b      	str	r3, [r7, #32]
 8005170:	6a3b      	ldr	r3, [r7, #32]
 8005172:	2b7f      	cmp	r3, #127	; 0x7f
 8005174:	d8f0      	bhi.n	8005158 <SEGGER_SYSVIEW_Warn+0x34>
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	627a      	str	r2, [r7, #36]	; 0x24
 800517c:	6a3a      	ldr	r2, [r7, #32]
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	701a      	strb	r2, [r3, #0]
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	61fb      	str	r3, [r7, #28]
 800518a:	2300      	movs	r3, #0
 800518c:	61bb      	str	r3, [r7, #24]
 800518e:	e00b      	b.n	80051a8 <SEGGER_SYSVIEW_Warn+0x84>
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	b2da      	uxtb	r2, r3
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	1c59      	adds	r1, r3, #1
 8005198:	61f9      	str	r1, [r7, #28]
 800519a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800519e:	b2d2      	uxtb	r2, r2
 80051a0:	701a      	strb	r2, [r3, #0]
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	09db      	lsrs	r3, r3, #7
 80051a6:	61bb      	str	r3, [r7, #24]
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	2b7f      	cmp	r3, #127	; 0x7f
 80051ac:	d8f0      	bhi.n	8005190 <SEGGER_SYSVIEW_Warn+0x6c>
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	61fa      	str	r2, [r7, #28]
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80051be:	221a      	movs	r2, #26
 80051c0:	68f9      	ldr	r1, [r7, #12]
 80051c2:	6938      	ldr	r0, [r7, #16]
 80051c4:	f7ff f8c0 	bl	8004348 <_SendPacket>
  RECORD_END();
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f383 8811 	msr	BASEPRI, r3
}
 80051ce:	bf00      	nop
 80051d0:	3728      	adds	r7, #40	; 0x28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	2000cea4 	.word	0x2000cea4

080051dc <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
 80051e8:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	6879      	ldr	r1, [r7, #4]
 80051ee:	2000      	movs	r0, #0
 80051f0:	f7fe fe74 	bl	8003edc <SEGGER_RTT_Write>
  return len;
 80051f4:	683b      	ldr	r3, [r7, #0]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
	...

08005200 <__libc_init_array>:
 8005200:	b570      	push	{r4, r5, r6, lr}
 8005202:	4d0d      	ldr	r5, [pc, #52]	; (8005238 <__libc_init_array+0x38>)
 8005204:	4c0d      	ldr	r4, [pc, #52]	; (800523c <__libc_init_array+0x3c>)
 8005206:	1b64      	subs	r4, r4, r5
 8005208:	10a4      	asrs	r4, r4, #2
 800520a:	2600      	movs	r6, #0
 800520c:	42a6      	cmp	r6, r4
 800520e:	d109      	bne.n	8005224 <__libc_init_array+0x24>
 8005210:	4d0b      	ldr	r5, [pc, #44]	; (8005240 <__libc_init_array+0x40>)
 8005212:	4c0c      	ldr	r4, [pc, #48]	; (8005244 <__libc_init_array+0x44>)
 8005214:	f000 ff8e 	bl	8006134 <_init>
 8005218:	1b64      	subs	r4, r4, r5
 800521a:	10a4      	asrs	r4, r4, #2
 800521c:	2600      	movs	r6, #0
 800521e:	42a6      	cmp	r6, r4
 8005220:	d105      	bne.n	800522e <__libc_init_array+0x2e>
 8005222:	bd70      	pop	{r4, r5, r6, pc}
 8005224:	f855 3b04 	ldr.w	r3, [r5], #4
 8005228:	4798      	blx	r3
 800522a:	3601      	adds	r6, #1
 800522c:	e7ee      	b.n	800520c <__libc_init_array+0xc>
 800522e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005232:	4798      	blx	r3
 8005234:	3601      	adds	r6, #1
 8005236:	e7f2      	b.n	800521e <__libc_init_array+0x1e>
 8005238:	0800640c 	.word	0x0800640c
 800523c:	0800640c 	.word	0x0800640c
 8005240:	0800640c 	.word	0x0800640c
 8005244:	08006410 	.word	0x08006410

08005248 <memcmp>:
 8005248:	b530      	push	{r4, r5, lr}
 800524a:	3901      	subs	r1, #1
 800524c:	2400      	movs	r4, #0
 800524e:	42a2      	cmp	r2, r4
 8005250:	d101      	bne.n	8005256 <memcmp+0xe>
 8005252:	2000      	movs	r0, #0
 8005254:	e005      	b.n	8005262 <memcmp+0x1a>
 8005256:	5d03      	ldrb	r3, [r0, r4]
 8005258:	3401      	adds	r4, #1
 800525a:	5d0d      	ldrb	r5, [r1, r4]
 800525c:	42ab      	cmp	r3, r5
 800525e:	d0f6      	beq.n	800524e <memcmp+0x6>
 8005260:	1b58      	subs	r0, r3, r5
 8005262:	bd30      	pop	{r4, r5, pc}

08005264 <memcpy>:
 8005264:	440a      	add	r2, r1
 8005266:	4291      	cmp	r1, r2
 8005268:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800526c:	d100      	bne.n	8005270 <memcpy+0xc>
 800526e:	4770      	bx	lr
 8005270:	b510      	push	{r4, lr}
 8005272:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005276:	f803 4f01 	strb.w	r4, [r3, #1]!
 800527a:	4291      	cmp	r1, r2
 800527c:	d1f9      	bne.n	8005272 <memcpy+0xe>
 800527e:	bd10      	pop	{r4, pc}

08005280 <memset>:
 8005280:	4402      	add	r2, r0
 8005282:	4603      	mov	r3, r0
 8005284:	4293      	cmp	r3, r2
 8005286:	d100      	bne.n	800528a <memset+0xa>
 8005288:	4770      	bx	lr
 800528a:	f803 1b01 	strb.w	r1, [r3], #1
 800528e:	e7f9      	b.n	8005284 <memset+0x4>

08005290 <iprintf>:
 8005290:	b40f      	push	{r0, r1, r2, r3}
 8005292:	4b0a      	ldr	r3, [pc, #40]	; (80052bc <iprintf+0x2c>)
 8005294:	b513      	push	{r0, r1, r4, lr}
 8005296:	681c      	ldr	r4, [r3, #0]
 8005298:	b124      	cbz	r4, 80052a4 <iprintf+0x14>
 800529a:	69a3      	ldr	r3, [r4, #24]
 800529c:	b913      	cbnz	r3, 80052a4 <iprintf+0x14>
 800529e:	4620      	mov	r0, r4
 80052a0:	f000 f866 	bl	8005370 <__sinit>
 80052a4:	ab05      	add	r3, sp, #20
 80052a6:	9a04      	ldr	r2, [sp, #16]
 80052a8:	68a1      	ldr	r1, [r4, #8]
 80052aa:	9301      	str	r3, [sp, #4]
 80052ac:	4620      	mov	r0, r4
 80052ae:	f000 f983 	bl	80055b8 <_vfiprintf_r>
 80052b2:	b002      	add	sp, #8
 80052b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052b8:	b004      	add	sp, #16
 80052ba:	4770      	bx	lr
 80052bc:	20000010 	.word	0x20000010

080052c0 <std>:
 80052c0:	2300      	movs	r3, #0
 80052c2:	b510      	push	{r4, lr}
 80052c4:	4604      	mov	r4, r0
 80052c6:	e9c0 3300 	strd	r3, r3, [r0]
 80052ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052ce:	6083      	str	r3, [r0, #8]
 80052d0:	8181      	strh	r1, [r0, #12]
 80052d2:	6643      	str	r3, [r0, #100]	; 0x64
 80052d4:	81c2      	strh	r2, [r0, #14]
 80052d6:	6183      	str	r3, [r0, #24]
 80052d8:	4619      	mov	r1, r3
 80052da:	2208      	movs	r2, #8
 80052dc:	305c      	adds	r0, #92	; 0x5c
 80052de:	f7ff ffcf 	bl	8005280 <memset>
 80052e2:	4b05      	ldr	r3, [pc, #20]	; (80052f8 <std+0x38>)
 80052e4:	6263      	str	r3, [r4, #36]	; 0x24
 80052e6:	4b05      	ldr	r3, [pc, #20]	; (80052fc <std+0x3c>)
 80052e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80052ea:	4b05      	ldr	r3, [pc, #20]	; (8005300 <std+0x40>)
 80052ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80052ee:	4b05      	ldr	r3, [pc, #20]	; (8005304 <std+0x44>)
 80052f0:	6224      	str	r4, [r4, #32]
 80052f2:	6323      	str	r3, [r4, #48]	; 0x30
 80052f4:	bd10      	pop	{r4, pc}
 80052f6:	bf00      	nop
 80052f8:	08005b61 	.word	0x08005b61
 80052fc:	08005b83 	.word	0x08005b83
 8005300:	08005bbb 	.word	0x08005bbb
 8005304:	08005bdf 	.word	0x08005bdf

08005308 <_cleanup_r>:
 8005308:	4901      	ldr	r1, [pc, #4]	; (8005310 <_cleanup_r+0x8>)
 800530a:	f000 b8af 	b.w	800546c <_fwalk_reent>
 800530e:	bf00      	nop
 8005310:	08005e95 	.word	0x08005e95

08005314 <__sfmoreglue>:
 8005314:	b570      	push	{r4, r5, r6, lr}
 8005316:	1e4a      	subs	r2, r1, #1
 8005318:	2568      	movs	r5, #104	; 0x68
 800531a:	4355      	muls	r5, r2
 800531c:	460e      	mov	r6, r1
 800531e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005322:	f000 f8c5 	bl	80054b0 <_malloc_r>
 8005326:	4604      	mov	r4, r0
 8005328:	b140      	cbz	r0, 800533c <__sfmoreglue+0x28>
 800532a:	2100      	movs	r1, #0
 800532c:	e9c0 1600 	strd	r1, r6, [r0]
 8005330:	300c      	adds	r0, #12
 8005332:	60a0      	str	r0, [r4, #8]
 8005334:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005338:	f7ff ffa2 	bl	8005280 <memset>
 800533c:	4620      	mov	r0, r4
 800533e:	bd70      	pop	{r4, r5, r6, pc}

08005340 <__sfp_lock_acquire>:
 8005340:	4801      	ldr	r0, [pc, #4]	; (8005348 <__sfp_lock_acquire+0x8>)
 8005342:	f000 b8b3 	b.w	80054ac <__retarget_lock_acquire_recursive>
 8005346:	bf00      	nop
 8005348:	2000d0a0 	.word	0x2000d0a0

0800534c <__sfp_lock_release>:
 800534c:	4801      	ldr	r0, [pc, #4]	; (8005354 <__sfp_lock_release+0x8>)
 800534e:	f000 b8ae 	b.w	80054ae <__retarget_lock_release_recursive>
 8005352:	bf00      	nop
 8005354:	2000d0a0 	.word	0x2000d0a0

08005358 <__sinit_lock_acquire>:
 8005358:	4801      	ldr	r0, [pc, #4]	; (8005360 <__sinit_lock_acquire+0x8>)
 800535a:	f000 b8a7 	b.w	80054ac <__retarget_lock_acquire_recursive>
 800535e:	bf00      	nop
 8005360:	2000d09b 	.word	0x2000d09b

08005364 <__sinit_lock_release>:
 8005364:	4801      	ldr	r0, [pc, #4]	; (800536c <__sinit_lock_release+0x8>)
 8005366:	f000 b8a2 	b.w	80054ae <__retarget_lock_release_recursive>
 800536a:	bf00      	nop
 800536c:	2000d09b 	.word	0x2000d09b

08005370 <__sinit>:
 8005370:	b510      	push	{r4, lr}
 8005372:	4604      	mov	r4, r0
 8005374:	f7ff fff0 	bl	8005358 <__sinit_lock_acquire>
 8005378:	69a3      	ldr	r3, [r4, #24]
 800537a:	b11b      	cbz	r3, 8005384 <__sinit+0x14>
 800537c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005380:	f7ff bff0 	b.w	8005364 <__sinit_lock_release>
 8005384:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005388:	6523      	str	r3, [r4, #80]	; 0x50
 800538a:	4b13      	ldr	r3, [pc, #76]	; (80053d8 <__sinit+0x68>)
 800538c:	4a13      	ldr	r2, [pc, #76]	; (80053dc <__sinit+0x6c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	62a2      	str	r2, [r4, #40]	; 0x28
 8005392:	42a3      	cmp	r3, r4
 8005394:	bf04      	itt	eq
 8005396:	2301      	moveq	r3, #1
 8005398:	61a3      	streq	r3, [r4, #24]
 800539a:	4620      	mov	r0, r4
 800539c:	f000 f820 	bl	80053e0 <__sfp>
 80053a0:	6060      	str	r0, [r4, #4]
 80053a2:	4620      	mov	r0, r4
 80053a4:	f000 f81c 	bl	80053e0 <__sfp>
 80053a8:	60a0      	str	r0, [r4, #8]
 80053aa:	4620      	mov	r0, r4
 80053ac:	f000 f818 	bl	80053e0 <__sfp>
 80053b0:	2200      	movs	r2, #0
 80053b2:	60e0      	str	r0, [r4, #12]
 80053b4:	2104      	movs	r1, #4
 80053b6:	6860      	ldr	r0, [r4, #4]
 80053b8:	f7ff ff82 	bl	80052c0 <std>
 80053bc:	68a0      	ldr	r0, [r4, #8]
 80053be:	2201      	movs	r2, #1
 80053c0:	2109      	movs	r1, #9
 80053c2:	f7ff ff7d 	bl	80052c0 <std>
 80053c6:	68e0      	ldr	r0, [r4, #12]
 80053c8:	2202      	movs	r2, #2
 80053ca:	2112      	movs	r1, #18
 80053cc:	f7ff ff78 	bl	80052c0 <std>
 80053d0:	2301      	movs	r3, #1
 80053d2:	61a3      	str	r3, [r4, #24]
 80053d4:	e7d2      	b.n	800537c <__sinit+0xc>
 80053d6:	bf00      	nop
 80053d8:	0800636c 	.word	0x0800636c
 80053dc:	08005309 	.word	0x08005309

080053e0 <__sfp>:
 80053e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e2:	4607      	mov	r7, r0
 80053e4:	f7ff ffac 	bl	8005340 <__sfp_lock_acquire>
 80053e8:	4b1e      	ldr	r3, [pc, #120]	; (8005464 <__sfp+0x84>)
 80053ea:	681e      	ldr	r6, [r3, #0]
 80053ec:	69b3      	ldr	r3, [r6, #24]
 80053ee:	b913      	cbnz	r3, 80053f6 <__sfp+0x16>
 80053f0:	4630      	mov	r0, r6
 80053f2:	f7ff ffbd 	bl	8005370 <__sinit>
 80053f6:	3648      	adds	r6, #72	; 0x48
 80053f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80053fc:	3b01      	subs	r3, #1
 80053fe:	d503      	bpl.n	8005408 <__sfp+0x28>
 8005400:	6833      	ldr	r3, [r6, #0]
 8005402:	b30b      	cbz	r3, 8005448 <__sfp+0x68>
 8005404:	6836      	ldr	r6, [r6, #0]
 8005406:	e7f7      	b.n	80053f8 <__sfp+0x18>
 8005408:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800540c:	b9d5      	cbnz	r5, 8005444 <__sfp+0x64>
 800540e:	4b16      	ldr	r3, [pc, #88]	; (8005468 <__sfp+0x88>)
 8005410:	60e3      	str	r3, [r4, #12]
 8005412:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005416:	6665      	str	r5, [r4, #100]	; 0x64
 8005418:	f000 f847 	bl	80054aa <__retarget_lock_init_recursive>
 800541c:	f7ff ff96 	bl	800534c <__sfp_lock_release>
 8005420:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005424:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005428:	6025      	str	r5, [r4, #0]
 800542a:	61a5      	str	r5, [r4, #24]
 800542c:	2208      	movs	r2, #8
 800542e:	4629      	mov	r1, r5
 8005430:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005434:	f7ff ff24 	bl	8005280 <memset>
 8005438:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800543c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005440:	4620      	mov	r0, r4
 8005442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005444:	3468      	adds	r4, #104	; 0x68
 8005446:	e7d9      	b.n	80053fc <__sfp+0x1c>
 8005448:	2104      	movs	r1, #4
 800544a:	4638      	mov	r0, r7
 800544c:	f7ff ff62 	bl	8005314 <__sfmoreglue>
 8005450:	4604      	mov	r4, r0
 8005452:	6030      	str	r0, [r6, #0]
 8005454:	2800      	cmp	r0, #0
 8005456:	d1d5      	bne.n	8005404 <__sfp+0x24>
 8005458:	f7ff ff78 	bl	800534c <__sfp_lock_release>
 800545c:	230c      	movs	r3, #12
 800545e:	603b      	str	r3, [r7, #0]
 8005460:	e7ee      	b.n	8005440 <__sfp+0x60>
 8005462:	bf00      	nop
 8005464:	0800636c 	.word	0x0800636c
 8005468:	ffff0001 	.word	0xffff0001

0800546c <_fwalk_reent>:
 800546c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005470:	4606      	mov	r6, r0
 8005472:	4688      	mov	r8, r1
 8005474:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005478:	2700      	movs	r7, #0
 800547a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800547e:	f1b9 0901 	subs.w	r9, r9, #1
 8005482:	d505      	bpl.n	8005490 <_fwalk_reent+0x24>
 8005484:	6824      	ldr	r4, [r4, #0]
 8005486:	2c00      	cmp	r4, #0
 8005488:	d1f7      	bne.n	800547a <_fwalk_reent+0xe>
 800548a:	4638      	mov	r0, r7
 800548c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005490:	89ab      	ldrh	r3, [r5, #12]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d907      	bls.n	80054a6 <_fwalk_reent+0x3a>
 8005496:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800549a:	3301      	adds	r3, #1
 800549c:	d003      	beq.n	80054a6 <_fwalk_reent+0x3a>
 800549e:	4629      	mov	r1, r5
 80054a0:	4630      	mov	r0, r6
 80054a2:	47c0      	blx	r8
 80054a4:	4307      	orrs	r7, r0
 80054a6:	3568      	adds	r5, #104	; 0x68
 80054a8:	e7e9      	b.n	800547e <_fwalk_reent+0x12>

080054aa <__retarget_lock_init_recursive>:
 80054aa:	4770      	bx	lr

080054ac <__retarget_lock_acquire_recursive>:
 80054ac:	4770      	bx	lr

080054ae <__retarget_lock_release_recursive>:
 80054ae:	4770      	bx	lr

080054b0 <_malloc_r>:
 80054b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b2:	1ccd      	adds	r5, r1, #3
 80054b4:	f025 0503 	bic.w	r5, r5, #3
 80054b8:	3508      	adds	r5, #8
 80054ba:	2d0c      	cmp	r5, #12
 80054bc:	bf38      	it	cc
 80054be:	250c      	movcc	r5, #12
 80054c0:	2d00      	cmp	r5, #0
 80054c2:	4606      	mov	r6, r0
 80054c4:	db01      	blt.n	80054ca <_malloc_r+0x1a>
 80054c6:	42a9      	cmp	r1, r5
 80054c8:	d903      	bls.n	80054d2 <_malloc_r+0x22>
 80054ca:	230c      	movs	r3, #12
 80054cc:	6033      	str	r3, [r6, #0]
 80054ce:	2000      	movs	r0, #0
 80054d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054d2:	f000 fd91 	bl	8005ff8 <__malloc_lock>
 80054d6:	4921      	ldr	r1, [pc, #132]	; (800555c <_malloc_r+0xac>)
 80054d8:	680a      	ldr	r2, [r1, #0]
 80054da:	4614      	mov	r4, r2
 80054dc:	b99c      	cbnz	r4, 8005506 <_malloc_r+0x56>
 80054de:	4f20      	ldr	r7, [pc, #128]	; (8005560 <_malloc_r+0xb0>)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	b923      	cbnz	r3, 80054ee <_malloc_r+0x3e>
 80054e4:	4621      	mov	r1, r4
 80054e6:	4630      	mov	r0, r6
 80054e8:	f000 fb2a 	bl	8005b40 <_sbrk_r>
 80054ec:	6038      	str	r0, [r7, #0]
 80054ee:	4629      	mov	r1, r5
 80054f0:	4630      	mov	r0, r6
 80054f2:	f000 fb25 	bl	8005b40 <_sbrk_r>
 80054f6:	1c43      	adds	r3, r0, #1
 80054f8:	d123      	bne.n	8005542 <_malloc_r+0x92>
 80054fa:	230c      	movs	r3, #12
 80054fc:	6033      	str	r3, [r6, #0]
 80054fe:	4630      	mov	r0, r6
 8005500:	f000 fd80 	bl	8006004 <__malloc_unlock>
 8005504:	e7e3      	b.n	80054ce <_malloc_r+0x1e>
 8005506:	6823      	ldr	r3, [r4, #0]
 8005508:	1b5b      	subs	r3, r3, r5
 800550a:	d417      	bmi.n	800553c <_malloc_r+0x8c>
 800550c:	2b0b      	cmp	r3, #11
 800550e:	d903      	bls.n	8005518 <_malloc_r+0x68>
 8005510:	6023      	str	r3, [r4, #0]
 8005512:	441c      	add	r4, r3
 8005514:	6025      	str	r5, [r4, #0]
 8005516:	e004      	b.n	8005522 <_malloc_r+0x72>
 8005518:	6863      	ldr	r3, [r4, #4]
 800551a:	42a2      	cmp	r2, r4
 800551c:	bf0c      	ite	eq
 800551e:	600b      	streq	r3, [r1, #0]
 8005520:	6053      	strne	r3, [r2, #4]
 8005522:	4630      	mov	r0, r6
 8005524:	f000 fd6e 	bl	8006004 <__malloc_unlock>
 8005528:	f104 000b 	add.w	r0, r4, #11
 800552c:	1d23      	adds	r3, r4, #4
 800552e:	f020 0007 	bic.w	r0, r0, #7
 8005532:	1ac2      	subs	r2, r0, r3
 8005534:	d0cc      	beq.n	80054d0 <_malloc_r+0x20>
 8005536:	1a1b      	subs	r3, r3, r0
 8005538:	50a3      	str	r3, [r4, r2]
 800553a:	e7c9      	b.n	80054d0 <_malloc_r+0x20>
 800553c:	4622      	mov	r2, r4
 800553e:	6864      	ldr	r4, [r4, #4]
 8005540:	e7cc      	b.n	80054dc <_malloc_r+0x2c>
 8005542:	1cc4      	adds	r4, r0, #3
 8005544:	f024 0403 	bic.w	r4, r4, #3
 8005548:	42a0      	cmp	r0, r4
 800554a:	d0e3      	beq.n	8005514 <_malloc_r+0x64>
 800554c:	1a21      	subs	r1, r4, r0
 800554e:	4630      	mov	r0, r6
 8005550:	f000 faf6 	bl	8005b40 <_sbrk_r>
 8005554:	3001      	adds	r0, #1
 8005556:	d1dd      	bne.n	8005514 <_malloc_r+0x64>
 8005558:	e7cf      	b.n	80054fa <_malloc_r+0x4a>
 800555a:	bf00      	nop
 800555c:	2000cf88 	.word	0x2000cf88
 8005560:	2000cf8c 	.word	0x2000cf8c

08005564 <__sfputc_r>:
 8005564:	6893      	ldr	r3, [r2, #8]
 8005566:	3b01      	subs	r3, #1
 8005568:	2b00      	cmp	r3, #0
 800556a:	b410      	push	{r4}
 800556c:	6093      	str	r3, [r2, #8]
 800556e:	da08      	bge.n	8005582 <__sfputc_r+0x1e>
 8005570:	6994      	ldr	r4, [r2, #24]
 8005572:	42a3      	cmp	r3, r4
 8005574:	db01      	blt.n	800557a <__sfputc_r+0x16>
 8005576:	290a      	cmp	r1, #10
 8005578:	d103      	bne.n	8005582 <__sfputc_r+0x1e>
 800557a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800557e:	f000 bb33 	b.w	8005be8 <__swbuf_r>
 8005582:	6813      	ldr	r3, [r2, #0]
 8005584:	1c58      	adds	r0, r3, #1
 8005586:	6010      	str	r0, [r2, #0]
 8005588:	7019      	strb	r1, [r3, #0]
 800558a:	4608      	mov	r0, r1
 800558c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005590:	4770      	bx	lr

08005592 <__sfputs_r>:
 8005592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005594:	4606      	mov	r6, r0
 8005596:	460f      	mov	r7, r1
 8005598:	4614      	mov	r4, r2
 800559a:	18d5      	adds	r5, r2, r3
 800559c:	42ac      	cmp	r4, r5
 800559e:	d101      	bne.n	80055a4 <__sfputs_r+0x12>
 80055a0:	2000      	movs	r0, #0
 80055a2:	e007      	b.n	80055b4 <__sfputs_r+0x22>
 80055a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055a8:	463a      	mov	r2, r7
 80055aa:	4630      	mov	r0, r6
 80055ac:	f7ff ffda 	bl	8005564 <__sfputc_r>
 80055b0:	1c43      	adds	r3, r0, #1
 80055b2:	d1f3      	bne.n	800559c <__sfputs_r+0xa>
 80055b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055b8 <_vfiprintf_r>:
 80055b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055bc:	460d      	mov	r5, r1
 80055be:	b09d      	sub	sp, #116	; 0x74
 80055c0:	4614      	mov	r4, r2
 80055c2:	4698      	mov	r8, r3
 80055c4:	4606      	mov	r6, r0
 80055c6:	b118      	cbz	r0, 80055d0 <_vfiprintf_r+0x18>
 80055c8:	6983      	ldr	r3, [r0, #24]
 80055ca:	b90b      	cbnz	r3, 80055d0 <_vfiprintf_r+0x18>
 80055cc:	f7ff fed0 	bl	8005370 <__sinit>
 80055d0:	4b89      	ldr	r3, [pc, #548]	; (80057f8 <_vfiprintf_r+0x240>)
 80055d2:	429d      	cmp	r5, r3
 80055d4:	d11b      	bne.n	800560e <_vfiprintf_r+0x56>
 80055d6:	6875      	ldr	r5, [r6, #4]
 80055d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055da:	07d9      	lsls	r1, r3, #31
 80055dc:	d405      	bmi.n	80055ea <_vfiprintf_r+0x32>
 80055de:	89ab      	ldrh	r3, [r5, #12]
 80055e0:	059a      	lsls	r2, r3, #22
 80055e2:	d402      	bmi.n	80055ea <_vfiprintf_r+0x32>
 80055e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055e6:	f7ff ff61 	bl	80054ac <__retarget_lock_acquire_recursive>
 80055ea:	89ab      	ldrh	r3, [r5, #12]
 80055ec:	071b      	lsls	r3, r3, #28
 80055ee:	d501      	bpl.n	80055f4 <_vfiprintf_r+0x3c>
 80055f0:	692b      	ldr	r3, [r5, #16]
 80055f2:	b9eb      	cbnz	r3, 8005630 <_vfiprintf_r+0x78>
 80055f4:	4629      	mov	r1, r5
 80055f6:	4630      	mov	r0, r6
 80055f8:	f000 fb48 	bl	8005c8c <__swsetup_r>
 80055fc:	b1c0      	cbz	r0, 8005630 <_vfiprintf_r+0x78>
 80055fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005600:	07dc      	lsls	r4, r3, #31
 8005602:	d50e      	bpl.n	8005622 <_vfiprintf_r+0x6a>
 8005604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005608:	b01d      	add	sp, #116	; 0x74
 800560a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800560e:	4b7b      	ldr	r3, [pc, #492]	; (80057fc <_vfiprintf_r+0x244>)
 8005610:	429d      	cmp	r5, r3
 8005612:	d101      	bne.n	8005618 <_vfiprintf_r+0x60>
 8005614:	68b5      	ldr	r5, [r6, #8]
 8005616:	e7df      	b.n	80055d8 <_vfiprintf_r+0x20>
 8005618:	4b79      	ldr	r3, [pc, #484]	; (8005800 <_vfiprintf_r+0x248>)
 800561a:	429d      	cmp	r5, r3
 800561c:	bf08      	it	eq
 800561e:	68f5      	ldreq	r5, [r6, #12]
 8005620:	e7da      	b.n	80055d8 <_vfiprintf_r+0x20>
 8005622:	89ab      	ldrh	r3, [r5, #12]
 8005624:	0598      	lsls	r0, r3, #22
 8005626:	d4ed      	bmi.n	8005604 <_vfiprintf_r+0x4c>
 8005628:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800562a:	f7ff ff40 	bl	80054ae <__retarget_lock_release_recursive>
 800562e:	e7e9      	b.n	8005604 <_vfiprintf_r+0x4c>
 8005630:	2300      	movs	r3, #0
 8005632:	9309      	str	r3, [sp, #36]	; 0x24
 8005634:	2320      	movs	r3, #32
 8005636:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800563a:	f8cd 800c 	str.w	r8, [sp, #12]
 800563e:	2330      	movs	r3, #48	; 0x30
 8005640:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005804 <_vfiprintf_r+0x24c>
 8005644:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005648:	f04f 0901 	mov.w	r9, #1
 800564c:	4623      	mov	r3, r4
 800564e:	469a      	mov	sl, r3
 8005650:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005654:	b10a      	cbz	r2, 800565a <_vfiprintf_r+0xa2>
 8005656:	2a25      	cmp	r2, #37	; 0x25
 8005658:	d1f9      	bne.n	800564e <_vfiprintf_r+0x96>
 800565a:	ebba 0b04 	subs.w	fp, sl, r4
 800565e:	d00b      	beq.n	8005678 <_vfiprintf_r+0xc0>
 8005660:	465b      	mov	r3, fp
 8005662:	4622      	mov	r2, r4
 8005664:	4629      	mov	r1, r5
 8005666:	4630      	mov	r0, r6
 8005668:	f7ff ff93 	bl	8005592 <__sfputs_r>
 800566c:	3001      	adds	r0, #1
 800566e:	f000 80aa 	beq.w	80057c6 <_vfiprintf_r+0x20e>
 8005672:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005674:	445a      	add	r2, fp
 8005676:	9209      	str	r2, [sp, #36]	; 0x24
 8005678:	f89a 3000 	ldrb.w	r3, [sl]
 800567c:	2b00      	cmp	r3, #0
 800567e:	f000 80a2 	beq.w	80057c6 <_vfiprintf_r+0x20e>
 8005682:	2300      	movs	r3, #0
 8005684:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005688:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800568c:	f10a 0a01 	add.w	sl, sl, #1
 8005690:	9304      	str	r3, [sp, #16]
 8005692:	9307      	str	r3, [sp, #28]
 8005694:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005698:	931a      	str	r3, [sp, #104]	; 0x68
 800569a:	4654      	mov	r4, sl
 800569c:	2205      	movs	r2, #5
 800569e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056a2:	4858      	ldr	r0, [pc, #352]	; (8005804 <_vfiprintf_r+0x24c>)
 80056a4:	f7fa fe04 	bl	80002b0 <memchr>
 80056a8:	9a04      	ldr	r2, [sp, #16]
 80056aa:	b9d8      	cbnz	r0, 80056e4 <_vfiprintf_r+0x12c>
 80056ac:	06d1      	lsls	r1, r2, #27
 80056ae:	bf44      	itt	mi
 80056b0:	2320      	movmi	r3, #32
 80056b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056b6:	0713      	lsls	r3, r2, #28
 80056b8:	bf44      	itt	mi
 80056ba:	232b      	movmi	r3, #43	; 0x2b
 80056bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056c0:	f89a 3000 	ldrb.w	r3, [sl]
 80056c4:	2b2a      	cmp	r3, #42	; 0x2a
 80056c6:	d015      	beq.n	80056f4 <_vfiprintf_r+0x13c>
 80056c8:	9a07      	ldr	r2, [sp, #28]
 80056ca:	4654      	mov	r4, sl
 80056cc:	2000      	movs	r0, #0
 80056ce:	f04f 0c0a 	mov.w	ip, #10
 80056d2:	4621      	mov	r1, r4
 80056d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056d8:	3b30      	subs	r3, #48	; 0x30
 80056da:	2b09      	cmp	r3, #9
 80056dc:	d94e      	bls.n	800577c <_vfiprintf_r+0x1c4>
 80056de:	b1b0      	cbz	r0, 800570e <_vfiprintf_r+0x156>
 80056e0:	9207      	str	r2, [sp, #28]
 80056e2:	e014      	b.n	800570e <_vfiprintf_r+0x156>
 80056e4:	eba0 0308 	sub.w	r3, r0, r8
 80056e8:	fa09 f303 	lsl.w	r3, r9, r3
 80056ec:	4313      	orrs	r3, r2
 80056ee:	9304      	str	r3, [sp, #16]
 80056f0:	46a2      	mov	sl, r4
 80056f2:	e7d2      	b.n	800569a <_vfiprintf_r+0xe2>
 80056f4:	9b03      	ldr	r3, [sp, #12]
 80056f6:	1d19      	adds	r1, r3, #4
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	9103      	str	r1, [sp, #12]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	bfbb      	ittet	lt
 8005700:	425b      	neglt	r3, r3
 8005702:	f042 0202 	orrlt.w	r2, r2, #2
 8005706:	9307      	strge	r3, [sp, #28]
 8005708:	9307      	strlt	r3, [sp, #28]
 800570a:	bfb8      	it	lt
 800570c:	9204      	strlt	r2, [sp, #16]
 800570e:	7823      	ldrb	r3, [r4, #0]
 8005710:	2b2e      	cmp	r3, #46	; 0x2e
 8005712:	d10c      	bne.n	800572e <_vfiprintf_r+0x176>
 8005714:	7863      	ldrb	r3, [r4, #1]
 8005716:	2b2a      	cmp	r3, #42	; 0x2a
 8005718:	d135      	bne.n	8005786 <_vfiprintf_r+0x1ce>
 800571a:	9b03      	ldr	r3, [sp, #12]
 800571c:	1d1a      	adds	r2, r3, #4
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	9203      	str	r2, [sp, #12]
 8005722:	2b00      	cmp	r3, #0
 8005724:	bfb8      	it	lt
 8005726:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800572a:	3402      	adds	r4, #2
 800572c:	9305      	str	r3, [sp, #20]
 800572e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005814 <_vfiprintf_r+0x25c>
 8005732:	7821      	ldrb	r1, [r4, #0]
 8005734:	2203      	movs	r2, #3
 8005736:	4650      	mov	r0, sl
 8005738:	f7fa fdba 	bl	80002b0 <memchr>
 800573c:	b140      	cbz	r0, 8005750 <_vfiprintf_r+0x198>
 800573e:	2340      	movs	r3, #64	; 0x40
 8005740:	eba0 000a 	sub.w	r0, r0, sl
 8005744:	fa03 f000 	lsl.w	r0, r3, r0
 8005748:	9b04      	ldr	r3, [sp, #16]
 800574a:	4303      	orrs	r3, r0
 800574c:	3401      	adds	r4, #1
 800574e:	9304      	str	r3, [sp, #16]
 8005750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005754:	482c      	ldr	r0, [pc, #176]	; (8005808 <_vfiprintf_r+0x250>)
 8005756:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800575a:	2206      	movs	r2, #6
 800575c:	f7fa fda8 	bl	80002b0 <memchr>
 8005760:	2800      	cmp	r0, #0
 8005762:	d03f      	beq.n	80057e4 <_vfiprintf_r+0x22c>
 8005764:	4b29      	ldr	r3, [pc, #164]	; (800580c <_vfiprintf_r+0x254>)
 8005766:	bb1b      	cbnz	r3, 80057b0 <_vfiprintf_r+0x1f8>
 8005768:	9b03      	ldr	r3, [sp, #12]
 800576a:	3307      	adds	r3, #7
 800576c:	f023 0307 	bic.w	r3, r3, #7
 8005770:	3308      	adds	r3, #8
 8005772:	9303      	str	r3, [sp, #12]
 8005774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005776:	443b      	add	r3, r7
 8005778:	9309      	str	r3, [sp, #36]	; 0x24
 800577a:	e767      	b.n	800564c <_vfiprintf_r+0x94>
 800577c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005780:	460c      	mov	r4, r1
 8005782:	2001      	movs	r0, #1
 8005784:	e7a5      	b.n	80056d2 <_vfiprintf_r+0x11a>
 8005786:	2300      	movs	r3, #0
 8005788:	3401      	adds	r4, #1
 800578a:	9305      	str	r3, [sp, #20]
 800578c:	4619      	mov	r1, r3
 800578e:	f04f 0c0a 	mov.w	ip, #10
 8005792:	4620      	mov	r0, r4
 8005794:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005798:	3a30      	subs	r2, #48	; 0x30
 800579a:	2a09      	cmp	r2, #9
 800579c:	d903      	bls.n	80057a6 <_vfiprintf_r+0x1ee>
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0c5      	beq.n	800572e <_vfiprintf_r+0x176>
 80057a2:	9105      	str	r1, [sp, #20]
 80057a4:	e7c3      	b.n	800572e <_vfiprintf_r+0x176>
 80057a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80057aa:	4604      	mov	r4, r0
 80057ac:	2301      	movs	r3, #1
 80057ae:	e7f0      	b.n	8005792 <_vfiprintf_r+0x1da>
 80057b0:	ab03      	add	r3, sp, #12
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	462a      	mov	r2, r5
 80057b6:	4b16      	ldr	r3, [pc, #88]	; (8005810 <_vfiprintf_r+0x258>)
 80057b8:	a904      	add	r1, sp, #16
 80057ba:	4630      	mov	r0, r6
 80057bc:	f3af 8000 	nop.w
 80057c0:	4607      	mov	r7, r0
 80057c2:	1c78      	adds	r0, r7, #1
 80057c4:	d1d6      	bne.n	8005774 <_vfiprintf_r+0x1bc>
 80057c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057c8:	07d9      	lsls	r1, r3, #31
 80057ca:	d405      	bmi.n	80057d8 <_vfiprintf_r+0x220>
 80057cc:	89ab      	ldrh	r3, [r5, #12]
 80057ce:	059a      	lsls	r2, r3, #22
 80057d0:	d402      	bmi.n	80057d8 <_vfiprintf_r+0x220>
 80057d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057d4:	f7ff fe6b 	bl	80054ae <__retarget_lock_release_recursive>
 80057d8:	89ab      	ldrh	r3, [r5, #12]
 80057da:	065b      	lsls	r3, r3, #25
 80057dc:	f53f af12 	bmi.w	8005604 <_vfiprintf_r+0x4c>
 80057e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057e2:	e711      	b.n	8005608 <_vfiprintf_r+0x50>
 80057e4:	ab03      	add	r3, sp, #12
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	462a      	mov	r2, r5
 80057ea:	4b09      	ldr	r3, [pc, #36]	; (8005810 <_vfiprintf_r+0x258>)
 80057ec:	a904      	add	r1, sp, #16
 80057ee:	4630      	mov	r0, r6
 80057f0:	f000 f880 	bl	80058f4 <_printf_i>
 80057f4:	e7e4      	b.n	80057c0 <_vfiprintf_r+0x208>
 80057f6:	bf00      	nop
 80057f8:	08006390 	.word	0x08006390
 80057fc:	080063b0 	.word	0x080063b0
 8005800:	08006370 	.word	0x08006370
 8005804:	080063d0 	.word	0x080063d0
 8005808:	080063da 	.word	0x080063da
 800580c:	00000000 	.word	0x00000000
 8005810:	08005593 	.word	0x08005593
 8005814:	080063d6 	.word	0x080063d6

08005818 <_printf_common>:
 8005818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800581c:	4616      	mov	r6, r2
 800581e:	4699      	mov	r9, r3
 8005820:	688a      	ldr	r2, [r1, #8]
 8005822:	690b      	ldr	r3, [r1, #16]
 8005824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005828:	4293      	cmp	r3, r2
 800582a:	bfb8      	it	lt
 800582c:	4613      	movlt	r3, r2
 800582e:	6033      	str	r3, [r6, #0]
 8005830:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005834:	4607      	mov	r7, r0
 8005836:	460c      	mov	r4, r1
 8005838:	b10a      	cbz	r2, 800583e <_printf_common+0x26>
 800583a:	3301      	adds	r3, #1
 800583c:	6033      	str	r3, [r6, #0]
 800583e:	6823      	ldr	r3, [r4, #0]
 8005840:	0699      	lsls	r1, r3, #26
 8005842:	bf42      	ittt	mi
 8005844:	6833      	ldrmi	r3, [r6, #0]
 8005846:	3302      	addmi	r3, #2
 8005848:	6033      	strmi	r3, [r6, #0]
 800584a:	6825      	ldr	r5, [r4, #0]
 800584c:	f015 0506 	ands.w	r5, r5, #6
 8005850:	d106      	bne.n	8005860 <_printf_common+0x48>
 8005852:	f104 0a19 	add.w	sl, r4, #25
 8005856:	68e3      	ldr	r3, [r4, #12]
 8005858:	6832      	ldr	r2, [r6, #0]
 800585a:	1a9b      	subs	r3, r3, r2
 800585c:	42ab      	cmp	r3, r5
 800585e:	dc26      	bgt.n	80058ae <_printf_common+0x96>
 8005860:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005864:	1e13      	subs	r3, r2, #0
 8005866:	6822      	ldr	r2, [r4, #0]
 8005868:	bf18      	it	ne
 800586a:	2301      	movne	r3, #1
 800586c:	0692      	lsls	r2, r2, #26
 800586e:	d42b      	bmi.n	80058c8 <_printf_common+0xb0>
 8005870:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005874:	4649      	mov	r1, r9
 8005876:	4638      	mov	r0, r7
 8005878:	47c0      	blx	r8
 800587a:	3001      	adds	r0, #1
 800587c:	d01e      	beq.n	80058bc <_printf_common+0xa4>
 800587e:	6823      	ldr	r3, [r4, #0]
 8005880:	68e5      	ldr	r5, [r4, #12]
 8005882:	6832      	ldr	r2, [r6, #0]
 8005884:	f003 0306 	and.w	r3, r3, #6
 8005888:	2b04      	cmp	r3, #4
 800588a:	bf08      	it	eq
 800588c:	1aad      	subeq	r5, r5, r2
 800588e:	68a3      	ldr	r3, [r4, #8]
 8005890:	6922      	ldr	r2, [r4, #16]
 8005892:	bf0c      	ite	eq
 8005894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005898:	2500      	movne	r5, #0
 800589a:	4293      	cmp	r3, r2
 800589c:	bfc4      	itt	gt
 800589e:	1a9b      	subgt	r3, r3, r2
 80058a0:	18ed      	addgt	r5, r5, r3
 80058a2:	2600      	movs	r6, #0
 80058a4:	341a      	adds	r4, #26
 80058a6:	42b5      	cmp	r5, r6
 80058a8:	d11a      	bne.n	80058e0 <_printf_common+0xc8>
 80058aa:	2000      	movs	r0, #0
 80058ac:	e008      	b.n	80058c0 <_printf_common+0xa8>
 80058ae:	2301      	movs	r3, #1
 80058b0:	4652      	mov	r2, sl
 80058b2:	4649      	mov	r1, r9
 80058b4:	4638      	mov	r0, r7
 80058b6:	47c0      	blx	r8
 80058b8:	3001      	adds	r0, #1
 80058ba:	d103      	bne.n	80058c4 <_printf_common+0xac>
 80058bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058c4:	3501      	adds	r5, #1
 80058c6:	e7c6      	b.n	8005856 <_printf_common+0x3e>
 80058c8:	18e1      	adds	r1, r4, r3
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	2030      	movs	r0, #48	; 0x30
 80058ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058d2:	4422      	add	r2, r4
 80058d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058dc:	3302      	adds	r3, #2
 80058de:	e7c7      	b.n	8005870 <_printf_common+0x58>
 80058e0:	2301      	movs	r3, #1
 80058e2:	4622      	mov	r2, r4
 80058e4:	4649      	mov	r1, r9
 80058e6:	4638      	mov	r0, r7
 80058e8:	47c0      	blx	r8
 80058ea:	3001      	adds	r0, #1
 80058ec:	d0e6      	beq.n	80058bc <_printf_common+0xa4>
 80058ee:	3601      	adds	r6, #1
 80058f0:	e7d9      	b.n	80058a6 <_printf_common+0x8e>
	...

080058f4 <_printf_i>:
 80058f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058f8:	460c      	mov	r4, r1
 80058fa:	4691      	mov	r9, r2
 80058fc:	7e27      	ldrb	r7, [r4, #24]
 80058fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005900:	2f78      	cmp	r7, #120	; 0x78
 8005902:	4680      	mov	r8, r0
 8005904:	469a      	mov	sl, r3
 8005906:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800590a:	d807      	bhi.n	800591c <_printf_i+0x28>
 800590c:	2f62      	cmp	r7, #98	; 0x62
 800590e:	d80a      	bhi.n	8005926 <_printf_i+0x32>
 8005910:	2f00      	cmp	r7, #0
 8005912:	f000 80d8 	beq.w	8005ac6 <_printf_i+0x1d2>
 8005916:	2f58      	cmp	r7, #88	; 0x58
 8005918:	f000 80a3 	beq.w	8005a62 <_printf_i+0x16e>
 800591c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005920:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005924:	e03a      	b.n	800599c <_printf_i+0xa8>
 8005926:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800592a:	2b15      	cmp	r3, #21
 800592c:	d8f6      	bhi.n	800591c <_printf_i+0x28>
 800592e:	a001      	add	r0, pc, #4	; (adr r0, 8005934 <_printf_i+0x40>)
 8005930:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005934:	0800598d 	.word	0x0800598d
 8005938:	080059a1 	.word	0x080059a1
 800593c:	0800591d 	.word	0x0800591d
 8005940:	0800591d 	.word	0x0800591d
 8005944:	0800591d 	.word	0x0800591d
 8005948:	0800591d 	.word	0x0800591d
 800594c:	080059a1 	.word	0x080059a1
 8005950:	0800591d 	.word	0x0800591d
 8005954:	0800591d 	.word	0x0800591d
 8005958:	0800591d 	.word	0x0800591d
 800595c:	0800591d 	.word	0x0800591d
 8005960:	08005aad 	.word	0x08005aad
 8005964:	080059d1 	.word	0x080059d1
 8005968:	08005a8f 	.word	0x08005a8f
 800596c:	0800591d 	.word	0x0800591d
 8005970:	0800591d 	.word	0x0800591d
 8005974:	08005acf 	.word	0x08005acf
 8005978:	0800591d 	.word	0x0800591d
 800597c:	080059d1 	.word	0x080059d1
 8005980:	0800591d 	.word	0x0800591d
 8005984:	0800591d 	.word	0x0800591d
 8005988:	08005a97 	.word	0x08005a97
 800598c:	680b      	ldr	r3, [r1, #0]
 800598e:	1d1a      	adds	r2, r3, #4
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	600a      	str	r2, [r1, #0]
 8005994:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005998:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800599c:	2301      	movs	r3, #1
 800599e:	e0a3      	b.n	8005ae8 <_printf_i+0x1f4>
 80059a0:	6825      	ldr	r5, [r4, #0]
 80059a2:	6808      	ldr	r0, [r1, #0]
 80059a4:	062e      	lsls	r6, r5, #24
 80059a6:	f100 0304 	add.w	r3, r0, #4
 80059aa:	d50a      	bpl.n	80059c2 <_printf_i+0xce>
 80059ac:	6805      	ldr	r5, [r0, #0]
 80059ae:	600b      	str	r3, [r1, #0]
 80059b0:	2d00      	cmp	r5, #0
 80059b2:	da03      	bge.n	80059bc <_printf_i+0xc8>
 80059b4:	232d      	movs	r3, #45	; 0x2d
 80059b6:	426d      	negs	r5, r5
 80059b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059bc:	485e      	ldr	r0, [pc, #376]	; (8005b38 <_printf_i+0x244>)
 80059be:	230a      	movs	r3, #10
 80059c0:	e019      	b.n	80059f6 <_printf_i+0x102>
 80059c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80059c6:	6805      	ldr	r5, [r0, #0]
 80059c8:	600b      	str	r3, [r1, #0]
 80059ca:	bf18      	it	ne
 80059cc:	b22d      	sxthne	r5, r5
 80059ce:	e7ef      	b.n	80059b0 <_printf_i+0xbc>
 80059d0:	680b      	ldr	r3, [r1, #0]
 80059d2:	6825      	ldr	r5, [r4, #0]
 80059d4:	1d18      	adds	r0, r3, #4
 80059d6:	6008      	str	r0, [r1, #0]
 80059d8:	0628      	lsls	r0, r5, #24
 80059da:	d501      	bpl.n	80059e0 <_printf_i+0xec>
 80059dc:	681d      	ldr	r5, [r3, #0]
 80059de:	e002      	b.n	80059e6 <_printf_i+0xf2>
 80059e0:	0669      	lsls	r1, r5, #25
 80059e2:	d5fb      	bpl.n	80059dc <_printf_i+0xe8>
 80059e4:	881d      	ldrh	r5, [r3, #0]
 80059e6:	4854      	ldr	r0, [pc, #336]	; (8005b38 <_printf_i+0x244>)
 80059e8:	2f6f      	cmp	r7, #111	; 0x6f
 80059ea:	bf0c      	ite	eq
 80059ec:	2308      	moveq	r3, #8
 80059ee:	230a      	movne	r3, #10
 80059f0:	2100      	movs	r1, #0
 80059f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059f6:	6866      	ldr	r6, [r4, #4]
 80059f8:	60a6      	str	r6, [r4, #8]
 80059fa:	2e00      	cmp	r6, #0
 80059fc:	bfa2      	ittt	ge
 80059fe:	6821      	ldrge	r1, [r4, #0]
 8005a00:	f021 0104 	bicge.w	r1, r1, #4
 8005a04:	6021      	strge	r1, [r4, #0]
 8005a06:	b90d      	cbnz	r5, 8005a0c <_printf_i+0x118>
 8005a08:	2e00      	cmp	r6, #0
 8005a0a:	d04d      	beq.n	8005aa8 <_printf_i+0x1b4>
 8005a0c:	4616      	mov	r6, r2
 8005a0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a12:	fb03 5711 	mls	r7, r3, r1, r5
 8005a16:	5dc7      	ldrb	r7, [r0, r7]
 8005a18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a1c:	462f      	mov	r7, r5
 8005a1e:	42bb      	cmp	r3, r7
 8005a20:	460d      	mov	r5, r1
 8005a22:	d9f4      	bls.n	8005a0e <_printf_i+0x11a>
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d10b      	bne.n	8005a40 <_printf_i+0x14c>
 8005a28:	6823      	ldr	r3, [r4, #0]
 8005a2a:	07df      	lsls	r7, r3, #31
 8005a2c:	d508      	bpl.n	8005a40 <_printf_i+0x14c>
 8005a2e:	6923      	ldr	r3, [r4, #16]
 8005a30:	6861      	ldr	r1, [r4, #4]
 8005a32:	4299      	cmp	r1, r3
 8005a34:	bfde      	ittt	le
 8005a36:	2330      	movle	r3, #48	; 0x30
 8005a38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a3c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005a40:	1b92      	subs	r2, r2, r6
 8005a42:	6122      	str	r2, [r4, #16]
 8005a44:	f8cd a000 	str.w	sl, [sp]
 8005a48:	464b      	mov	r3, r9
 8005a4a:	aa03      	add	r2, sp, #12
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	4640      	mov	r0, r8
 8005a50:	f7ff fee2 	bl	8005818 <_printf_common>
 8005a54:	3001      	adds	r0, #1
 8005a56:	d14c      	bne.n	8005af2 <_printf_i+0x1fe>
 8005a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a5c:	b004      	add	sp, #16
 8005a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a62:	4835      	ldr	r0, [pc, #212]	; (8005b38 <_printf_i+0x244>)
 8005a64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	680e      	ldr	r6, [r1, #0]
 8005a6c:	061f      	lsls	r7, r3, #24
 8005a6e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005a72:	600e      	str	r6, [r1, #0]
 8005a74:	d514      	bpl.n	8005aa0 <_printf_i+0x1ac>
 8005a76:	07d9      	lsls	r1, r3, #31
 8005a78:	bf44      	itt	mi
 8005a7a:	f043 0320 	orrmi.w	r3, r3, #32
 8005a7e:	6023      	strmi	r3, [r4, #0]
 8005a80:	b91d      	cbnz	r5, 8005a8a <_printf_i+0x196>
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	f023 0320 	bic.w	r3, r3, #32
 8005a88:	6023      	str	r3, [r4, #0]
 8005a8a:	2310      	movs	r3, #16
 8005a8c:	e7b0      	b.n	80059f0 <_printf_i+0xfc>
 8005a8e:	6823      	ldr	r3, [r4, #0]
 8005a90:	f043 0320 	orr.w	r3, r3, #32
 8005a94:	6023      	str	r3, [r4, #0]
 8005a96:	2378      	movs	r3, #120	; 0x78
 8005a98:	4828      	ldr	r0, [pc, #160]	; (8005b3c <_printf_i+0x248>)
 8005a9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a9e:	e7e3      	b.n	8005a68 <_printf_i+0x174>
 8005aa0:	065e      	lsls	r6, r3, #25
 8005aa2:	bf48      	it	mi
 8005aa4:	b2ad      	uxthmi	r5, r5
 8005aa6:	e7e6      	b.n	8005a76 <_printf_i+0x182>
 8005aa8:	4616      	mov	r6, r2
 8005aaa:	e7bb      	b.n	8005a24 <_printf_i+0x130>
 8005aac:	680b      	ldr	r3, [r1, #0]
 8005aae:	6826      	ldr	r6, [r4, #0]
 8005ab0:	6960      	ldr	r0, [r4, #20]
 8005ab2:	1d1d      	adds	r5, r3, #4
 8005ab4:	600d      	str	r5, [r1, #0]
 8005ab6:	0635      	lsls	r5, r6, #24
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	d501      	bpl.n	8005ac0 <_printf_i+0x1cc>
 8005abc:	6018      	str	r0, [r3, #0]
 8005abe:	e002      	b.n	8005ac6 <_printf_i+0x1d2>
 8005ac0:	0671      	lsls	r1, r6, #25
 8005ac2:	d5fb      	bpl.n	8005abc <_printf_i+0x1c8>
 8005ac4:	8018      	strh	r0, [r3, #0]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	6123      	str	r3, [r4, #16]
 8005aca:	4616      	mov	r6, r2
 8005acc:	e7ba      	b.n	8005a44 <_printf_i+0x150>
 8005ace:	680b      	ldr	r3, [r1, #0]
 8005ad0:	1d1a      	adds	r2, r3, #4
 8005ad2:	600a      	str	r2, [r1, #0]
 8005ad4:	681e      	ldr	r6, [r3, #0]
 8005ad6:	6862      	ldr	r2, [r4, #4]
 8005ad8:	2100      	movs	r1, #0
 8005ada:	4630      	mov	r0, r6
 8005adc:	f7fa fbe8 	bl	80002b0 <memchr>
 8005ae0:	b108      	cbz	r0, 8005ae6 <_printf_i+0x1f2>
 8005ae2:	1b80      	subs	r0, r0, r6
 8005ae4:	6060      	str	r0, [r4, #4]
 8005ae6:	6863      	ldr	r3, [r4, #4]
 8005ae8:	6123      	str	r3, [r4, #16]
 8005aea:	2300      	movs	r3, #0
 8005aec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005af0:	e7a8      	b.n	8005a44 <_printf_i+0x150>
 8005af2:	6923      	ldr	r3, [r4, #16]
 8005af4:	4632      	mov	r2, r6
 8005af6:	4649      	mov	r1, r9
 8005af8:	4640      	mov	r0, r8
 8005afa:	47d0      	blx	sl
 8005afc:	3001      	adds	r0, #1
 8005afe:	d0ab      	beq.n	8005a58 <_printf_i+0x164>
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	079b      	lsls	r3, r3, #30
 8005b04:	d413      	bmi.n	8005b2e <_printf_i+0x23a>
 8005b06:	68e0      	ldr	r0, [r4, #12]
 8005b08:	9b03      	ldr	r3, [sp, #12]
 8005b0a:	4298      	cmp	r0, r3
 8005b0c:	bfb8      	it	lt
 8005b0e:	4618      	movlt	r0, r3
 8005b10:	e7a4      	b.n	8005a5c <_printf_i+0x168>
 8005b12:	2301      	movs	r3, #1
 8005b14:	4632      	mov	r2, r6
 8005b16:	4649      	mov	r1, r9
 8005b18:	4640      	mov	r0, r8
 8005b1a:	47d0      	blx	sl
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	d09b      	beq.n	8005a58 <_printf_i+0x164>
 8005b20:	3501      	adds	r5, #1
 8005b22:	68e3      	ldr	r3, [r4, #12]
 8005b24:	9903      	ldr	r1, [sp, #12]
 8005b26:	1a5b      	subs	r3, r3, r1
 8005b28:	42ab      	cmp	r3, r5
 8005b2a:	dcf2      	bgt.n	8005b12 <_printf_i+0x21e>
 8005b2c:	e7eb      	b.n	8005b06 <_printf_i+0x212>
 8005b2e:	2500      	movs	r5, #0
 8005b30:	f104 0619 	add.w	r6, r4, #25
 8005b34:	e7f5      	b.n	8005b22 <_printf_i+0x22e>
 8005b36:	bf00      	nop
 8005b38:	080063e1 	.word	0x080063e1
 8005b3c:	080063f2 	.word	0x080063f2

08005b40 <_sbrk_r>:
 8005b40:	b538      	push	{r3, r4, r5, lr}
 8005b42:	4d06      	ldr	r5, [pc, #24]	; (8005b5c <_sbrk_r+0x1c>)
 8005b44:	2300      	movs	r3, #0
 8005b46:	4604      	mov	r4, r0
 8005b48:	4608      	mov	r0, r1
 8005b4a:	602b      	str	r3, [r5, #0]
 8005b4c:	f000 fae4 	bl	8006118 <_sbrk>
 8005b50:	1c43      	adds	r3, r0, #1
 8005b52:	d102      	bne.n	8005b5a <_sbrk_r+0x1a>
 8005b54:	682b      	ldr	r3, [r5, #0]
 8005b56:	b103      	cbz	r3, 8005b5a <_sbrk_r+0x1a>
 8005b58:	6023      	str	r3, [r4, #0]
 8005b5a:	bd38      	pop	{r3, r4, r5, pc}
 8005b5c:	2000d0a4 	.word	0x2000d0a4

08005b60 <__sread>:
 8005b60:	b510      	push	{r4, lr}
 8005b62:	460c      	mov	r4, r1
 8005b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b68:	f000 faa2 	bl	80060b0 <_read_r>
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	bfab      	itete	ge
 8005b70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b72:	89a3      	ldrhlt	r3, [r4, #12]
 8005b74:	181b      	addge	r3, r3, r0
 8005b76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b7a:	bfac      	ite	ge
 8005b7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b7e:	81a3      	strhlt	r3, [r4, #12]
 8005b80:	bd10      	pop	{r4, pc}

08005b82 <__swrite>:
 8005b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b86:	461f      	mov	r7, r3
 8005b88:	898b      	ldrh	r3, [r1, #12]
 8005b8a:	05db      	lsls	r3, r3, #23
 8005b8c:	4605      	mov	r5, r0
 8005b8e:	460c      	mov	r4, r1
 8005b90:	4616      	mov	r6, r2
 8005b92:	d505      	bpl.n	8005ba0 <__swrite+0x1e>
 8005b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b98:	2302      	movs	r3, #2
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f000 f9b6 	bl	8005f0c <_lseek_r>
 8005ba0:	89a3      	ldrh	r3, [r4, #12]
 8005ba2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ba6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005baa:	81a3      	strh	r3, [r4, #12]
 8005bac:	4632      	mov	r2, r6
 8005bae:	463b      	mov	r3, r7
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bb6:	f7ff bb11 	b.w	80051dc <_write_r>

08005bba <__sseek>:
 8005bba:	b510      	push	{r4, lr}
 8005bbc:	460c      	mov	r4, r1
 8005bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bc2:	f000 f9a3 	bl	8005f0c <_lseek_r>
 8005bc6:	1c43      	adds	r3, r0, #1
 8005bc8:	89a3      	ldrh	r3, [r4, #12]
 8005bca:	bf15      	itete	ne
 8005bcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8005bce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005bd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005bd6:	81a3      	strheq	r3, [r4, #12]
 8005bd8:	bf18      	it	ne
 8005bda:	81a3      	strhne	r3, [r4, #12]
 8005bdc:	bd10      	pop	{r4, pc}

08005bde <__sclose>:
 8005bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be2:	f000 b8c1 	b.w	8005d68 <_close_r>
	...

08005be8 <__swbuf_r>:
 8005be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bea:	460e      	mov	r6, r1
 8005bec:	4614      	mov	r4, r2
 8005bee:	4605      	mov	r5, r0
 8005bf0:	b118      	cbz	r0, 8005bfa <__swbuf_r+0x12>
 8005bf2:	6983      	ldr	r3, [r0, #24]
 8005bf4:	b90b      	cbnz	r3, 8005bfa <__swbuf_r+0x12>
 8005bf6:	f7ff fbbb 	bl	8005370 <__sinit>
 8005bfa:	4b21      	ldr	r3, [pc, #132]	; (8005c80 <__swbuf_r+0x98>)
 8005bfc:	429c      	cmp	r4, r3
 8005bfe:	d12b      	bne.n	8005c58 <__swbuf_r+0x70>
 8005c00:	686c      	ldr	r4, [r5, #4]
 8005c02:	69a3      	ldr	r3, [r4, #24]
 8005c04:	60a3      	str	r3, [r4, #8]
 8005c06:	89a3      	ldrh	r3, [r4, #12]
 8005c08:	071a      	lsls	r2, r3, #28
 8005c0a:	d52f      	bpl.n	8005c6c <__swbuf_r+0x84>
 8005c0c:	6923      	ldr	r3, [r4, #16]
 8005c0e:	b36b      	cbz	r3, 8005c6c <__swbuf_r+0x84>
 8005c10:	6923      	ldr	r3, [r4, #16]
 8005c12:	6820      	ldr	r0, [r4, #0]
 8005c14:	1ac0      	subs	r0, r0, r3
 8005c16:	6963      	ldr	r3, [r4, #20]
 8005c18:	b2f6      	uxtb	r6, r6
 8005c1a:	4283      	cmp	r3, r0
 8005c1c:	4637      	mov	r7, r6
 8005c1e:	dc04      	bgt.n	8005c2a <__swbuf_r+0x42>
 8005c20:	4621      	mov	r1, r4
 8005c22:	4628      	mov	r0, r5
 8005c24:	f000 f936 	bl	8005e94 <_fflush_r>
 8005c28:	bb30      	cbnz	r0, 8005c78 <__swbuf_r+0x90>
 8005c2a:	68a3      	ldr	r3, [r4, #8]
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	60a3      	str	r3, [r4, #8]
 8005c30:	6823      	ldr	r3, [r4, #0]
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	6022      	str	r2, [r4, #0]
 8005c36:	701e      	strb	r6, [r3, #0]
 8005c38:	6963      	ldr	r3, [r4, #20]
 8005c3a:	3001      	adds	r0, #1
 8005c3c:	4283      	cmp	r3, r0
 8005c3e:	d004      	beq.n	8005c4a <__swbuf_r+0x62>
 8005c40:	89a3      	ldrh	r3, [r4, #12]
 8005c42:	07db      	lsls	r3, r3, #31
 8005c44:	d506      	bpl.n	8005c54 <__swbuf_r+0x6c>
 8005c46:	2e0a      	cmp	r6, #10
 8005c48:	d104      	bne.n	8005c54 <__swbuf_r+0x6c>
 8005c4a:	4621      	mov	r1, r4
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	f000 f921 	bl	8005e94 <_fflush_r>
 8005c52:	b988      	cbnz	r0, 8005c78 <__swbuf_r+0x90>
 8005c54:	4638      	mov	r0, r7
 8005c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c58:	4b0a      	ldr	r3, [pc, #40]	; (8005c84 <__swbuf_r+0x9c>)
 8005c5a:	429c      	cmp	r4, r3
 8005c5c:	d101      	bne.n	8005c62 <__swbuf_r+0x7a>
 8005c5e:	68ac      	ldr	r4, [r5, #8]
 8005c60:	e7cf      	b.n	8005c02 <__swbuf_r+0x1a>
 8005c62:	4b09      	ldr	r3, [pc, #36]	; (8005c88 <__swbuf_r+0xa0>)
 8005c64:	429c      	cmp	r4, r3
 8005c66:	bf08      	it	eq
 8005c68:	68ec      	ldreq	r4, [r5, #12]
 8005c6a:	e7ca      	b.n	8005c02 <__swbuf_r+0x1a>
 8005c6c:	4621      	mov	r1, r4
 8005c6e:	4628      	mov	r0, r5
 8005c70:	f000 f80c 	bl	8005c8c <__swsetup_r>
 8005c74:	2800      	cmp	r0, #0
 8005c76:	d0cb      	beq.n	8005c10 <__swbuf_r+0x28>
 8005c78:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005c7c:	e7ea      	b.n	8005c54 <__swbuf_r+0x6c>
 8005c7e:	bf00      	nop
 8005c80:	08006390 	.word	0x08006390
 8005c84:	080063b0 	.word	0x080063b0
 8005c88:	08006370 	.word	0x08006370

08005c8c <__swsetup_r>:
 8005c8c:	4b32      	ldr	r3, [pc, #200]	; (8005d58 <__swsetup_r+0xcc>)
 8005c8e:	b570      	push	{r4, r5, r6, lr}
 8005c90:	681d      	ldr	r5, [r3, #0]
 8005c92:	4606      	mov	r6, r0
 8005c94:	460c      	mov	r4, r1
 8005c96:	b125      	cbz	r5, 8005ca2 <__swsetup_r+0x16>
 8005c98:	69ab      	ldr	r3, [r5, #24]
 8005c9a:	b913      	cbnz	r3, 8005ca2 <__swsetup_r+0x16>
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	f7ff fb67 	bl	8005370 <__sinit>
 8005ca2:	4b2e      	ldr	r3, [pc, #184]	; (8005d5c <__swsetup_r+0xd0>)
 8005ca4:	429c      	cmp	r4, r3
 8005ca6:	d10f      	bne.n	8005cc8 <__swsetup_r+0x3c>
 8005ca8:	686c      	ldr	r4, [r5, #4]
 8005caa:	89a3      	ldrh	r3, [r4, #12]
 8005cac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cb0:	0719      	lsls	r1, r3, #28
 8005cb2:	d42c      	bmi.n	8005d0e <__swsetup_r+0x82>
 8005cb4:	06dd      	lsls	r5, r3, #27
 8005cb6:	d411      	bmi.n	8005cdc <__swsetup_r+0x50>
 8005cb8:	2309      	movs	r3, #9
 8005cba:	6033      	str	r3, [r6, #0]
 8005cbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005cc0:	81a3      	strh	r3, [r4, #12]
 8005cc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cc6:	e03e      	b.n	8005d46 <__swsetup_r+0xba>
 8005cc8:	4b25      	ldr	r3, [pc, #148]	; (8005d60 <__swsetup_r+0xd4>)
 8005cca:	429c      	cmp	r4, r3
 8005ccc:	d101      	bne.n	8005cd2 <__swsetup_r+0x46>
 8005cce:	68ac      	ldr	r4, [r5, #8]
 8005cd0:	e7eb      	b.n	8005caa <__swsetup_r+0x1e>
 8005cd2:	4b24      	ldr	r3, [pc, #144]	; (8005d64 <__swsetup_r+0xd8>)
 8005cd4:	429c      	cmp	r4, r3
 8005cd6:	bf08      	it	eq
 8005cd8:	68ec      	ldreq	r4, [r5, #12]
 8005cda:	e7e6      	b.n	8005caa <__swsetup_r+0x1e>
 8005cdc:	0758      	lsls	r0, r3, #29
 8005cde:	d512      	bpl.n	8005d06 <__swsetup_r+0x7a>
 8005ce0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ce2:	b141      	cbz	r1, 8005cf6 <__swsetup_r+0x6a>
 8005ce4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ce8:	4299      	cmp	r1, r3
 8005cea:	d002      	beq.n	8005cf2 <__swsetup_r+0x66>
 8005cec:	4630      	mov	r0, r6
 8005cee:	f000 f98f 	bl	8006010 <_free_r>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	6363      	str	r3, [r4, #52]	; 0x34
 8005cf6:	89a3      	ldrh	r3, [r4, #12]
 8005cf8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005cfc:	81a3      	strh	r3, [r4, #12]
 8005cfe:	2300      	movs	r3, #0
 8005d00:	6063      	str	r3, [r4, #4]
 8005d02:	6923      	ldr	r3, [r4, #16]
 8005d04:	6023      	str	r3, [r4, #0]
 8005d06:	89a3      	ldrh	r3, [r4, #12]
 8005d08:	f043 0308 	orr.w	r3, r3, #8
 8005d0c:	81a3      	strh	r3, [r4, #12]
 8005d0e:	6923      	ldr	r3, [r4, #16]
 8005d10:	b94b      	cbnz	r3, 8005d26 <__swsetup_r+0x9a>
 8005d12:	89a3      	ldrh	r3, [r4, #12]
 8005d14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d1c:	d003      	beq.n	8005d26 <__swsetup_r+0x9a>
 8005d1e:	4621      	mov	r1, r4
 8005d20:	4630      	mov	r0, r6
 8005d22:	f000 f929 	bl	8005f78 <__smakebuf_r>
 8005d26:	89a0      	ldrh	r0, [r4, #12]
 8005d28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d2c:	f010 0301 	ands.w	r3, r0, #1
 8005d30:	d00a      	beq.n	8005d48 <__swsetup_r+0xbc>
 8005d32:	2300      	movs	r3, #0
 8005d34:	60a3      	str	r3, [r4, #8]
 8005d36:	6963      	ldr	r3, [r4, #20]
 8005d38:	425b      	negs	r3, r3
 8005d3a:	61a3      	str	r3, [r4, #24]
 8005d3c:	6923      	ldr	r3, [r4, #16]
 8005d3e:	b943      	cbnz	r3, 8005d52 <__swsetup_r+0xc6>
 8005d40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d44:	d1ba      	bne.n	8005cbc <__swsetup_r+0x30>
 8005d46:	bd70      	pop	{r4, r5, r6, pc}
 8005d48:	0781      	lsls	r1, r0, #30
 8005d4a:	bf58      	it	pl
 8005d4c:	6963      	ldrpl	r3, [r4, #20]
 8005d4e:	60a3      	str	r3, [r4, #8]
 8005d50:	e7f4      	b.n	8005d3c <__swsetup_r+0xb0>
 8005d52:	2000      	movs	r0, #0
 8005d54:	e7f7      	b.n	8005d46 <__swsetup_r+0xba>
 8005d56:	bf00      	nop
 8005d58:	20000010 	.word	0x20000010
 8005d5c:	08006390 	.word	0x08006390
 8005d60:	080063b0 	.word	0x080063b0
 8005d64:	08006370 	.word	0x08006370

08005d68 <_close_r>:
 8005d68:	b538      	push	{r3, r4, r5, lr}
 8005d6a:	4d06      	ldr	r5, [pc, #24]	; (8005d84 <_close_r+0x1c>)
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	4604      	mov	r4, r0
 8005d70:	4608      	mov	r0, r1
 8005d72:	602b      	str	r3, [r5, #0]
 8005d74:	f7fb faeb 	bl	800134e <_close>
 8005d78:	1c43      	adds	r3, r0, #1
 8005d7a:	d102      	bne.n	8005d82 <_close_r+0x1a>
 8005d7c:	682b      	ldr	r3, [r5, #0]
 8005d7e:	b103      	cbz	r3, 8005d82 <_close_r+0x1a>
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	bd38      	pop	{r3, r4, r5, pc}
 8005d84:	2000d0a4 	.word	0x2000d0a4

08005d88 <__sflush_r>:
 8005d88:	898a      	ldrh	r2, [r1, #12]
 8005d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d8e:	4605      	mov	r5, r0
 8005d90:	0710      	lsls	r0, r2, #28
 8005d92:	460c      	mov	r4, r1
 8005d94:	d458      	bmi.n	8005e48 <__sflush_r+0xc0>
 8005d96:	684b      	ldr	r3, [r1, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	dc05      	bgt.n	8005da8 <__sflush_r+0x20>
 8005d9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	dc02      	bgt.n	8005da8 <__sflush_r+0x20>
 8005da2:	2000      	movs	r0, #0
 8005da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005da8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005daa:	2e00      	cmp	r6, #0
 8005dac:	d0f9      	beq.n	8005da2 <__sflush_r+0x1a>
 8005dae:	2300      	movs	r3, #0
 8005db0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005db4:	682f      	ldr	r7, [r5, #0]
 8005db6:	602b      	str	r3, [r5, #0]
 8005db8:	d032      	beq.n	8005e20 <__sflush_r+0x98>
 8005dba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005dbc:	89a3      	ldrh	r3, [r4, #12]
 8005dbe:	075a      	lsls	r2, r3, #29
 8005dc0:	d505      	bpl.n	8005dce <__sflush_r+0x46>
 8005dc2:	6863      	ldr	r3, [r4, #4]
 8005dc4:	1ac0      	subs	r0, r0, r3
 8005dc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005dc8:	b10b      	cbz	r3, 8005dce <__sflush_r+0x46>
 8005dca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005dcc:	1ac0      	subs	r0, r0, r3
 8005dce:	2300      	movs	r3, #0
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005dd4:	6a21      	ldr	r1, [r4, #32]
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	47b0      	blx	r6
 8005dda:	1c43      	adds	r3, r0, #1
 8005ddc:	89a3      	ldrh	r3, [r4, #12]
 8005dde:	d106      	bne.n	8005dee <__sflush_r+0x66>
 8005de0:	6829      	ldr	r1, [r5, #0]
 8005de2:	291d      	cmp	r1, #29
 8005de4:	d82c      	bhi.n	8005e40 <__sflush_r+0xb8>
 8005de6:	4a2a      	ldr	r2, [pc, #168]	; (8005e90 <__sflush_r+0x108>)
 8005de8:	40ca      	lsrs	r2, r1
 8005dea:	07d6      	lsls	r6, r2, #31
 8005dec:	d528      	bpl.n	8005e40 <__sflush_r+0xb8>
 8005dee:	2200      	movs	r2, #0
 8005df0:	6062      	str	r2, [r4, #4]
 8005df2:	04d9      	lsls	r1, r3, #19
 8005df4:	6922      	ldr	r2, [r4, #16]
 8005df6:	6022      	str	r2, [r4, #0]
 8005df8:	d504      	bpl.n	8005e04 <__sflush_r+0x7c>
 8005dfa:	1c42      	adds	r2, r0, #1
 8005dfc:	d101      	bne.n	8005e02 <__sflush_r+0x7a>
 8005dfe:	682b      	ldr	r3, [r5, #0]
 8005e00:	b903      	cbnz	r3, 8005e04 <__sflush_r+0x7c>
 8005e02:	6560      	str	r0, [r4, #84]	; 0x54
 8005e04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e06:	602f      	str	r7, [r5, #0]
 8005e08:	2900      	cmp	r1, #0
 8005e0a:	d0ca      	beq.n	8005da2 <__sflush_r+0x1a>
 8005e0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e10:	4299      	cmp	r1, r3
 8005e12:	d002      	beq.n	8005e1a <__sflush_r+0x92>
 8005e14:	4628      	mov	r0, r5
 8005e16:	f000 f8fb 	bl	8006010 <_free_r>
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	6360      	str	r0, [r4, #52]	; 0x34
 8005e1e:	e7c1      	b.n	8005da4 <__sflush_r+0x1c>
 8005e20:	6a21      	ldr	r1, [r4, #32]
 8005e22:	2301      	movs	r3, #1
 8005e24:	4628      	mov	r0, r5
 8005e26:	47b0      	blx	r6
 8005e28:	1c41      	adds	r1, r0, #1
 8005e2a:	d1c7      	bne.n	8005dbc <__sflush_r+0x34>
 8005e2c:	682b      	ldr	r3, [r5, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d0c4      	beq.n	8005dbc <__sflush_r+0x34>
 8005e32:	2b1d      	cmp	r3, #29
 8005e34:	d001      	beq.n	8005e3a <__sflush_r+0xb2>
 8005e36:	2b16      	cmp	r3, #22
 8005e38:	d101      	bne.n	8005e3e <__sflush_r+0xb6>
 8005e3a:	602f      	str	r7, [r5, #0]
 8005e3c:	e7b1      	b.n	8005da2 <__sflush_r+0x1a>
 8005e3e:	89a3      	ldrh	r3, [r4, #12]
 8005e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e44:	81a3      	strh	r3, [r4, #12]
 8005e46:	e7ad      	b.n	8005da4 <__sflush_r+0x1c>
 8005e48:	690f      	ldr	r7, [r1, #16]
 8005e4a:	2f00      	cmp	r7, #0
 8005e4c:	d0a9      	beq.n	8005da2 <__sflush_r+0x1a>
 8005e4e:	0793      	lsls	r3, r2, #30
 8005e50:	680e      	ldr	r6, [r1, #0]
 8005e52:	bf08      	it	eq
 8005e54:	694b      	ldreq	r3, [r1, #20]
 8005e56:	600f      	str	r7, [r1, #0]
 8005e58:	bf18      	it	ne
 8005e5a:	2300      	movne	r3, #0
 8005e5c:	eba6 0807 	sub.w	r8, r6, r7
 8005e60:	608b      	str	r3, [r1, #8]
 8005e62:	f1b8 0f00 	cmp.w	r8, #0
 8005e66:	dd9c      	ble.n	8005da2 <__sflush_r+0x1a>
 8005e68:	6a21      	ldr	r1, [r4, #32]
 8005e6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e6c:	4643      	mov	r3, r8
 8005e6e:	463a      	mov	r2, r7
 8005e70:	4628      	mov	r0, r5
 8005e72:	47b0      	blx	r6
 8005e74:	2800      	cmp	r0, #0
 8005e76:	dc06      	bgt.n	8005e86 <__sflush_r+0xfe>
 8005e78:	89a3      	ldrh	r3, [r4, #12]
 8005e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e7e:	81a3      	strh	r3, [r4, #12]
 8005e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e84:	e78e      	b.n	8005da4 <__sflush_r+0x1c>
 8005e86:	4407      	add	r7, r0
 8005e88:	eba8 0800 	sub.w	r8, r8, r0
 8005e8c:	e7e9      	b.n	8005e62 <__sflush_r+0xda>
 8005e8e:	bf00      	nop
 8005e90:	20400001 	.word	0x20400001

08005e94 <_fflush_r>:
 8005e94:	b538      	push	{r3, r4, r5, lr}
 8005e96:	690b      	ldr	r3, [r1, #16]
 8005e98:	4605      	mov	r5, r0
 8005e9a:	460c      	mov	r4, r1
 8005e9c:	b913      	cbnz	r3, 8005ea4 <_fflush_r+0x10>
 8005e9e:	2500      	movs	r5, #0
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	bd38      	pop	{r3, r4, r5, pc}
 8005ea4:	b118      	cbz	r0, 8005eae <_fflush_r+0x1a>
 8005ea6:	6983      	ldr	r3, [r0, #24]
 8005ea8:	b90b      	cbnz	r3, 8005eae <_fflush_r+0x1a>
 8005eaa:	f7ff fa61 	bl	8005370 <__sinit>
 8005eae:	4b14      	ldr	r3, [pc, #80]	; (8005f00 <_fflush_r+0x6c>)
 8005eb0:	429c      	cmp	r4, r3
 8005eb2:	d11b      	bne.n	8005eec <_fflush_r+0x58>
 8005eb4:	686c      	ldr	r4, [r5, #4]
 8005eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d0ef      	beq.n	8005e9e <_fflush_r+0xa>
 8005ebe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ec0:	07d0      	lsls	r0, r2, #31
 8005ec2:	d404      	bmi.n	8005ece <_fflush_r+0x3a>
 8005ec4:	0599      	lsls	r1, r3, #22
 8005ec6:	d402      	bmi.n	8005ece <_fflush_r+0x3a>
 8005ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eca:	f7ff faef 	bl	80054ac <__retarget_lock_acquire_recursive>
 8005ece:	4628      	mov	r0, r5
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	f7ff ff59 	bl	8005d88 <__sflush_r>
 8005ed6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ed8:	07da      	lsls	r2, r3, #31
 8005eda:	4605      	mov	r5, r0
 8005edc:	d4e0      	bmi.n	8005ea0 <_fflush_r+0xc>
 8005ede:	89a3      	ldrh	r3, [r4, #12]
 8005ee0:	059b      	lsls	r3, r3, #22
 8005ee2:	d4dd      	bmi.n	8005ea0 <_fflush_r+0xc>
 8005ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ee6:	f7ff fae2 	bl	80054ae <__retarget_lock_release_recursive>
 8005eea:	e7d9      	b.n	8005ea0 <_fflush_r+0xc>
 8005eec:	4b05      	ldr	r3, [pc, #20]	; (8005f04 <_fflush_r+0x70>)
 8005eee:	429c      	cmp	r4, r3
 8005ef0:	d101      	bne.n	8005ef6 <_fflush_r+0x62>
 8005ef2:	68ac      	ldr	r4, [r5, #8]
 8005ef4:	e7df      	b.n	8005eb6 <_fflush_r+0x22>
 8005ef6:	4b04      	ldr	r3, [pc, #16]	; (8005f08 <_fflush_r+0x74>)
 8005ef8:	429c      	cmp	r4, r3
 8005efa:	bf08      	it	eq
 8005efc:	68ec      	ldreq	r4, [r5, #12]
 8005efe:	e7da      	b.n	8005eb6 <_fflush_r+0x22>
 8005f00:	08006390 	.word	0x08006390
 8005f04:	080063b0 	.word	0x080063b0
 8005f08:	08006370 	.word	0x08006370

08005f0c <_lseek_r>:
 8005f0c:	b538      	push	{r3, r4, r5, lr}
 8005f0e:	4d07      	ldr	r5, [pc, #28]	; (8005f2c <_lseek_r+0x20>)
 8005f10:	4604      	mov	r4, r0
 8005f12:	4608      	mov	r0, r1
 8005f14:	4611      	mov	r1, r2
 8005f16:	2200      	movs	r2, #0
 8005f18:	602a      	str	r2, [r5, #0]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f7fb fa3e 	bl	800139c <_lseek>
 8005f20:	1c43      	adds	r3, r0, #1
 8005f22:	d102      	bne.n	8005f2a <_lseek_r+0x1e>
 8005f24:	682b      	ldr	r3, [r5, #0]
 8005f26:	b103      	cbz	r3, 8005f2a <_lseek_r+0x1e>
 8005f28:	6023      	str	r3, [r4, #0]
 8005f2a:	bd38      	pop	{r3, r4, r5, pc}
 8005f2c:	2000d0a4 	.word	0x2000d0a4

08005f30 <__swhatbuf_r>:
 8005f30:	b570      	push	{r4, r5, r6, lr}
 8005f32:	460e      	mov	r6, r1
 8005f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f38:	2900      	cmp	r1, #0
 8005f3a:	b096      	sub	sp, #88	; 0x58
 8005f3c:	4614      	mov	r4, r2
 8005f3e:	461d      	mov	r5, r3
 8005f40:	da07      	bge.n	8005f52 <__swhatbuf_r+0x22>
 8005f42:	2300      	movs	r3, #0
 8005f44:	602b      	str	r3, [r5, #0]
 8005f46:	89b3      	ldrh	r3, [r6, #12]
 8005f48:	061a      	lsls	r2, r3, #24
 8005f4a:	d410      	bmi.n	8005f6e <__swhatbuf_r+0x3e>
 8005f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f50:	e00e      	b.n	8005f70 <__swhatbuf_r+0x40>
 8005f52:	466a      	mov	r2, sp
 8005f54:	f000 f8be 	bl	80060d4 <_fstat_r>
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	dbf2      	blt.n	8005f42 <__swhatbuf_r+0x12>
 8005f5c:	9a01      	ldr	r2, [sp, #4]
 8005f5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f66:	425a      	negs	r2, r3
 8005f68:	415a      	adcs	r2, r3
 8005f6a:	602a      	str	r2, [r5, #0]
 8005f6c:	e7ee      	b.n	8005f4c <__swhatbuf_r+0x1c>
 8005f6e:	2340      	movs	r3, #64	; 0x40
 8005f70:	2000      	movs	r0, #0
 8005f72:	6023      	str	r3, [r4, #0]
 8005f74:	b016      	add	sp, #88	; 0x58
 8005f76:	bd70      	pop	{r4, r5, r6, pc}

08005f78 <__smakebuf_r>:
 8005f78:	898b      	ldrh	r3, [r1, #12]
 8005f7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f7c:	079d      	lsls	r5, r3, #30
 8005f7e:	4606      	mov	r6, r0
 8005f80:	460c      	mov	r4, r1
 8005f82:	d507      	bpl.n	8005f94 <__smakebuf_r+0x1c>
 8005f84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f88:	6023      	str	r3, [r4, #0]
 8005f8a:	6123      	str	r3, [r4, #16]
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	6163      	str	r3, [r4, #20]
 8005f90:	b002      	add	sp, #8
 8005f92:	bd70      	pop	{r4, r5, r6, pc}
 8005f94:	ab01      	add	r3, sp, #4
 8005f96:	466a      	mov	r2, sp
 8005f98:	f7ff ffca 	bl	8005f30 <__swhatbuf_r>
 8005f9c:	9900      	ldr	r1, [sp, #0]
 8005f9e:	4605      	mov	r5, r0
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	f7ff fa85 	bl	80054b0 <_malloc_r>
 8005fa6:	b948      	cbnz	r0, 8005fbc <__smakebuf_r+0x44>
 8005fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fac:	059a      	lsls	r2, r3, #22
 8005fae:	d4ef      	bmi.n	8005f90 <__smakebuf_r+0x18>
 8005fb0:	f023 0303 	bic.w	r3, r3, #3
 8005fb4:	f043 0302 	orr.w	r3, r3, #2
 8005fb8:	81a3      	strh	r3, [r4, #12]
 8005fba:	e7e3      	b.n	8005f84 <__smakebuf_r+0xc>
 8005fbc:	4b0d      	ldr	r3, [pc, #52]	; (8005ff4 <__smakebuf_r+0x7c>)
 8005fbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8005fc0:	89a3      	ldrh	r3, [r4, #12]
 8005fc2:	6020      	str	r0, [r4, #0]
 8005fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc8:	81a3      	strh	r3, [r4, #12]
 8005fca:	9b00      	ldr	r3, [sp, #0]
 8005fcc:	6163      	str	r3, [r4, #20]
 8005fce:	9b01      	ldr	r3, [sp, #4]
 8005fd0:	6120      	str	r0, [r4, #16]
 8005fd2:	b15b      	cbz	r3, 8005fec <__smakebuf_r+0x74>
 8005fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fd8:	4630      	mov	r0, r6
 8005fda:	f000 f88d 	bl	80060f8 <_isatty_r>
 8005fde:	b128      	cbz	r0, 8005fec <__smakebuf_r+0x74>
 8005fe0:	89a3      	ldrh	r3, [r4, #12]
 8005fe2:	f023 0303 	bic.w	r3, r3, #3
 8005fe6:	f043 0301 	orr.w	r3, r3, #1
 8005fea:	81a3      	strh	r3, [r4, #12]
 8005fec:	89a0      	ldrh	r0, [r4, #12]
 8005fee:	4305      	orrs	r5, r0
 8005ff0:	81a5      	strh	r5, [r4, #12]
 8005ff2:	e7cd      	b.n	8005f90 <__smakebuf_r+0x18>
 8005ff4:	08005309 	.word	0x08005309

08005ff8 <__malloc_lock>:
 8005ff8:	4801      	ldr	r0, [pc, #4]	; (8006000 <__malloc_lock+0x8>)
 8005ffa:	f7ff ba57 	b.w	80054ac <__retarget_lock_acquire_recursive>
 8005ffe:	bf00      	nop
 8006000:	2000d09c 	.word	0x2000d09c

08006004 <__malloc_unlock>:
 8006004:	4801      	ldr	r0, [pc, #4]	; (800600c <__malloc_unlock+0x8>)
 8006006:	f7ff ba52 	b.w	80054ae <__retarget_lock_release_recursive>
 800600a:	bf00      	nop
 800600c:	2000d09c 	.word	0x2000d09c

08006010 <_free_r>:
 8006010:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006012:	2900      	cmp	r1, #0
 8006014:	d048      	beq.n	80060a8 <_free_r+0x98>
 8006016:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800601a:	9001      	str	r0, [sp, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	f1a1 0404 	sub.w	r4, r1, #4
 8006022:	bfb8      	it	lt
 8006024:	18e4      	addlt	r4, r4, r3
 8006026:	f7ff ffe7 	bl	8005ff8 <__malloc_lock>
 800602a:	4a20      	ldr	r2, [pc, #128]	; (80060ac <_free_r+0x9c>)
 800602c:	9801      	ldr	r0, [sp, #4]
 800602e:	6813      	ldr	r3, [r2, #0]
 8006030:	4615      	mov	r5, r2
 8006032:	b933      	cbnz	r3, 8006042 <_free_r+0x32>
 8006034:	6063      	str	r3, [r4, #4]
 8006036:	6014      	str	r4, [r2, #0]
 8006038:	b003      	add	sp, #12
 800603a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800603e:	f7ff bfe1 	b.w	8006004 <__malloc_unlock>
 8006042:	42a3      	cmp	r3, r4
 8006044:	d90b      	bls.n	800605e <_free_r+0x4e>
 8006046:	6821      	ldr	r1, [r4, #0]
 8006048:	1862      	adds	r2, r4, r1
 800604a:	4293      	cmp	r3, r2
 800604c:	bf04      	itt	eq
 800604e:	681a      	ldreq	r2, [r3, #0]
 8006050:	685b      	ldreq	r3, [r3, #4]
 8006052:	6063      	str	r3, [r4, #4]
 8006054:	bf04      	itt	eq
 8006056:	1852      	addeq	r2, r2, r1
 8006058:	6022      	streq	r2, [r4, #0]
 800605a:	602c      	str	r4, [r5, #0]
 800605c:	e7ec      	b.n	8006038 <_free_r+0x28>
 800605e:	461a      	mov	r2, r3
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	b10b      	cbz	r3, 8006068 <_free_r+0x58>
 8006064:	42a3      	cmp	r3, r4
 8006066:	d9fa      	bls.n	800605e <_free_r+0x4e>
 8006068:	6811      	ldr	r1, [r2, #0]
 800606a:	1855      	adds	r5, r2, r1
 800606c:	42a5      	cmp	r5, r4
 800606e:	d10b      	bne.n	8006088 <_free_r+0x78>
 8006070:	6824      	ldr	r4, [r4, #0]
 8006072:	4421      	add	r1, r4
 8006074:	1854      	adds	r4, r2, r1
 8006076:	42a3      	cmp	r3, r4
 8006078:	6011      	str	r1, [r2, #0]
 800607a:	d1dd      	bne.n	8006038 <_free_r+0x28>
 800607c:	681c      	ldr	r4, [r3, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	6053      	str	r3, [r2, #4]
 8006082:	4421      	add	r1, r4
 8006084:	6011      	str	r1, [r2, #0]
 8006086:	e7d7      	b.n	8006038 <_free_r+0x28>
 8006088:	d902      	bls.n	8006090 <_free_r+0x80>
 800608a:	230c      	movs	r3, #12
 800608c:	6003      	str	r3, [r0, #0]
 800608e:	e7d3      	b.n	8006038 <_free_r+0x28>
 8006090:	6825      	ldr	r5, [r4, #0]
 8006092:	1961      	adds	r1, r4, r5
 8006094:	428b      	cmp	r3, r1
 8006096:	bf04      	itt	eq
 8006098:	6819      	ldreq	r1, [r3, #0]
 800609a:	685b      	ldreq	r3, [r3, #4]
 800609c:	6063      	str	r3, [r4, #4]
 800609e:	bf04      	itt	eq
 80060a0:	1949      	addeq	r1, r1, r5
 80060a2:	6021      	streq	r1, [r4, #0]
 80060a4:	6054      	str	r4, [r2, #4]
 80060a6:	e7c7      	b.n	8006038 <_free_r+0x28>
 80060a8:	b003      	add	sp, #12
 80060aa:	bd30      	pop	{r4, r5, pc}
 80060ac:	2000cf88 	.word	0x2000cf88

080060b0 <_read_r>:
 80060b0:	b538      	push	{r3, r4, r5, lr}
 80060b2:	4d07      	ldr	r5, [pc, #28]	; (80060d0 <_read_r+0x20>)
 80060b4:	4604      	mov	r4, r0
 80060b6:	4608      	mov	r0, r1
 80060b8:	4611      	mov	r1, r2
 80060ba:	2200      	movs	r2, #0
 80060bc:	602a      	str	r2, [r5, #0]
 80060be:	461a      	mov	r2, r3
 80060c0:	f7fb f928 	bl	8001314 <_read>
 80060c4:	1c43      	adds	r3, r0, #1
 80060c6:	d102      	bne.n	80060ce <_read_r+0x1e>
 80060c8:	682b      	ldr	r3, [r5, #0]
 80060ca:	b103      	cbz	r3, 80060ce <_read_r+0x1e>
 80060cc:	6023      	str	r3, [r4, #0]
 80060ce:	bd38      	pop	{r3, r4, r5, pc}
 80060d0:	2000d0a4 	.word	0x2000d0a4

080060d4 <_fstat_r>:
 80060d4:	b538      	push	{r3, r4, r5, lr}
 80060d6:	4d07      	ldr	r5, [pc, #28]	; (80060f4 <_fstat_r+0x20>)
 80060d8:	2300      	movs	r3, #0
 80060da:	4604      	mov	r4, r0
 80060dc:	4608      	mov	r0, r1
 80060de:	4611      	mov	r1, r2
 80060e0:	602b      	str	r3, [r5, #0]
 80060e2:	f7fb f940 	bl	8001366 <_fstat>
 80060e6:	1c43      	adds	r3, r0, #1
 80060e8:	d102      	bne.n	80060f0 <_fstat_r+0x1c>
 80060ea:	682b      	ldr	r3, [r5, #0]
 80060ec:	b103      	cbz	r3, 80060f0 <_fstat_r+0x1c>
 80060ee:	6023      	str	r3, [r4, #0]
 80060f0:	bd38      	pop	{r3, r4, r5, pc}
 80060f2:	bf00      	nop
 80060f4:	2000d0a4 	.word	0x2000d0a4

080060f8 <_isatty_r>:
 80060f8:	b538      	push	{r3, r4, r5, lr}
 80060fa:	4d06      	ldr	r5, [pc, #24]	; (8006114 <_isatty_r+0x1c>)
 80060fc:	2300      	movs	r3, #0
 80060fe:	4604      	mov	r4, r0
 8006100:	4608      	mov	r0, r1
 8006102:	602b      	str	r3, [r5, #0]
 8006104:	f7fb f93f 	bl	8001386 <_isatty>
 8006108:	1c43      	adds	r3, r0, #1
 800610a:	d102      	bne.n	8006112 <_isatty_r+0x1a>
 800610c:	682b      	ldr	r3, [r5, #0]
 800610e:	b103      	cbz	r3, 8006112 <_isatty_r+0x1a>
 8006110:	6023      	str	r3, [r4, #0]
 8006112:	bd38      	pop	{r3, r4, r5, pc}
 8006114:	2000d0a4 	.word	0x2000d0a4

08006118 <_sbrk>:
 8006118:	4b04      	ldr	r3, [pc, #16]	; (800612c <_sbrk+0x14>)
 800611a:	6819      	ldr	r1, [r3, #0]
 800611c:	4602      	mov	r2, r0
 800611e:	b909      	cbnz	r1, 8006124 <_sbrk+0xc>
 8006120:	4903      	ldr	r1, [pc, #12]	; (8006130 <_sbrk+0x18>)
 8006122:	6019      	str	r1, [r3, #0]
 8006124:	6818      	ldr	r0, [r3, #0]
 8006126:	4402      	add	r2, r0
 8006128:	601a      	str	r2, [r3, #0]
 800612a:	4770      	bx	lr
 800612c:	2000cf90 	.word	0x2000cf90
 8006130:	2000d0a8 	.word	0x2000d0a8

08006134 <_init>:
 8006134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006136:	bf00      	nop
 8006138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800613a:	bc08      	pop	{r3}
 800613c:	469e      	mov	lr, r3
 800613e:	4770      	bx	lr

08006140 <_fini>:
 8006140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006142:	bf00      	nop
 8006144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006146:	bc08      	pop	{r3}
 8006148:	469e      	mov	lr, r3
 800614a:	4770      	bx	lr
